!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABOUTDIALOG_H	ui/aboutdialog.h	/^#define ABOUTDIALOG_H$/;"	d
ALL_PIECES	program/globals.h	/^enum NodeDragging {ONE_PIECE, NEARBY_PIECES, ALL_PIECES, NO_DRAGGING};$/;"	e	enum:NodeDragging
ANY_FILE_TYPE	program/globals.h	/^enum GraphFileType {LAST_GRAPH, FASTG, GFA, TRINITY, ASQG, PLAIN_FASTA, ANY_FILE_TYPE,$/;"	e	enum:GraphFileType
AR	Makefile	/^AR            = \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/ar cq$/;"	m
AROUND_BLAST_HITS	program/globals.h	/^enum GraphScope {WHOLE_GRAPH, AROUND_NODE, AROUND_BLAST_HITS, DEPTH_RANGE};$/;"	e	enum:GraphScope
AROUND_NODE	program/globals.h	/^enum GraphScope {WHOLE_GRAPH, AROUND_NODE, AROUND_BLAST_HITS, DEPTH_RANGE};$/;"	e	enum:GraphScope
ASQG	program/globals.h	/^enum GraphFileType {LAST_GRAPH, FASTG, GFA, TRINITY, ASQG, PLAIN_FASTA, ANY_FILE_TYPE,$/;"	e	enum:GraphFileType
ASSEMBLYGRAPH_H	graph/assemblygraph.h	/^#define ASSEMBLYGRAPH_H$/;"	d
ATT_NUM	ogdf/fileformats/Ogml.h	/^		ATT_NUM					\/\/!< number of attributes$/;"	e	enum:ogdf::Ogml::AttributeId
ATT_VAL_NUM	ogdf/fileformats/Ogml.h	/^		ATT_VAL_NUM					\/\/!< number of attribute values$/;"	e	enum:ogdf::Ogml::AttributeValueId
AUTO_DETERMINED_EXACT_OVERLAP	program/globals.h	/^                      AUTO_DETERMINED_EXACT_OVERLAP};$/;"	e	enum:EdgeOverlapType
AUTO_NODE_LENGTH	program/globals.h	/^enum NodeLengthMode {AUTO_NODE_LENGTH, MANUAL_NODE_LENGTH};$/;"	e	enum:NodeLengthMode
AboutDialog	ui/aboutdialog.cpp	/^AboutDialog::AboutDialog(QWidget *parent) :$/;"	f	class:AboutDialog
AboutDialog	ui/aboutdialog.h	/^class AboutDialog : public QDialog$/;"	c
AdjElement	ogdf/basic/Graph_d.h	/^	AdjElement(edge e, int id) : m_edge(e), m_id(id) { }$/;"	f	class:ogdf::AdjElement
AdjElement	ogdf/basic/Graph_d.h	/^	AdjElement(node v) : m_node(v) { }$/;"	f	class:ogdf::AdjElement
AdjElement	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT AdjElement : private GraphElement {$/;"	c	namespace:ogdf
AdjElement	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT AdjElement;$/;"	m	namespace:ogdf	typeref:class:ogdf::OGDF_EXPORT
AdjEntryArray	ogdf/basic/AdjEntryArray.h	/^	AdjEntryArray() : Array<T>(), AdjEntryArrayBase() { }$/;"	f	class:ogdf::AdjEntryArray
AdjEntryArray	ogdf/basic/AdjEntryArray.h	/^	AdjEntryArray(const AdjEntryArray<T> &A) : Array<T>(A), AdjEntryArrayBase(A.m_pGraph), m_x(A.m_x) { }$/;"	f	class:ogdf::AdjEntryArray
AdjEntryArray	ogdf/basic/AdjEntryArray.h	/^	AdjEntryArray(const Graph &G) : Array<T>(G.adjEntryArrayTableSize()), AdjEntryArrayBase(&G) { }$/;"	f	class:ogdf::AdjEntryArray
AdjEntryArray	ogdf/basic/AdjEntryArray.h	/^	AdjEntryArray(const Graph &G, const T &x) :$/;"	f	class:ogdf::AdjEntryArray
AdjEntryArray	ogdf/basic/AdjEntryArray.h	/^template<class T> class AdjEntryArray : private Array<T>, protected AdjEntryArrayBase {$/;"	c	namespace:ogdf
AdjEntryArrayBase	ogdf/basic/AdjEntryArray.h	/^	AdjEntryArrayBase() : m_pGraph(0) { }$/;"	f	class:ogdf::AdjEntryArrayBase
AdjEntryArrayBase	ogdf/basic/AdjEntryArray.h	/^	AdjEntryArrayBase(const Graph *pG) : m_pGraph(pG) {$/;"	f	class:ogdf::AdjEntryArrayBase
AdjEntryArrayBase	ogdf/basic/AdjEntryArray.h	/^class AdjEntryArrayBase {$/;"	c	namespace:ogdf
AlgorithmFailureCode	ogdf/basic/exceptions.h	/^	enum AlgorithmFailureCode {$/;"	g	namespace:ogdf
AlgorithmFailureException	ogdf/basic/exceptions.h	/^		AlgorithmFailureException($/;"	f	class:ogdf::AlgorithmFailureException
AlgorithmFailureException	ogdf/basic/exceptions.h	/^		AlgorithmFailureException(AlgorithmFailureCode code,$/;"	f	class:ogdf::AlgorithmFailureException
AlgorithmFailureException	ogdf/basic/exceptions.h	/^	class OGDF_EXPORT AlgorithmFailureException : public Exception$/;"	c	namespace:ogdf
AllowedPositions	ogdf/energybased/FMMMLayout.h	/^	enum AllowedPositions {$/;"	g	class:ogdf::FMMMLayout
Array	ogdf/basic/Array.h	/^	Array() { construct(0,-1); }$/;"	f	class:ogdf::Array
Array	ogdf/basic/Array.h	/^	Array(INDEX a, INDEX b) {$/;"	f	class:ogdf::Array
Array	ogdf/basic/Array.h	/^	Array(INDEX a, INDEX b, const E &x) {$/;"	f	class:ogdf::Array
Array	ogdf/basic/Array.h	/^	Array(const Array<E> &A) {$/;"	f	class:ogdf::Array
Array	ogdf/basic/Array.h	/^	explicit Array(INDEX s) {$/;"	f	class:ogdf::Array
Array	ogdf/basic/Array.h	/^template<class E, class INDEX = int> class Array {$/;"	c	namespace:ogdf
Array2D	ogdf/basic/Array2D.h	/^	Array2D() { construct(0,-1,0,-1); }$/;"	f	class:ogdf::Array2D
Array2D	ogdf/basic/Array2D.h	/^	Array2D(const Array2D<E> &array2) {$/;"	f	class:ogdf::Array2D
Array2D	ogdf/basic/Array2D.h	/^	Array2D(int a, int b, int c, int d) {$/;"	f	class:ogdf::Array2D
Array2D	ogdf/basic/Array2D.h	/^	Array2D(int a, int b, int c, int d, const E &x) {$/;"	f	class:ogdf::Array2D
Array2D	ogdf/basic/Array2D.h	/^template<class E> class Array2D$/;"	c	namespace:ogdf
AssemblyGraph	graph/assemblygraph.cpp	/^AssemblyGraph::AssemblyGraph() :$/;"	f	class:AssemblyGraph
AssemblyGraph	graph/assemblygraph.h	/^class AssemblyGraph : public QObject$/;"	c
AttributeId	ogdf/fileformats/Ogml.h	/^	enum AttributeId$/;"	g	class:ogdf::Ogml
AttributeValueId	ogdf/fileformats/Ogml.h	/^	enum AttributeValueId$/;"	g	class:ogdf::Ogml
BANDAGE_DISTANCE	program/globals.h	/^                         BANDAGE_DISTANCE, BANDAGE_QUERY_PATHS, BANDAGE_REDUCE};$/;"	e	enum:CommandLineCommand
BANDAGE_IMAGE	program/globals.h	/^enum CommandLineCommand {NO_COMMAND, BANDAGE_LOAD, BANDAGE_INFO, BANDAGE_IMAGE,$/;"	e	enum:CommandLineCommand
BANDAGE_INFO	program/globals.h	/^enum CommandLineCommand {NO_COMMAND, BANDAGE_LOAD, BANDAGE_INFO, BANDAGE_IMAGE,$/;"	e	enum:CommandLineCommand
BANDAGE_LOAD	program/globals.h	/^enum CommandLineCommand {NO_COMMAND, BANDAGE_LOAD, BANDAGE_INFO, BANDAGE_IMAGE,$/;"	e	enum:CommandLineCommand
BANDAGE_QUERY_PATHS	program/globals.h	/^                         BANDAGE_DISTANCE, BANDAGE_QUERY_PATHS, BANDAGE_REDUCE};$/;"	e	enum:CommandLineCommand
BANDAGE_REDUCE	program/globals.h	/^                         BANDAGE_DISTANCE, BANDAGE_QUERY_PATHS, BANDAGE_REDUCE};$/;"	e	enum:CommandLineCommand
BK	ogdf/internal/energybased/NMM.h	/^	double ** BK; \/\/holds the binomial coefficients$/;"	m	class:ogdf::NMM
BLASTHITFILTERSDIALOG_H	ui/blasthitfiltersdialog.h	/^#define BLASTHITFILTERSDIALOG_H$/;"	d
BLASTHITPART_H	blast/blasthitpart.h	/^#define BLASTHITPART_H$/;"	d
BLASTHIT_H	blast/blasthit.h	/^#define BLASTHIT_H$/;"	d
BLASTQUERIES_H	blast/blastqueries.h	/^#define BLASTQUERIES_H$/;"	d
BLASTQUERYPATH_H	blast/blastquerypath.h	/^#define BLASTQUERYPATH_H$/;"	d
BLASTQUERY_H	blast/blastquery.h	/^#define BLASTQUERY_H$/;"	d
BLASTSEARCHDIALOG_H	ui/blastsearchdialog.h	/^#define BLASTSEARCHDIALOG_H$/;"	d
BLASTSEARCH_H	blast/blastsearch.h	/^#define BLASTSEARCH_H$/;"	d
BLAST_DB_BUILD_IN_PROGRESS	program/globals.h	/^enum BlastUiState {BLAST_DB_NOT_YET_BUILT, BLAST_DB_BUILD_IN_PROGRESS,$/;"	e	enum:BlastUiState
BLAST_DB_BUILT_BUT_NO_QUERIES	program/globals.h	/^                   BLAST_DB_BUILT_BUT_NO_QUERIES,$/;"	e	enum:BlastUiState
BLAST_DB_NOT_YET_BUILT	program/globals.h	/^enum BlastUiState {BLAST_DB_NOT_YET_BUILT, BLAST_DB_BUILD_IN_PROGRESS,$/;"	e	enum:BlastUiState
BLAST_HITS_RAINBOW_COLOUR	program/globals.h	/^                       BLAST_HITS_RAINBOW_COLOUR, BLAST_HITS_SOLID_COLOUR,$/;"	e	enum:NodeColourScheme
BLAST_HITS_SOLID_COLOUR	program/globals.h	/^                       BLAST_HITS_RAINBOW_COLOUR, BLAST_HITS_SOLID_COLOUR,$/;"	e	enum:NodeColourScheme
BLAST_SEARCH_COMPLETE	program/globals.h	/^                   BLAST_SEARCH_COMPLETE};$/;"	e	enum:BlastUiState
BLAST_SEARCH_IN_PROGRESS	program/globals.h	/^                   READY_FOR_BLAST_SEARCH, BLAST_SEARCH_IN_PROGRESS,$/;"	e	enum:BlastUiState
BUFFERLENGTH	ogdf/fileformats/XmlParser.cpp	/^#define BUFFERLENGTH /;"	d	file:
BUILDBLASTDATABASEWORKER_H	blast/buildblastdatabaseworker.h	/^#define BUILDBLASTDATABASEWORKER_H$/;"	d
B_F_insert_rectangle	ogdf/energybased/MAARPacking.cpp	/^void MAARPacking::B_F_insert_rectangle($/;"	f	class:ogdf::MAARPacking
B_F_insert_rectangle_in_new_row	ogdf/energybased/MAARPacking.cpp	/^void MAARPacking::B_F_insert_rectangle_in_new_row($/;"	f	class:ogdf::MAARPacking
BackwardDiagonal	ogdf/basic/GraphAttributes.h	/^		BackwardDiagonal = 12,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
BandageTests	tests/bandagetests.cpp	/^class BandageTests : public QObject$/;"	c	file:
BlastHit	blast/blasthit.cpp	/^BlastHit::BlastHit(BlastQuery * query, DeBruijnNode * node,$/;"	f	class:BlastHit
BlastHit	blast/blasthit.h	/^class BlastHit$/;"	c
BlastHitFiltersDialog	ui/blasthitfiltersdialog.cpp	/^BlastHitFiltersDialog::BlastHitFiltersDialog(QWidget *parent) :$/;"	f	class:BlastHitFiltersDialog
BlastHitFiltersDialog	ui/blasthitfiltersdialog.h	/^class BlastHitFiltersDialog : public QDialog$/;"	c
BlastHitPart	blast/blasthitpart.h	/^    BlastHitPart() {}$/;"	f	class:BlastHitPart
BlastHitPart	blast/blasthitpart.h	/^    BlastHitPart(QColor colour, double nodeFractionStart, double nodeFractionEnd) :$/;"	f	class:BlastHitPart
BlastHitPart	blast/blasthitpart.h	/^class BlastHitPart$/;"	c
BlastQueries	blast/blastqueries.cpp	/^BlastQueries::BlastQueries() :$/;"	f	class:BlastQueries
BlastQueries	blast/blastqueries.h	/^class BlastQueries$/;"	c
BlastQuery	blast/blastquery.cpp	/^BlastQuery::BlastQuery(QString name, QString sequence) :$/;"	f	class:BlastQuery
BlastQuery	blast/blastquery.h	/^    BlastQuery() {}$/;"	f	class:BlastQuery
BlastQuery	blast/blastquery.h	/^class BlastQuery : public QObject$/;"	c
BlastQueryPath	blast/blastquerypath.cpp	/^BlastQueryPath::BlastQueryPath(Path path, BlastQuery * query) :$/;"	f	class:BlastQueryPath
BlastQueryPath	blast/blastquerypath.h	/^class BlastQueryPath$/;"	c
BlastSearch	blast/blastsearch.cpp	/^BlastSearch::BlastSearch() :$/;"	f	class:BlastSearch
BlastSearch	blast/blastsearch.h	/^class BlastSearch$/;"	c
BlastSearchDialog	ui/blastsearchdialog.cpp	/^BlastSearchDialog::BlastSearchDialog(QWidget *parent, QString autoQuery) :$/;"	f	class:BlastSearchDialog
BlastSearchDialog	ui/blastsearchdialog.h	/^class BlastSearchDialog : public QDialog$/;"	c
BlastUiState	program/globals.h	/^enum BlastUiState {BLAST_DB_NOT_YET_BUILT, BLAST_DB_BUILD_IN_PROGRESS,$/;"	g
BlockChain	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^struct PoolMemoryAllocator::BlockChain$/;"	s	class:ogdf::PoolMemoryAllocator	file:
BlockChainPtr	ogdf/internal/basic/PoolMemoryAllocator.h	/^	typedef BlockChain *BlockChainPtr;$/;"	t	class:ogdf::PoolMemoryAllocator
BottomCenter	ogdf/basic/GraphAttributes.h	/^		TopLeft = 0, TopCenter, TopRight, CenterLeft, Center, CenterRight, BottomLeft, BottomCenter, BottomRight$/;"	e	enum:ogdf::GraphAttributes::ImageAlignment
BottomLeft	ogdf/basic/GraphAttributes.h	/^		TopLeft = 0, TopCenter, TopRight, CenterLeft, Center, CenterRight, BottomLeft, BottomCenter, BottomRight$/;"	e	enum:ogdf::GraphAttributes::ImageAlignment
BottomRight	ogdf/basic/GraphAttributes.h	/^		TopLeft = 0, TopCenter, TopRight, CenterLeft, Center, CenterRight, BottomLeft, BottomCenter, BottomRight$/;"	e	enum:ogdf::GraphAttributes::ImageAlignment
BoundedStack	ogdf/basic/BoundedStack.h	/^	BoundedStack() {$/;"	f	class:ogdf::BoundedStack
BoundedStack	ogdf/basic/BoundedStack.h	/^	BoundedStack(const BoundedStack<E> &S) {$/;"	f	class:ogdf::BoundedStack
BoundedStack	ogdf/basic/BoundedStack.h	/^	explicit BoundedStack(INDEX n) {$/;"	f	class:ogdf::BoundedStack
BoundedStack	ogdf/basic/BoundedStack.h	/^template<class E, class INDEX = int> class BoundedStack {$/;"	c	namespace:ogdf
BrushPattern	ogdf/basic/GraphAttributes.h	/^	enum BrushPattern {$/;"	g	class:ogdf::GraphAttributes
BucketEdgeArray	ogdf/basic/EdgeArray.h	/^	BucketEdgeArray(const EdgeArray<int> &edgeArray) : m_pEdgeArray(&edgeArray) { }$/;"	f	class:ogdf::BucketEdgeArray
BucketEdgeArray	ogdf/basic/EdgeArray.h	/^class OGDF_EXPORT BucketEdgeArray : public BucketFunc<edge>$/;"	c	namespace:ogdf
BucketFunc	ogdf/basic/basic.h	/^template<class E> class BucketFunc$/;"	c	namespace:ogdf
BucketSourceIndex	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT BucketSourceIndex : public BucketFunc<edge> {$/;"	c	namespace:ogdf
BucketTargetIndex	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT BucketTargetIndex : public BucketFunc<edge> {$/;"	c	namespace:ogdf
BuildBlastDatabaseWorker	blast/buildblastdatabaseworker.cpp	/^BuildBlastDatabaseWorker::BuildBlastDatabaseWorker(QString makeblastdbCommand) :$/;"	f	class:BuildBlastDatabaseWorker
BuildBlastDatabaseWorker	blast/buildblastdatabaseworker.h	/^class BuildBlastDatabaseWorker : public QObject$/;"	c
CC	Makefile	/^CC            = \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/clang$/;"	m
CFLAGS	Makefile	/^CFLAGS        = -pipe -O2 $(EXPORT_ARCH_ARGS) -Wall -W -fPIC $(DEFINES)$/;"	m
CHANGENODEDEPTHDIALOG_H	ui/changenodedepthdialog.h	/^#define CHANGENODEDEPTHDIALOG_H$/;"	d
CHANGENODENAMEDIALOG_H	ui/changenodenamedialog.h	/^#define CHANGENODENAMEDIALOG_H$/;"	d
CHK_DIR_EXISTS	Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
COLOURBUTTON_H	ui/colourbutton.h	/^#define COLOURBUTTON_H$/;"	d
COMMANDCOMMANDLINEFUNCTIONS_H	command_line/commoncommandlinefunctions.h	/^#define COMMANDCOMMANDLINEFUNCTIONS_H$/;"	d
COMPRESS	Makefile	/^COMPRESS      = gzip -9f$/;"	m
CONTENTPOINTER	ogdf/basic/comparer.h	/^	typedef CONTENTTYPE* CONTENTPOINTER;$/;"	t	class:ogdf::TargetComparer
CONTIGUITY_COLOUR	program/globals.h	/^                       CONTIGUITY_COLOUR, CUSTOM_COLOURS};$/;"	e	enum:NodeColourScheme
CONTIGUOUS_EITHER_STRAND	program/globals.h	/^                       CONTIGUOUS_EITHER_STRAND, MAYBE_CONTIGUOUS,$/;"	e	enum:ContiguityStatus
CONTIGUOUS_STRAND_SPECIFIC	program/globals.h	/^enum ContiguityStatus {STARTING, CONTIGUOUS_STRAND_SPECIFIC,$/;"	e	enum:ContiguityStatus
COPY	Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	Makefile	/^COPY_DIR      = cp -f -R$/;"	m
COPY_FILE	Makefile	/^COPY_FILE     = cp -f$/;"	m
CPUFeature	ogdf/basic/System.h	/^enum CPUFeature {$/;"	g	namespace:ogdf
CPUFeatureMask	ogdf/basic/System.h	/^enum CPUFeatureMask {$/;"	g	namespace:ogdf
CUSTOM_COLOURS	program/globals.h	/^                       CONTIGUITY_COLOUR, CUSTOM_COLOURS};$/;"	e	enum:NodeColourScheme
CXX	Makefile	/^CXX           = \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/clang++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS      = -pipe -stdlib=libc++ -O2 -std=gnu++11 $(EXPORT_ARCH_ARGS)   -Wall -W -fPIC $(DEFINES)$/;"	m
Center	ogdf/basic/GraphAttributes.h	/^		TopLeft = 0, TopCenter, TopRight, CenterLeft, Center, CenterRight, BottomLeft, BottomCenter, BottomRight$/;"	e	enum:ogdf::GraphAttributes::ImageAlignment
CenterLeft	ogdf/basic/GraphAttributes.h	/^		TopLeft = 0, TopCenter, TopRight, CenterLeft, Center, CenterRight, BottomLeft, BottomCenter, BottomRight$/;"	e	enum:ogdf::GraphAttributes::ImageAlignment
CenterRight	ogdf/basic/GraphAttributes.h	/^		TopLeft = 0, TopCenter, TopRight, CenterLeft, Center, CenterRight, BottomLeft, BottomCenter, BottomRight$/;"	e	enum:ogdf::GraphAttributes::ImageAlignment
ChangeNodeDepthDialog	ui/changenodedepthdialog.cpp	/^ChangeNodeDepthDialog::ChangeNodeDepthDialog(QWidget * parent,$/;"	f	class:ChangeNodeDepthDialog
ChangeNodeDepthDialog	ui/changenodedepthdialog.h	/^class ChangeNodeDepthDialog : public QDialog$/;"	c
ChangeNodeNameDialog	ui/changenodenamedialog.cpp	/^ChangeNodeNameDialog::ChangeNodeNameDialog(QWidget * parent, QString oldName) :$/;"	f	class:ChangeNodeNameDialog
ChangeNodeNameDialog	ui/changenodenamedialog.h	/^class ChangeNodeNameDialog : public QDialog$/;"	c
ClusterArray	ogdf/cluster/ClusterArray.h	/^	ClusterArray() : Array<T>(), ClusterArrayBase() { }$/;"	f	class:ogdf::ClusterArray
ClusterArray	ogdf/cluster/ClusterArray.h	/^	ClusterArray(const ClusterArray<T> &A) :$/;"	f	class:ogdf::ClusterArray
ClusterArray	ogdf/cluster/ClusterArray.h	/^	ClusterArray(const ClusterGraph &C) :$/;"	f	class:ogdf::ClusterArray
ClusterArray	ogdf/cluster/ClusterArray.h	/^	ClusterArray(const ClusterGraph &C, const T &x) :$/;"	f	class:ogdf::ClusterArray
ClusterArray	ogdf/cluster/ClusterArray.h	/^	ClusterArray(const ClusterGraph &C, const T &x, int size) :$/;"	f	class:ogdf::ClusterArray
ClusterArray	ogdf/cluster/ClusterArray.h	/^template<class T> class ClusterArray : private Array<T>, protected ClusterArrayBase {$/;"	c	namespace:ogdf
ClusterArrayBase	ogdf/cluster/ClusterArray.h	/^	ClusterArrayBase() : m_pClusterGraph(0) { }$/;"	f	class:ogdf::ClusterArrayBase
ClusterArrayBase	ogdf/cluster/ClusterArray.h	/^	ClusterArrayBase(const ClusterGraph *pC) : m_pClusterGraph(pC) {$/;"	f	class:ogdf::ClusterArrayBase
ClusterArrayBase	ogdf/cluster/ClusterArray.h	/^class ClusterArrayBase {$/;"	c	namespace:ogdf
ClusterElement	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT ClusterElement;$/;"	m	namespace:ogdf	typeref:class:ogdf::OGDF_EXPORT
ClusterElement	ogdf/cluster/ClusterGraph.h	/^	ClusterElement(const ClusterGraph *pClusterGraph,int id):$/;"	f	class:ogdf::ClusterElement
ClusterElement	ogdf/cluster/ClusterGraph.h	/^	ClusterElement(int id):$/;"	f	class:ogdf::ClusterElement
ClusterElement	ogdf/cluster/ClusterGraph.h	/^class OGDF_EXPORT ClusterElement : private GraphElement {$/;"	c	namespace:ogdf
ClusterGraph	ogdf/cluster/ClusterGraph.cpp	/^ClusterGraph::ClusterGraph($/;"	f	class:ogdf::ClusterGraph
ClusterGraph	ogdf/cluster/ClusterGraph.cpp	/^ClusterGraph::ClusterGraph()$/;"	f	class:ogdf::ClusterGraph
ClusterGraph	ogdf/cluster/ClusterGraph.cpp	/^ClusterGraph::ClusterGraph(const ClusterGraph &C) :$/;"	f	class:ogdf::ClusterGraph
ClusterGraph	ogdf/cluster/ClusterGraph.cpp	/^ClusterGraph::ClusterGraph(const ClusterGraph &C,Graph &G) :$/;"	f	class:ogdf::ClusterGraph
ClusterGraph	ogdf/cluster/ClusterGraph.cpp	/^ClusterGraph::ClusterGraph(const Graph &G) : GraphObserver(&G), m_pGraph(&G)$/;"	f	class:ogdf::ClusterGraph
ClusterGraph	ogdf/cluster/ClusterGraph.h	/^class OGDF_EXPORT ClusterGraph : public GraphObserver$/;"	c	namespace:ogdf
ClusterGraph	ogdf/cluster/ClusterGraph.h	/^class OGDF_EXPORT ClusterGraph;$/;"	m	namespace:ogdf	typeref:class:ogdf::OGDF_EXPORT
ClusterGraphAttributes	ogdf/cluster/ClusterGraphAttributes.cpp	/^ClusterGraphAttributes::ClusterGraphAttributes($/;"	f	class:ogdf::ClusterGraphAttributes
ClusterGraphAttributes	ogdf/cluster/ClusterGraphAttributes.h	/^			ClusterGraphAttributes() : GraphAttributes(), m_pClusterGraph(0) { }$/;"	f	class:ogdf::ClusterGraphAttributes
ClusterGraphAttributes	ogdf/cluster/ClusterGraphAttributes.h	/^	class OGDF_EXPORT ClusterGraphAttributes : public GraphAttributes$/;"	c	namespace:ogdf
ClusterGraphObserver	ogdf/cluster/ClusterGraph.h	/^class OGDF_EXPORT ClusterGraphObserver;$/;"	m	namespace:ogdf	typeref:class:ogdf::OGDF_EXPORT
ClusterGraphObserver	ogdf/cluster/ClusterGraphObserver.h	/^	ClusterGraphObserver() : m_pClusterGraph(0) {}$/;"	f	class:ogdf::ClusterGraphObserver
ClusterGraphObserver	ogdf/cluster/ClusterGraphObserver.h	/^	ClusterGraphObserver(const ClusterGraph* CG) : m_pClusterGraph(CG)$/;"	f	class:ogdf::ClusterGraphObserver
ClusterGraphObserver	ogdf/cluster/ClusterGraphObserver.h	/^class OGDF_EXPORT ClusterGraphObserver {$/;"	c	namespace:ogdf
ClusterInfo	ogdf/cluster/ClusterGraphAttributes.h	/^			ClusterInfo()$/;"	f	class:ogdf::ClusterInfo
ClusterInfo	ogdf/cluster/ClusterGraphAttributes.h	/^	class OGDF_EXPORT ClusterInfo$/;"	c	namespace:ogdf
ColourButton	ui/colourbutton.cpp	/^ColourButton::ColourButton(QWidget * parent) :$/;"	f	class:ColourButton
ColourButton	ui/colourbutton.h	/^class ColourButton : public QPushButton$/;"	c
CombinatorialEmbedding	ogdf/basic/CombinatorialEmbedding.h	/^	CombinatorialEmbedding() : ConstCombinatorialEmbedding() {$/;"	f	class:ogdf::CombinatorialEmbedding
CombinatorialEmbedding	ogdf/basic/CombinatorialEmbedding.h	/^	CombinatorialEmbedding(const CombinatorialEmbedding &) : ConstCombinatorialEmbedding() { }$/;"	f	class:ogdf::CombinatorialEmbedding
CombinatorialEmbedding	ogdf/basic/CombinatorialEmbedding.h	/^	explicit CombinatorialEmbedding(Graph &G) : ConstCombinatorialEmbedding(G) {$/;"	f	class:ogdf::CombinatorialEmbedding
CombinatorialEmbedding	ogdf/basic/CombinatorialEmbedding.h	/^class OGDF_EXPORT CombinatorialEmbedding : public ConstCombinatorialEmbedding$/;"	c	namespace:ogdf
CommandLineCommand	program/globals.h	/^enum CommandLineCommand {NO_COMMAND, BANDAGE_LOAD, BANDAGE_INFO, BANDAGE_IMAGE,$/;"	g
ConstCombinatorialEmbedding	ogdf/basic/CombinatorialEmbedding.cpp	/^ConstCombinatorialEmbedding::ConstCombinatorialEmbedding($/;"	f	class:ogdf::ConstCombinatorialEmbedding
ConstCombinatorialEmbedding	ogdf/basic/CombinatorialEmbedding.cpp	/^ConstCombinatorialEmbedding::ConstCombinatorialEmbedding()$/;"	f	class:ogdf::ConstCombinatorialEmbedding
ConstCombinatorialEmbedding	ogdf/basic/CombinatorialEmbedding.cpp	/^ConstCombinatorialEmbedding::ConstCombinatorialEmbedding(const Graph &G) :$/;"	f	class:ogdf::ConstCombinatorialEmbedding
ConstCombinatorialEmbedding	ogdf/basic/CombinatorialEmbedding.h	/^class OGDF_EXPORT ConstCombinatorialEmbedding$/;"	c	namespace:ogdf
ConstCombinatorialEmbedding	ogdf/basic/CombinatorialEmbedding.h	/^class OGDF_EXPORT ConstCombinatorialEmbedding;$/;"	m	namespace:ogdf	typeref:class:ogdf::OGDF_EXPORT
Constraint	ogdf/basic/Constraints.h	/^	Constraint(const Graph &g) : m_pGraph(&g) { m_Status = 0; m_UserDisabled = false;  }$/;"	f	class:ogdf::Constraint
Constraint	ogdf/basic/Constraints.h	/^class Constraint$/;"	c	namespace:ogdf
ConstraintManager	ogdf/basic/Constraints.h	/^class ConstraintManager$/;"	c	namespace:ogdf
ContiguityStatus	program/globals.h	/^enum ContiguityStatus {STARTING, CONTIGUOUS_STRAND_SPECIFIC,$/;"	g
CreatorPredefKey	ogdf/fileformats/GmlParser.h	/^	enum PredefinedKey { idPredefKey = 0, labelPredefKey, CreatorPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
CreatorPredefKey	ogdf/fileformats/XmlParser.h	/^	enum PredefinedKey { idPredefKey = 0, labelPredefKey, CreatorPredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
CriticalSection	ogdf/basic/CriticalSection.h	/^	CriticalSection() {$/;"	f	class:ogdf::CriticalSection
CriticalSection	ogdf/basic/CriticalSection.h	/^	explicit CriticalSection(int spinCount) {$/;"	f	class:ogdf::CriticalSection
CriticalSection	ogdf/basic/CriticalSection.h	/^class OGDF_EXPORT CriticalSection$/;"	c	namespace:ogdf
D1	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	List <QuadTreeNodeNM*> D1,D2;      \/\/list of neighbouring(=D1) and not adjacent(=D2)$/;"	m	class:ogdf::QuadTreeNodeNM
D2	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	List <QuadTreeNodeNM*> D1,D2;      \/\/list of neighbouring(=D1) and not adjacent(=D2)$/;"	m	class:ogdf::QuadTreeNodeNM
DEBRUIJNEDGE_H	graph/debruijnedge.h	/^#define DEBRUIJNEDGE_H$/;"	d
DEBRUIJNNODE_H	graph/debruijnnode.h	/^#define DEBRUIJNNODE_H$/;"	d
DEFINES	Makefile	/^DEFINES       = -DQT_NO_DEBUG -DQT_SVG_LIB -DQT_WIDGETS_LIB -DQT_GUI_LIB -DQT_CORE_LIB$/;"	m
DEL_DIR	Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	Makefile	/^DEL_FILE      = rm -f$/;"	m
DEPTH_COLOUR	program/globals.h	/^enum NodeColourScheme {UNIFORM_COLOURS, RANDOM_COLOURS, DEPTH_COLOUR,$/;"	e	enum:NodeColourScheme
DEPTH_RANGE	program/globals.h	/^enum GraphScope {WHOLE_GRAPH, AROUND_NODE, AROUND_BLAST_HITS, DEPTH_RANGE};$/;"	e	enum:GraphScope
DESTDIR	Makefile	/^DESTDIR       = $/;"	m
DIST	Makefile	/^DIST          = \/usr\/local\/Cellar\/qt\/5.10.0_1\/mkspecs\/features\/spec_pre.prf \\$/;"	m
DISTDIR	Makefile	/^DISTDIR = \/Users\/derekguan\/Documents\/Work\/Sanger\/vgp\/src\/Bandage\/.tmp\/Bandage1.0.0$/;"	m
DISTNAME	Makefile	/^DISTNAME      = Bandage1.0.0$/;"	m
DIsEqual	ogdf/basic/geometry.h	/^	bool DIsEqual(const double &a, const double &b, const double eps = OGDF_GEOM_EPS)$/;"	f	namespace:ogdf
DIsGreater	ogdf/basic/geometry.h	/^	bool DIsGreater(const double &a, const double &b, const double eps = OGDF_GEOM_EPS)$/;"	f	namespace:ogdf
DIsGreaterEqual	ogdf/basic/geometry.h	/^	bool DIsGreaterEqual(const double &a, const double &b, const double eps = OGDF_GEOM_EPS)$/;"	f	namespace:ogdf
DIsLess	ogdf/basic/geometry.h	/^	bool DIsLess(const double &a, const double &b, const double eps = OGDF_GEOM_EPS)$/;"	f	namespace:ogdf
DIsLessEqual	ogdf/basic/geometry.h	/^	bool DIsLessEqual(const double &a, const double &b, const double eps = OGDF_GEOM_EPS)$/;"	f	namespace:ogdf
DLine	ogdf/basic/geometry.h	/^	DLine() : m_start(), m_end() {}$/;"	f	class:ogdf::DLine
DLine	ogdf/basic/geometry.h	/^	DLine(const DLine &dl) : m_start(dl.m_start), m_end(dl.m_end) {}$/;"	f	class:ogdf::DLine
DLine	ogdf/basic/geometry.h	/^	DLine(const DPoint &p1, const DPoint &p2) : m_start(p1), m_end(p2) {}$/;"	f	class:ogdf::DLine
DLine	ogdf/basic/geometry.h	/^	DLine(double x1, double y1, double x2, double y2) {$/;"	f	class:ogdf::DLine
DLine	ogdf/basic/geometry.h	/^class OGDF_EXPORT DLine {$/;"	c	namespace:ogdf
DPoint	ogdf/basic/geometry.h	/^	DPoint() : GenericPoint<double>(0,0) { }$/;"	f	class:ogdf::DPoint
DPoint	ogdf/basic/geometry.h	/^	DPoint(const DPoint &dp) : GenericPoint<double>(dp) { }$/;"	f	class:ogdf::DPoint
DPoint	ogdf/basic/geometry.h	/^	DPoint(double x, double y) : GenericPoint<double>(x,y) { }$/;"	f	class:ogdf::DPoint
DPoint	ogdf/basic/geometry.h	/^class OGDF_EXPORT DPoint : public GenericPoint<double>$/;"	c	namespace:ogdf
DPolygon	ogdf/basic/geometry.h	/^	DPolygon(bool cc = true) : m_counterclock(cc) { }$/;"	f	class:ogdf::DPolygon
DPolygon	ogdf/basic/geometry.h	/^	DPolygon(const DPolygon  &dop) : DPolyline(dop), m_counterclock(dop.m_counterclock) { }$/;"	f	class:ogdf::DPolygon
DPolygon	ogdf/basic/geometry.h	/^	DPolygon(const DRect &rect, bool cc = true) : m_counterclock(cc) {$/;"	f	class:ogdf::DPolygon
DPolygon	ogdf/basic/geometry.h	/^class OGDF_EXPORT DPolygon : public DPolyline {$/;"	c	namespace:ogdf
DPolyline	ogdf/basic/geometry.h	/^	DPolyline() { }$/;"	f	class:ogdf::DPolyline
DPolyline	ogdf/basic/geometry.h	/^	DPolyline(const DPolyline &dpl) : List<DPoint>(dpl) { }$/;"	f	class:ogdf::DPolyline
DPolyline	ogdf/basic/geometry.h	/^class OGDF_EXPORT DPolyline : public List<DPoint> {$/;"	c	namespace:ogdf
DRect	ogdf/basic/geometry.h	/^	DRect() : m_p1(), m_p2() {}$/;"	f	class:ogdf::DRect
DRect	ogdf/basic/geometry.h	/^	DRect(const DLine &dl) : m_p1(dl.start()), m_p2(dl.end())$/;"	f	class:ogdf::DRect
DRect	ogdf/basic/geometry.h	/^	DRect(const DPoint &p1, const DPoint &p2) : m_p1(p1), m_p2(p2)$/;"	f	class:ogdf::DRect
DRect	ogdf/basic/geometry.h	/^	DRect(const DRect &dr) : m_p1(dr.m_p1), m_p2(dr.m_p2)$/;"	f	class:ogdf::DRect
DRect	ogdf/basic/geometry.h	/^	DRect(double x1, double y1, double x2, double y2) {$/;"	f	class:ogdf::DRect
DRect	ogdf/basic/geometry.h	/^class OGDF_EXPORT DRect {$/;"	c	namespace:ogdf
DRound	ogdf/basic/geometry.h	/^	double DRound(const double &d, int prec = 0)$/;"	f	namespace:ogdf
DScaler	ogdf/basic/geometry.h	/^	DScaler(const DRect &from, const DRect &to) :$/;"	f	class:ogdf::DScaler
DScaler	ogdf/basic/geometry.h	/^class OGDF_EXPORT DScaler {$/;"	c	namespace:ogdf
DSegment	ogdf/basic/geometry.h	/^	DSegment() : DLine() {}$/;"	f	class:ogdf::DSegment
DSegment	ogdf/basic/geometry.h	/^	DSegment(const DLine &dl) : DLine(dl) {}$/;"	f	class:ogdf::DSegment
DSegment	ogdf/basic/geometry.h	/^	DSegment(const DPoint &p1, const DPoint &p2) : DLine(p1, p2) {}$/;"	f	class:ogdf::DSegment
DSegment	ogdf/basic/geometry.h	/^	DSegment(const DSegment &ds) : DLine(ds) {}$/;"	f	class:ogdf::DSegment
DSegment	ogdf/basic/geometry.h	/^	DSegment(double x1, double y1, double x2, double y2) : DLine(x1, y1, x2, y2) {}$/;"	f	class:ogdf::DSegment
DSegment	ogdf/basic/geometry.h	/^class OGDF_EXPORT DSegment : public DLine {$/;"	c	namespace:ogdf
DVector	ogdf/basic/geometry.h	/^	DVector() : DPoint() { }$/;"	f	class:ogdf::DVector
DVector	ogdf/basic/geometry.h	/^	DVector(const DVector &dv) : DPoint(dv) { }$/;"	f	class:ogdf::DVector
DVector	ogdf/basic/geometry.h	/^	DVector(double x, double y) : DPoint(x, y) { }$/;"	f	class:ogdf::DVector
DVector	ogdf/basic/geometry.h	/^class OGDF_EXPORT DVector : public DPoint {$/;"	c	namespace:ogdf
DeBruijnEdge	graph/debruijnedge.cpp	/^DeBruijnEdge::DeBruijnEdge(DeBruijnNode *startingNode, DeBruijnNode *endingNode) :$/;"	f	class:DeBruijnEdge
DeBruijnEdge	graph/debruijnedge.cpp	/^DeBruijnEdge::DeBruijnEdge(DeBruijnNode *startingNode, DeBruijnNode *endingNode, QString p) :$/;"	f	class:DeBruijnEdge
DeBruijnEdge	graph/debruijnedge.h	/^class DeBruijnEdge$/;"	c
DeBruijnNode	graph/debruijnnode.cpp	/^DeBruijnNode::DeBruijnNode(QString name, double depth, QByteArray sequence, int length) :$/;"	f	class:DeBruijnNode
DeBruijnNode	graph/debruijnnode.h	/^class DeBruijnNode$/;"	c
DebugLevel	ogdf/basic/basic.h	/^	enum DebugLevel {$/;"	g	namespace:ogdf
DefHashFunc	ogdf/basic/Hashing.h	/^template<> class DefHashFunc<double> {$/;"	c	namespace:ogdf
DefHashFunc	ogdf/basic/Hashing.h	/^template<> class DefHashFunc<void *> {$/;"	c	namespace:ogdf
DefHashFunc	ogdf/basic/Hashing.h	/^template<class K> class DefHashFunc {$/;"	c	namespace:ogdf
DefHashFunc	ogdf/basic/String.h	/^template<> class DefHashFunc<String> {$/;"	c	namespace:ogdf
DefHashFunc	ogdf/basic/geometry.h	/^template<> class DefHashFunc<IPoint>$/;"	c	namespace:ogdf
DiagonalCross	ogdf/basic/GraphAttributes.h	/^		DiagonalCross = 14$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
DinoLineBuffer	ogdf/fileformats/DinoLineBuffer.cpp	/^	DinoLineBuffer::DinoLineBuffer(const char *fileName) :$/;"	f	class:ogdf::DinoLineBuffer
DinoLineBuffer	ogdf/fileformats/DinoLineBuffer.h	/^	class OGDF_EXPORT DinoLineBuffer {$/;"	c	namespace:ogdf
DinoLineBufferPosition	ogdf/fileformats/DinoLineBuffer.cpp	/^	DinoLineBufferPosition::DinoLineBufferPosition($/;"	f	class:ogdf::DinoLineBufferPosition
DinoLineBufferPosition	ogdf/fileformats/DinoLineBuffer.cpp	/^	DinoLineBufferPosition::DinoLineBufferPosition(const DinoLineBufferPosition &position)$/;"	f	class:ogdf::DinoLineBufferPosition
DinoLineBufferPosition	ogdf/fileformats/DinoLineBuffer.h	/^		DinoLineBufferPosition() :$/;"	f	class:ogdf::DinoLineBufferPosition
DinoLineBufferPosition	ogdf/fileformats/DinoLineBuffer.h	/^	class OGDF_EXPORT DinoLineBufferPosition {$/;"	c	namespace:ogdf
DinoTools	ogdf/fileformats/DinoTools.h	/^	class OGDF_EXPORT DinoTools {$/;"	c	namespace:ogdf
DinoXmlParser	ogdf/fileformats/DinoXmlParser.cpp	/^	DinoXmlParser::DinoXmlParser(const char *fileName) :$/;"	f	class:ogdf::DinoXmlParser
DinoXmlParser	ogdf/fileformats/DinoXmlParser.h	/^	 class OGDF_EXPORT DinoXmlParser {$/;"	c	namespace:ogdf
DinoXmlScanner	ogdf/fileformats/DinoXmlScanner.cpp	/^	DinoXmlScanner::DinoXmlScanner(const char *fileName)$/;"	f	class:ogdf::DinoXmlScanner
DinoXmlScanner	ogdf/fileformats/DinoXmlScanner.h	/^	class OGDF_EXPORT DinoXmlScanner {$/;"	c	namespace:ogdf
Direction	ogdf/basic/basic.h	/^	enum Direction { before, after };$/;"	g	namespace:ogdf
DllMain	ogdf/basic/basic.cpp	/^BOOL APIENTRY DllMain(HANDLE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)$/;"	f
DynamicCastFailedException	ogdf/basic/exceptions.h	/^		DynamicCastFailedException(const char *file = NULL, int line = -1) : Exception(file, line) {}$/;"	f	class:ogdf::DynamicCastFailedException
DynamicCastFailedException	ogdf/basic/exceptions.h	/^	class OGDF_EXPORT DynamicCastFailedException : public Exception {$/;"	c	namespace:ogdf
EITHER_NUCLEOTIDE_OR_PROTEIN	program/globals.h	/^enum SequenceType {NUCLEOTIDE, PROTEIN, EITHER_NUCLEOTIDE_OR_PROTEIN};$/;"	e	enum:SequenceType
ENTERONEBLASTQUERYDIALOG_H	ui/enteroneblastquerydialog.h	/^#define ENTERONEBLASTQUERYDIALOG_H$/;"	d
EXACT_OVERLAP	program/globals.h	/^enum EdgeOverlapType {UNKNOWN_OVERLAP, EXACT_OVERLAP,$/;"	e	enum:EdgeOverlapType
EXPORT_ACTIVE_ARCHS	Makefile	/^EXPORT_ACTIVE_ARCHS = $(filter $(EXPORT_VALID_ARCHS), $(ARCHS))$/;"	m
EXPORT_ARCH_ARGS	Makefile	/^EXPORT_ARCH_ARGS = $(foreach arch, $(if $(EXPORT_ACTIVE_ARCHS), $(EXPORT_ACTIVE_ARCHS), $(EXPORT_VALID_ARCHS)), -arch $(arch))$/;"	m
EXPORT_VALID_ARCHS	Makefile	/^EXPORT_VALID_ARCHS = x86_64$/;"	m
Edge	ogdf/energybased/Edge.h	/^	Edge() {$/;"	f	class:ogdf::Edge
Edge	ogdf/energybased/Edge.h	/^class Edge$/;"	c	namespace:ogdf
EdgeArray	ogdf/basic/EdgeArray.h	/^	EdgeArray() : Array<T>(), EdgeArrayBase() { }$/;"	f	class:ogdf::EdgeArray
EdgeArray	ogdf/basic/EdgeArray.h	/^	EdgeArray(const EdgeArray<T> &A) : Array<T>(A), EdgeArrayBase(A.m_pGraph), m_x(A.m_x) { }$/;"	f	class:ogdf::EdgeArray
EdgeArray	ogdf/basic/EdgeArray.h	/^	EdgeArray(const Graph &G) : Array<T>(G.edgeArrayTableSize()), EdgeArrayBase(&G) { }$/;"	f	class:ogdf::EdgeArray
EdgeArray	ogdf/basic/EdgeArray.h	/^	EdgeArray(const Graph &G, const T &x) :$/;"	f	class:ogdf::EdgeArray
EdgeArray	ogdf/basic/EdgeArray.h	/^template<class T> class EdgeArray : private Array<T>, protected EdgeArrayBase {$/;"	c	namespace:ogdf
EdgeArrayBase	ogdf/basic/EdgeArray.h	/^	EdgeArrayBase() : m_pGraph(0) { }$/;"	f	class:ogdf::EdgeArrayBase
EdgeArrayBase	ogdf/basic/EdgeArray.h	/^	EdgeArrayBase(const Graph *pG) : m_pGraph(pG) {$/;"	f	class:ogdf::EdgeArrayBase
EdgeArrayBase	ogdf/basic/EdgeArray.h	/^class EdgeArrayBase {$/;"	c	namespace:ogdf
EdgeArrow	ogdf/basic/GraphAttributes.h	/^	enum EdgeArrow {$/;"	g	class:ogdf::GraphAttributes
EdgeAttributes	ogdf/internal/energybased/EdgeAttributes.cpp	/^EdgeAttributes::EdgeAttributes()$/;"	f	class:ogdf::EdgeAttributes
EdgeAttributes	ogdf/internal/energybased/EdgeAttributes.h	/^class OGDF_EXPORT EdgeAttributes$/;"	c	namespace:ogdf
EdgeElement	ogdf/basic/Graph_d.h	/^	EdgeElement(node src, node tgt, AdjElement *adjSrc, AdjElement *adjTgt, int id) :$/;"	f	class:ogdf::EdgeElement
EdgeElement	ogdf/basic/Graph_d.h	/^	EdgeElement(node src, node tgt, int id) :$/;"	f	class:ogdf::EdgeElement
EdgeElement	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT EdgeElement : private GraphElement {$/;"	c	namespace:ogdf
EdgeElement	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT EdgeElement;$/;"	m	namespace:ogdf	typeref:class:ogdf::OGDF_EXPORT
EdgeLengthMeasurement	ogdf/energybased/FMMMLayout.h	/^	enum EdgeLengthMeasurement {$/;"	g	class:ogdf::FMMMLayout
EdgeMaxBucketFunc	ogdf/energybased/Edge.h	/^	EdgeMaxBucketFunc() {};$/;"	f	class:ogdf::EdgeMaxBucketFunc
EdgeMaxBucketFunc	ogdf/energybased/Edge.h	/^class EdgeMaxBucketFunc : public BucketFunc<Edge>$/;"	c	namespace:ogdf
EdgeMinBucketFunc	ogdf/energybased/Edge.h	/^	EdgeMinBucketFunc() { }$/;"	f	class:ogdf::EdgeMinBucketFunc
EdgeMinBucketFunc	ogdf/energybased/Edge.h	/^class EdgeMinBucketFunc : public BucketFunc<Edge>$/;"	c	namespace:ogdf
EdgeOverlapType	program/globals.h	/^enum EdgeOverlapType {UNKNOWN_OVERLAP, EXACT_OVERLAP,$/;"	g
EdgeStyle	ogdf/basic/GraphAttributes.h	/^	enum EdgeStyle {$/;"	g	class:ogdf::GraphAttributes
EdgeType	ogdf/basic/Graph_d.h	/^	enum EdgeType {$/;"	g	class:ogdf::Graph
Element	ogdf/basic/Stack.h	/^		Element(const E &x, Element *pNext) : m_next(pNext), m_x(x) { }$/;"	f	struct:ogdf::StackPure::Element
Element	ogdf/basic/Stack.h	/^	struct Element {$/;"	s	class:ogdf::StackPure
EnterOneBlastQueryDialog	ui/enteroneblastquerydialog.cpp	/^EnterOneBlastQueryDialog::EnterOneBlastQueryDialog(QWidget *parent) :$/;"	f	class:EnterOneBlastQueryDialog
EnterOneBlastQueryDialog	ui/enteroneblastquerydialog.h	/^class EnterOneBlastQueryDialog : public QDialog$/;"	c
ExactMethod	ogdf/internal/energybased/NMM.h	/^	FruchtermanReingold ExactMethod; \/\/needed in case that using_NMM == false$/;"	m	class:ogdf::NMM
Exception	ogdf/basic/exceptions.h	/^		Exception(const char *file = NULL, int line = -1) :$/;"	f	class:ogdf::Exception
Exception	ogdf/basic/exceptions.h	/^	class OGDF_EXPORT Exception {$/;"	c	namespace:ogdf
FASTG	program/globals.h	/^enum GraphFileType {LAST_GRAPH, FASTG, GFA, TRINITY, ASQG, PLAIN_FASTA, ANY_FILE_TYPE,$/;"	e	enum:GraphFileType
FMMMLayout	ogdf/energybased/FMMMLayout.cpp	/^FMMMLayout::FMMMLayout()$/;"	f	class:ogdf::FMMMLayout
FMMMLayout	ogdf/energybased/FMMMLayout.h	/^class OGDF_EXPORT FMMMLayout : public LayoutModule$/;"	c	namespace:ogdf
FR	ogdf/energybased/FMMMLayout.h	/^	FruchtermanReingold FR; \/\/!< Class for repulsive force calculation (Fruchterman, Reingold).$/;"	m	class:ogdf::FMMMLayout
FaceArray	ogdf/basic/FaceArray.h	/^	FaceArray() : Array<T>(), FaceArrayBase() { }$/;"	f	class:ogdf::FaceArray
FaceArray	ogdf/basic/FaceArray.h	/^	FaceArray(const ConstCombinatorialEmbedding &E) :$/;"	f	class:ogdf::FaceArray
FaceArray	ogdf/basic/FaceArray.h	/^	FaceArray(const ConstCombinatorialEmbedding &E, const T &x) :$/;"	f	class:ogdf::FaceArray
FaceArray	ogdf/basic/FaceArray.h	/^	FaceArray(const FaceArray<T> &A) : Array<T>(A), FaceArrayBase(A.m_pEmbedding), m_x(A.m_x) { }$/;"	f	class:ogdf::FaceArray
FaceArray	ogdf/basic/FaceArray.h	/^template<class T> class FaceArray : private Array<T>, protected FaceArrayBase {$/;"	c	namespace:ogdf
FaceArrayBase	ogdf/basic/FaceArray.h	/^	FaceArrayBase() : m_pEmbedding(0) { }$/;"	f	class:ogdf::FaceArrayBase
FaceArrayBase	ogdf/basic/FaceArray.h	/^	FaceArrayBase(const ConstCombinatorialEmbedding *pE) : m_pEmbedding(pE) {$/;"	f	class:ogdf::FaceArrayBase
FaceArrayBase	ogdf/basic/FaceArray.h	/^class FaceArrayBase {$/;"	c	namespace:ogdf
FaceElement	ogdf/basic/CombinatorialEmbedding.h	/^	FaceElement(adjEntry adjFirst, int id) :$/;"	f	class:ogdf::FaceElement
FaceElement	ogdf/basic/CombinatorialEmbedding.h	/^	FaceElement(const ConstCombinatorialEmbedding *pEmbedding,$/;"	f	class:ogdf::FaceElement
FaceElement	ogdf/basic/CombinatorialEmbedding.h	/^class OGDF_EXPORT FaceElement : private GraphElement$/;"	c	namespace:ogdf
FaceElement	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT FaceElement;$/;"	m	namespace:ogdf	typeref:class:ogdf::OGDF_EXPORT
FaceSet	ogdf/basic/FaceSet.h	/^	FaceSet(const CombinatorialEmbedding &E) : m_it(E,ListIterator<face>()) { }$/;"	f	class:ogdf::FaceSet
FaceSet	ogdf/basic/FaceSet.h	/^class OGDF_EXPORT FaceSet {$/;"	c	namespace:ogdf
FaceSetPure	ogdf/basic/FaceSet.h	/^	FaceSetPure(const CombinatorialEmbedding &E) : m_it(E,ListIterator<face>()) { }$/;"	f	class:ogdf::FaceSetPure
FaceSetPure	ogdf/basic/FaceSet.h	/^class OGDF_EXPORT FaceSetPure {$/;"	c	namespace:ogdf
FaceSetSimple	ogdf/basic/FaceSet.h	/^	FaceSetSimple(const CombinatorialEmbedding &E) : m_isContained(E,false) { }$/;"	f	class:ogdf::FaceSetSimple
FaceSetSimple	ogdf/basic/FaceSet.h	/^class OGDF_EXPORT FaceSetSimple {$/;"	c	namespace:ogdf
FileType	ogdf/basic/basic.h	/^	enum FileType {$/;"	g	namespace:ogdf
FindFirstFile	ogdf/basic/basic.cpp	/^#define FindFirstFile /;"	d	file:
FindFirstFile	ogdf/basic/basic.cpp	/^#undef FindFirstFile$/;"	d	file:
FindNextFile	ogdf/basic/basic.cpp	/^#define FindNextFile /;"	d	file:
FindNextFile	ogdf/basic/basic.cpp	/^#undef FindNextFile$/;"	d	file:
FixScale	ogdf/basic/GraphAttributes.h	/^		FreeScale = 0, FixScale = 1$/;"	e	enum:ogdf::GraphAttributes::ImageStyle
FloatSetting	program/settings.h	/^    FloatSetting() {val = 0.0; min = 0.0; max = 0.0;}$/;"	f	class:FloatSetting
FloatSetting	program/settings.h	/^    FloatSetting(double v, double minimum, double maximum, bool isOn = true) {val = v; min = minimum; max = maximum; on = isOn;}$/;"	f	class:FloatSetting
FloatSetting	program/settings.h	/^class FloatSetting$/;"	c
ForceModel	ogdf/energybased/FMMMLayout.h	/^	enum ForceModel {$/;"	g	class:ogdf::FMMMLayout
ForwardDiagonal	ogdf/basic/GraphAttributes.h	/^		ForwardDiagonal = 13,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
FreeScale	ogdf/basic/GraphAttributes.h	/^		FreeScale = 0, FixScale = 1$/;"	e	enum:ogdf::GraphAttributes::ImageStyle
FruchtermanReingold	ogdf/internal/energybased/FruchtermanReingold.cpp	/^FruchtermanReingold::FruchtermanReingold()$/;"	f	class:ogdf::FruchtermanReingold
FruchtermanReingold	ogdf/internal/energybased/FruchtermanReingold.h	/^class OGDF_EXPORT FruchtermanReingold$/;"	c	namespace:ogdf
GESTURE	program/globals.h	/^enum ZoomSource {MOUSE_WHEEL, SPIN_BOX, KEYBOARD, GESTURE};$/;"	e	enum:ZoomSource
GFA	program/globals.h	/^enum GraphFileType {LAST_GRAPH, FASTG, GFA, TRINITY, ASQG, PLAIN_FASTA, ANY_FILE_TYPE,$/;"	e	enum:GraphFileType
GIT_PATH	build_scripts/bandage_build_windows.bat	/^set GIT_PATH=C:\\Program Files\\Git\\bin\\git$/;"	v
GIT_PATH	build_scripts/bandage_build_windows_32bit.bat	/^set GIT_PATH=C:\\Program Files\\Git\\bin\\git$/;"	v
GLOBALS_H	program/globals.h	/^#define GLOBALS_H$/;"	d
GRAPHICSITEMEDGE_H	graph/graphicsitemedge.h	/^#define GRAPHICSITEMEDGE_H$/;"	d
GRAPHICSITEMNODE_H	graph/graphicsitemnode.h	/^#define GRAPHICSITEMNODE_H$/;"	d
GRAPHICS_VIEW_ZOOM_H	ui/graphicsviewzoom.h	/^#define GRAPHICS_VIEW_ZOOM_H$/;"	d
GRAPHINFODIALOG_H	ui/graphinfodialog.h	/^#define GRAPHINFODIALOG_H$/;"	d
GRAPHLAYOUTWORKER_H	program/graphlayoutworker.h	/^#define GRAPHLAYOUTWORKER_H$/;"	d
GRAPHLOCATION_H	graph/graphlocation.h	/^#define GRAPHLOCATION_H$/;"	d
GRAPH_DRAWN	program/globals.h	/^enum UiState {NO_GRAPH_LOADED, GRAPH_LOADED, GRAPH_DRAWN};$/;"	e	enum:UiState
GRAPH_LOADED	program/globals.h	/^enum UiState {NO_GRAPH_LOADED, GRAPH_LOADED, GRAPH_DRAWN};$/;"	e	enum:UiState
GalaxyChoice	ogdf/energybased/FMMMLayout.h	/^	enum GalaxyChoice {$/;"	g	class:ogdf::FMMMLayout
GenericPoint	ogdf/basic/geometry.h	/^	GenericPoint() { }$/;"	f	class:ogdf::GenericPoint
GenericPoint	ogdf/basic/geometry.h	/^	GenericPoint(NUMBER x, NUMBER y) : m_x(x), m_y(y) { }$/;"	f	class:ogdf::GenericPoint
GenericPoint	ogdf/basic/geometry.h	/^	GenericPoint(const GenericPoint &ip) : m_x(ip.m_x), m_y(ip.m_y) { }$/;"	f	class:ogdf::GenericPoint
GenericPoint	ogdf/basic/geometry.h	/^class GenericPoint$/;"	c	namespace:ogdf
GetFileAttributes	ogdf/basic/basic.cpp	/^#define GetFileAttributes /;"	d	file:
GetFileAttributes	ogdf/basic/basic.cpp	/^#undef GetFileAttributes$/;"	d	file:
GmlKey	ogdf/fileformats/GmlParser.h	/^typedef HashElement<String,int> *GmlKey;$/;"	t	namespace:ogdf
GmlObject	ogdf/fileformats/GmlParser.h	/^	GmlObject(GmlKey key) : m_pBrother(0), m_key(key),$/;"	f	struct:ogdf::GmlObject
GmlObject	ogdf/fileformats/GmlParser.h	/^	GmlObject(GmlKey key, const char *stringValue) : m_pBrother(0), m_key(key),$/;"	f	struct:ogdf::GmlObject
GmlObject	ogdf/fileformats/GmlParser.h	/^	GmlObject(GmlKey key, double doubleValue) : m_pBrother(0), m_key(key),$/;"	f	struct:ogdf::GmlObject
GmlObject	ogdf/fileformats/GmlParser.h	/^	GmlObject(GmlKey key, int intValue) : m_pBrother(0), m_key(key),$/;"	f	struct:ogdf::GmlObject
GmlObject	ogdf/fileformats/GmlParser.h	/^struct OGDF_EXPORT GmlObject {$/;"	s	namespace:ogdf
GmlObjectType	ogdf/fileformats/GmlParser.h	/^enum GmlObjectType { gmlIntValue, gmlDoubleValue, gmlStringValue, gmlListBegin,$/;"	g	namespace:ogdf
GmlParser	ogdf/fileformats/GmlParser.cpp	/^GmlParser::GmlParser(const char *fileName, bool doCheck)$/;"	f	class:ogdf::GmlParser
GmlParser	ogdf/fileformats/GmlParser.cpp	/^GmlParser::GmlParser(istream &is, bool doCheck)$/;"	f	class:ogdf::GmlParser
GmlParser	ogdf/fileformats/GmlParser.h	/^class OGDF_EXPORT GmlParser {$/;"	c	namespace:ogdf
Graph	ogdf/basic/Graph.cpp	/^Graph::Graph()$/;"	f	class:ogdf::Graph
Graph	ogdf/basic/Graph.cpp	/^Graph::Graph(const Graph &G)$/;"	f	class:ogdf::Graph
Graph	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT Graph$/;"	c	namespace:ogdf
Graph	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT Graph;$/;"	m	namespace:ogdf	typeref:class:ogdf::OGDF_EXPORT
GraphAttributes	ogdf/basic/GraphAttributes.cpp	/^GraphAttributes::GraphAttributes() : m_pGraph(0), m_directed(true) { }$/;"	f	class:ogdf::GraphAttributes
GraphAttributes	ogdf/basic/GraphAttributes.cpp	/^GraphAttributes::GraphAttributes(const Graph &G, long initAttr) :$/;"	f	class:ogdf::GraphAttributes
GraphAttributes	ogdf/basic/GraphAttributes.h	/^class OGDF_EXPORT GraphAttributes {$/;"	c	namespace:ogdf
GraphConstraints	ogdf/basic/Constraints.h	/^	GraphConstraints(const Graph &g) : m_pGraph(&g), m_List() { }$/;"	f	class:ogdf::GraphConstraints
GraphConstraints	ogdf/basic/Constraints.h	/^class GraphConstraints \/\/: public GraphStructure$/;"	c	namespace:ogdf
GraphCopy	ogdf/basic/GraphCopy.cpp	/^GraphCopy::GraphCopy(const Graph &G) : m_pGraph(&G)$/;"	f	class:ogdf::GraphCopy
GraphCopy	ogdf/basic/GraphCopy.cpp	/^GraphCopy::GraphCopy(const GraphCopy &GC) : Graph()$/;"	f	class:ogdf::GraphCopy
GraphCopy	ogdf/basic/GraphCopy.h	/^	GraphCopy() : Graph() { }$/;"	f	class:ogdf::GraphCopy
GraphCopy	ogdf/basic/GraphCopy.h	/^class OGDF_EXPORT GraphCopy : public Graph {$/;"	c	namespace:ogdf
GraphCopySimple	ogdf/basic/GraphCopy.cpp	/^GraphCopySimple::GraphCopySimple(const Graph &G) : m_pGraph(&G)$/;"	f	class:ogdf::GraphCopySimple
GraphCopySimple	ogdf/basic/GraphCopy.cpp	/^GraphCopySimple::GraphCopySimple(const GraphCopySimple &GC) : Graph()$/;"	f	class:ogdf::GraphCopySimple
GraphCopySimple	ogdf/basic/GraphCopy.h	/^class OGDF_EXPORT GraphCopySimple : public Graph$/;"	c	namespace:ogdf
GraphElement	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT GraphElement {$/;"	c	namespace:ogdf
GraphFileType	program/globals.h	/^enum GraphFileType {LAST_GRAPH, FASTG, GFA, TRINITY, ASQG, PLAIN_FASTA, ANY_FILE_TYPE,$/;"	g
GraphInfoDialog	ui/graphinfodialog.cpp	/^GraphInfoDialog::GraphInfoDialog(QWidget *parent) :$/;"	f	class:GraphInfoDialog
GraphInfoDialog	ui/graphinfodialog.h	/^class GraphInfoDialog : public QDialog$/;"	c
GraphLayoutWorker	program/graphlayoutworker.cpp	/^GraphLayoutWorker::GraphLayoutWorker(ogdf::FMMMLayout * fmmm, ogdf::GraphAttributes * graphAttributes,$/;"	f	class:GraphLayoutWorker
GraphLayoutWorker	program/graphlayoutworker.h	/^class GraphLayoutWorker : public QObject$/;"	c
GraphList	ogdf/basic/Graph_d.h	/^	GraphList() { }$/;"	f	class:ogdf::GraphList
GraphList	ogdf/basic/Graph_d.h	/^template<class T> class GraphList : protected GraphListBase {$/;"	c	namespace:ogdf
GraphListBase	ogdf/basic/Graph_d.h	/^	GraphListBase() { m_head = m_tail = 0; }$/;"	f	class:ogdf::GraphListBase
GraphListBase	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT GraphListBase {$/;"	c	namespace:ogdf
GraphListBase	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT GraphListBase;$/;"	m	namespace:ogdf	typeref:class:ogdf::OGDF_EXPORT
GraphLocation	graph/graphlocation.cpp	/^GraphLocation::GraphLocation() :$/;"	f	class:GraphLocation
GraphLocation	graph/graphlocation.cpp	/^GraphLocation::GraphLocation(DeBruijnNode * node, int position) :$/;"	f	class:GraphLocation
GraphLocation	graph/graphlocation.h	/^class GraphLocation$/;"	c
GraphObserver	ogdf/basic/GraphObserver.h	/^	GraphObserver() : m_pGraph(0) { }$/;"	f	class:ogdf::GraphObserver
GraphObserver	ogdf/basic/GraphObserver.h	/^	GraphObserver(const Graph* G) : m_pGraph(G)$/;"	f	class:ogdf::GraphObserver
GraphObserver	ogdf/basic/GraphObserver.h	/^class OGDF_EXPORT GraphObserver {$/;"	c	namespace:ogdf
GraphObserver	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT GraphObserver;$/;"	m	namespace:ogdf	typeref:class:ogdf::OGDF_EXPORT
GraphScope	program/globals.h	/^enum GraphScope {WHOLE_GRAPH, AROUND_NODE, AROUND_BLAST_HITS, DEPTH_RANGE};$/;"	g
GraphType	ogdf/fileformats/Ogml.h	/^	enum GraphType$/;"	g	class:ogdf::Ogml
Graph_ptr	ogdf/energybased/Edge.h	/^	Graph* Graph_ptr;$/;"	m	class:ogdf::Edge
GraphicsItemEdge	graph/graphicsitemedge.cpp	/^GraphicsItemEdge::GraphicsItemEdge(DeBruijnEdge * deBruijnEdge, QGraphicsItem * parent) :$/;"	f	class:GraphicsItemEdge
GraphicsItemEdge	graph/graphicsitemedge.h	/^class GraphicsItemEdge : public QGraphicsPathItem$/;"	c
GraphicsItemNode	graph/graphicsitemnode.cpp	/^GraphicsItemNode::GraphicsItemNode(DeBruijnNode * deBruijnNode,$/;"	f	class:GraphicsItemNode
GraphicsItemNode	graph/graphicsitemnode.h	/^class GraphicsItemNode : public QGraphicsItem$/;"	c
GraphicsViewZoom	ui/graphicsviewzoom.cpp	/^GraphicsViewZoom::GraphicsViewZoom(MyGraphicsView * view) :$/;"	f	class:GraphicsViewZoom
GraphicsViewZoom	ui/graphicsviewzoom.h	/^class GraphicsViewZoom : public QObject$/;"	c
HashArray	ogdf/basic/HashArray.h	/^	HashArray() : Hashing<I,E,H>() { }$/;"	f	class:ogdf::HashArray
HashArray	ogdf/basic/HashArray.h	/^	HashArray(const E &defaultValue, const H &hashFunc = H())$/;"	f	class:ogdf::HashArray
HashArray	ogdf/basic/HashArray.h	/^	HashArray(const HashArray<I,E,H> &A) : Hashing<I,E,H>(A), m_defaultValue(A.m_defaultValue) { }$/;"	f	class:ogdf::HashArray
HashArray	ogdf/basic/HashArray.h	/^class HashArray : private Hashing<I,E,H>$/;"	c	namespace:ogdf
HashConstIterator	ogdf/basic/Hashing.h	/^	HashConstIterator() : m_pElement(0), m_pList(0), m_pHashing(0) { }$/;"	f	class:ogdf::HashConstIterator
HashConstIterator	ogdf/basic/Hashing.h	/^	HashConstIterator(HashElement<K,I> *pElement, HashElement<K,I> **pList,$/;"	f	class:ogdf::HashConstIterator
HashConstIterator	ogdf/basic/Hashing.h	/^	HashConstIterator(const HashConstIterator<K,I,H> &it) : m_pElement(it.m_pElement),$/;"	f	class:ogdf::HashConstIterator
HashConstIterator	ogdf/basic/Hashing.h	/^class HashConstIterator {$/;"	c	namespace:ogdf
HashElement	ogdf/basic/Hashing.h	/^	HashElement(size_t hashValue, const K &key, const I &info) :$/;"	f	class:ogdf::HashElement
HashElement	ogdf/basic/Hashing.h	/^class HashElement : public HashElementBase$/;"	c	namespace:ogdf
HashElementBase	ogdf/basic/Hashing.h	/^	HashElementBase(size_t hashValue) : m_hashValue(hashValue) { }$/;"	f	class:ogdf::HashElementBase
HashElementBase	ogdf/basic/Hashing.h	/^class HashElementBase {$/;"	c	namespace:ogdf
HashFuncTuple	ogdf/basic/tuples.h	/^	HashFuncTuple() { }$/;"	f	class:ogdf::HashFuncTuple
HashFuncTuple	ogdf/basic/tuples.h	/^	HashFuncTuple(const Hash1_ &hash1, const Hash2_ &hash2)$/;"	f	class:ogdf::HashFuncTuple
HashFuncTuple	ogdf/basic/tuples.h	/^class HashFuncTuple$/;"	c	namespace:ogdf
HashedString	ogdf/fileformats/DinoXmlParser.h	/^	typedef HashElement<String,int> HashedString;$/;"	t	namespace:ogdf
Hashing	ogdf/basic/Hashing.h	/^	Hashing(const Hashing<K,I> &h) : HashingBase(h) { }$/;"	f	class:ogdf::Hashing
Hashing	ogdf/basic/Hashing.h	/^	explicit Hashing(int minTableSize = 256, const H &hashFunc = H())$/;"	f	class:ogdf::Hashing
Hashing	ogdf/basic/Hashing.h	/^class Hashing : private HashingBase$/;"	c	namespace:ogdf
HashingBase	ogdf/basic/Hashing.cpp	/^HashingBase::HashingBase(const HashingBase &H)$/;"	f	class:ogdf::HashingBase
HashingBase	ogdf/basic/Hashing.cpp	/^HashingBase::HashingBase(int minTableSize)$/;"	f	class:ogdf::HashingBase
HashingBase	ogdf/basic/Hashing.h	/^class HashingBase {$/;"	c	namespace:ogdf
HelpRecord	ogdf/energybased/PQueue.h	/^	HelpRecord() { }  \/\/constructor$/;"	f	class:ogdf::HelpRecord
HelpRecord	ogdf/energybased/PQueue.h	/^class HelpRecord$/;"	c	namespace:ogdf
I	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	List <QuadTreeNodeNM*> I;          \/\/the list of min. ill sep. nodes in DIM2$/;"	m	class:ogdf::QuadTreeNodeNM
IMAGE_H	command_line/image.h	/^#define IMAGE_H$/;"	d
INCPATH	Makefile	/^INCPATH       = -I. -Iui -I\/usr\/include -I\/usr\/local\/Cellar\/qt\/5.10.0_1\/lib\/QtSvg.framework\/Headers -I\/usr\/local\/Cellar\/qt\/5.10.0_1\/lib\/QtWidgets.framework\/Headers -I\/usr\/local\/Cellar\/qt\/5.10.0_1\/lib\/QtGui.framework\/Headers -I\/usr\/local\/Cellar\/qt\/5.10.0_1\/lib\/QtCore.framework\/Headers -I. -I\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.13.sdk\/System\/Library\/Frameworks\/OpenGL.framework\/Headers -I\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/MacOSX.platform\/Developer\/SDKs\/MacOSX10.13.sdk\/System\/Library\/Frameworks\/AGL.framework\/Headers -I. -I\/usr\/local\/Cellar\/qt\/5.10.0_1\/mkspecs\/macx-clang -F\/usr\/local\/Cellar\/qt\/5.10.0_1\/lib$/;"	m
INFOTEXTWIDGET_H	ui/infotextwidget.h	/^#define INFOTEXTWIDGET_H$/;"	d
INFO_H	command_line/info.h	/^#define INFO_H$/;"	d
INSTALL_DIR	Makefile	/^INSTALL_DIR   = cp -f -R$/;"	m
INSTALL_FILE	Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
IPoint	ogdf/basic/geometry.h	/^	IPoint() : GenericPoint<int>(0,0) { }$/;"	f	class:ogdf::IPoint
IPoint	ogdf/basic/geometry.h	/^	IPoint(const IPoint &ip) : GenericPoint<int>(ip) { }$/;"	f	class:ogdf::IPoint
IPoint	ogdf/basic/geometry.h	/^	IPoint(int x, int y) : GenericPoint<int>(x,y) { }$/;"	f	class:ogdf::IPoint
IPoint	ogdf/basic/geometry.h	/^class OGDF_EXPORT IPoint : public GenericPoint<int>$/;"	c	namespace:ogdf
IPolyline	ogdf/basic/geometry.h	/^	IPolyline() { }$/;"	f	class:ogdf::IPolyline
IPolyline	ogdf/basic/geometry.h	/^	IPolyline(const IPolyline &ipl) : List<IPoint>(ipl) { }$/;"	f	class:ogdf::IPolyline
IPolyline	ogdf/basic/geometry.h	/^class OGDF_EXPORT IPolyline : public List<IPoint> {$/;"	c	namespace:ogdf
ImageAlignment	ogdf/basic/GraphAttributes.h	/^	enum ImageAlignment {$/;"	g	class:ogdf::GraphAttributes
ImageStyle	ogdf/basic/GraphAttributes.h	/^	enum ImageStyle {$/;"	g	class:ogdf::GraphAttributes
InfoTextWidget	ui/infotextwidget.cpp	/^InfoTextWidget::InfoTextWidget(QWidget * parent) :$/;"	f	class:InfoTextWidget
InfoTextWidget	ui/infotextwidget.cpp	/^InfoTextWidget::InfoTextWidget(QWidget * parent, QString infoText) :$/;"	f	class:InfoTextWidget
InfoTextWidget	ui/infotextwidget.h	/^class InfoTextWidget : public QWidget$/;"	c
InitialPlacementForces	ogdf/energybased/FMMMLayout.h	/^	enum InitialPlacementForces {$/;"	g	class:ogdf::FMMMLayout
InitialPlacementMult	ogdf/energybased/FMMMLayout.h	/^	enum InitialPlacementMult {$/;"	g	class:ogdf::FMMMLayout
Initialization	ogdf/basic/basic.cpp	/^Initialization::Initialization()$/;"	f	class:ogdf::Initialization
Initialization	ogdf/basic/basic.h	/^class Initialization {$/;"	c	namespace:ogdf
InsufficientMemoryException	ogdf/basic/exceptions.h	/^		InsufficientMemoryException(const char *file = NULL, int line = -1) : Exception(file, line) {}$/;"	f	class:ogdf::InsufficientMemoryException
InsufficientMemoryException	ogdf/basic/exceptions.h	/^	class OGDF_EXPORT InsufficientMemoryException : public Exception {$/;"	c	namespace:ogdf
IntSetting	program/settings.h	/^    IntSetting() {val = 0; min = 0; max = 0;}$/;"	f	class:IntSetting
IntSetting	program/settings.h	/^    IntSetting(int v, int minimum, int maximum, bool isOn = true) {val = v; min = minimum; max = maximum; on = isOn;}$/;"	f	class:IntSetting
IntSetting	program/settings.h	/^class IntSetting$/;"	c
KEYBOARD	program/globals.h	/^enum ZoomSource {MOUSE_WHEEL, SPIN_BOX, KEYBOARD, GESTURE};$/;"	e	enum:ZoomSource
LAST_GRAPH	program/globals.h	/^enum GraphFileType {LAST_GRAPH, FASTG, GFA, TRINITY, ASQG, PLAIN_FASTA, ANY_FILE_TYPE,$/;"	e	enum:GraphFileType
LE	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	complex<double>* LE;               \/\/Locale Expansion terms$/;"	m	class:ogdf::QuadTreeNodeNM
LFLAGS	Makefile	/^LFLAGS        = -stdlib=libc++ -headerpad_max_install_names $(EXPORT_ARCH_ARGS) -Wl, -Wl,-rpath,@executable_path\/Frameworks$/;"	m
LIBS	Makefile	/^LIBS          = $(SUBLIBS) -F\/usr\/local\/Cellar\/qt\/5.10.0_1\/lib -L\/usr\/lib -framework QtSvg -framework QtWidgets -framework QtGui -framework QtCore -framework DiskArbitration -framework IOKit -framework OpenGL -framework AGL $/;"	m
LINK	Makefile	/^LINK          = \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/clang++$/;"	m
LOAD_H	command_line/load.h	/^#define LOAD_H$/;"	d
L_x_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	List<ParticleInfo>* L_x_ptr;       \/\/points to the lists that contain each Particle$/;"	m	class:ogdf::QuadTreeNodeNM
L_y_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	List<ParticleInfo>* L_y_ptr;       \/\/and a cross reference to the list_item in the$/;"	m	class:ogdf::QuadTreeNodeNM
LayoutModule	ogdf/module/LayoutModule.h	/^	LayoutModule() { }$/;"	f	class:ogdf::LayoutModule
LayoutModule	ogdf/module/LayoutModule.h	/^class OGDF_EXPORT LayoutModule {$/;"	c	namespace:ogdf
LibraryNotSupportedCode	ogdf/basic/exceptions.h	/^	enum LibraryNotSupportedCode {$/;"	g	namespace:ogdf
LibraryNotSupportedException	ogdf/basic/exceptions.h	/^			LibraryNotSupportedException($/;"	f	class:ogdf::LibraryNotSupportedException
LibraryNotSupportedException	ogdf/basic/exceptions.h	/^			LibraryNotSupportedException(LibraryNotSupportedCode code,$/;"	f	class:ogdf::LibraryNotSupportedException
LibraryNotSupportedException	ogdf/basic/exceptions.h	/^	class OGDF_EXPORT LibraryNotSupportedException : public Exception {$/;"	c	namespace:ogdf
LinePredefKey	ogdf/fileformats/GmlParser.h	/^		sourcePredefKey, targetPredefKey, arrowPredefKey, LinePredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
LinePredefKey	ogdf/fileformats/XmlParser.h	/^		sourcePredefKey, targetPredefKey, sensePredefKey, arrowPredefKey, LinePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
List	ogdf/basic/List.h	/^	List() : m_count(0) { }$/;"	f	class:ogdf::List
List	ogdf/basic/List.h	/^	List(const List<E> &L) : ListPure<E>(L), m_count(L.m_count) { }$/;"	f	class:ogdf::List
List	ogdf/basic/List.h	/^class List : private ListPure<E> {$/;"	c	namespace:ogdf
ListConstIterator	ogdf/basic/List.h	/^	ListConstIterator() : m_pX(0) { }$/;"	f	class:ogdf::ListConstIterator
ListConstIterator	ogdf/basic/List.h	/^	ListConstIterator(const ListConstIterator &it) : m_pX(it.m_pX) { }$/;"	f	class:ogdf::ListConstIterator
ListConstIterator	ogdf/basic/List.h	/^	ListConstIterator(const ListElement<E> *pX) : m_pX(pX) { }$/;"	f	class:ogdf::ListConstIterator
ListConstIterator	ogdf/basic/List.h	/^	ListConstIterator(const ListIterator<E> &it) : m_pX((const ListElement<E> *)it) { }$/;"	f	class:ogdf::ListConstIterator
ListConstIterator	ogdf/basic/List.h	/^template<class E> class ListConstIterator {$/;"	c	namespace:ogdf
ListElement	ogdf/basic/List.h	/^	ListElement() : m_next(0), m_prev(0) { }$/;"	f	class:ogdf::ListElement
ListElement	ogdf/basic/List.h	/^	ListElement(const E &x) : m_next(0), m_prev(0), m_x(x) { }$/;"	f	class:ogdf::ListElement
ListElement	ogdf/basic/List.h	/^	ListElement(const E &x, ListElement<E> *next, ListElement<E> *prev) :$/;"	f	class:ogdf::ListElement
ListElement	ogdf/basic/List.h	/^class ListElement {$/;"	c	namespace:ogdf
ListIterator	ogdf/basic/List.h	/^	ListIterator() : m_pX(0) { }$/;"	f	class:ogdf::ListIterator
ListIterator	ogdf/basic/List.h	/^	ListIterator(ListElement<E> *pX) : m_pX(pX) { }$/;"	f	class:ogdf::ListIterator
ListIterator	ogdf/basic/List.h	/^	ListIterator(const ListIterator<E> &it) : m_pX(it.m_pX) { }$/;"	f	class:ogdf::ListIterator
ListIterator	ogdf/basic/List.h	/^template<class E> class ListIterator {$/;"	c	namespace:ogdf
ListPure	ogdf/basic/List.h	/^	ListPure() : m_head(0), m_tail(0) { }$/;"	f	class:ogdf::ListPure
ListPure	ogdf/basic/List.h	/^	ListPure(const ListPure<E> &L) : m_head(0), m_tail(0) {$/;"	f	class:ogdf::ListPure
ListPure	ogdf/basic/List.h	/^template<class E> class ListPure {$/;"	c	namespace:ogdf
M	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	List<QuadTreeNodeNM*>  M;          \/\/list of nodes with multipole force contribution$/;"	m	class:ogdf::QuadTreeNodeNM
MAARPacking	ogdf/energybased/MAARPacking.cpp	/^MAARPacking::MAARPacking()$/;"	f	class:ogdf::MAARPacking
MAARPacking	ogdf/energybased/MAARPacking.h	/^	class MAARPacking$/;"	c	namespace:ogdf
MAINWINDOW_H	ui/mainwindow.h	/^#define MAINWINDOW_H$/;"	d
MAKEFILE	Makefile	/^MAKEFILE      = Makefile$/;"	m
MANUAL_NODE_LENGTH	program/globals.h	/^enum NodeLengthMode {AUTO_NODE_LENGTH, MANUAL_NODE_LENGTH};$/;"	e	enum:NodeLengthMode
MAX_TAG_COUNT	ogdf/fileformats/Ogml.h	/^	static const int MAX_TAG_COUNT = 4000;$/;"	m	class:ogdf::Ogml
MAYBE_CONTIGUOUS	program/globals.h	/^                       CONTIGUOUS_EITHER_STRAND, MAYBE_CONTIGUOUS,$/;"	e	enum:ContiguityStatus
ME	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	complex<double>* ME;               \/\/Multipole Expansion terms$/;"	m	class:ogdf::QuadTreeNodeNM
MEMORY_H	program/memory.h	/^#define MEMORY_H$/;"	d
MIN_BOX_LENGTH	ogdf/internal/energybased/NMM.cpp	/^#define MIN_BOX_LENGTH /;"	d	file:
MIN_CLUSTER_TABLE_SIZE	ogdf/cluster/ClusterGraph.cpp	/^#define MIN_CLUSTER_TABLE_SIZE /;"	d	file:
MIN_EDGE_TABLE_SIZE	ogdf/basic/Graph.cpp	/^#define MIN_EDGE_TABLE_SIZE /;"	d	file:
MIN_FACE_TABLE_SIZE	ogdf/basic/CombinatorialEmbedding.cpp	/^#define MIN_FACE_TABLE_SIZE /;"	d	file:
MIN_NODE_NUMBER	ogdf/internal/energybased/NMM.h	/^	int MIN_NODE_NUMBER; \/\/The minimum number of nodes for which the forces are$/;"	m	class:ogdf::NMM
MIN_NODE_TABLE_SIZE	ogdf/basic/Graph.cpp	/^#define MIN_NODE_TABLE_SIZE /;"	d	file:
MKDIR	Makefile	/^MKDIR         = mkdir -p$/;"	m
MOUSE_WHEEL	program/globals.h	/^enum ZoomSource {MOUSE_WHEEL, SPIN_BOX, KEYBOARD, GESTURE};$/;"	e	enum:ZoomSource
MOVE	Makefile	/^MOVE          = mv -f$/;"	m
MSVC_PATH	build_scripts/bandage_build_windows.bat	/^set MSVC_PATH=C:\\Program Files (x86)\\Microsoft Visual Studio 14.0$/;"	v
MSVC_PATH	build_scripts/bandage_build_windows_32bit.bat	/^set MSVC_PATH=C:\\Program Files\\Microsoft Visual Studio 14.0$/;"	v
MSVC_VERSION	build_scripts/bandage_build_windows.bat	/^set MSVC_VERSION=msvc2015_64$/;"	v
MSVC_VERSION	build_scripts/bandage_build_windows_32bit.bat	/^set MSVC_VERSION=msvc2015$/;"	v
MSVC_VERSION_NUM	build_scripts/bandage_build_windows.bat	/^set MSVC_VERSION_NUM=140$/;"	v
MSVC_VERSION_NUM	build_scripts/bandage_build_windows_32bit.bat	/^set MSVC_VERSION_NUM=140$/;"	v
MYGRAPHICSSCENE_H	ui/mygraphicsscene.h	/^#define MYGRAPHICSSCENE_H$/;"	d
MYGRAPHICSVIEW_H	ui/mygraphicsview.h	/^#define MYGRAPHICSVIEW_H$/;"	d
MYPROGRESSDIALOG_H	ui/myprogressdialog.h	/^#define MYPROGRESSDIALOG_H$/;"	d
MYTABLEWIDGET_H	ui/mytablewidget.h	/^#define MYTABLEWIDGET_H$/;"	d
MainWindow	ui/mainwindow.cpp	/^MainWindow::MainWindow(QString fileToLoadOnStartup, bool drawGraphAfterLoad) :$/;"	f	class:MainWindow
MainWindow	ui/mainwindow.h	/^class MainWindow : public QMainWindow$/;"	c
MallocMemoryAllocator	ogdf/internal/basic/MallocMemoryAllocator.h	/^	MallocMemoryAllocator() { }$/;"	f	class:ogdf::MallocMemoryAllocator
MallocMemoryAllocator	ogdf/internal/basic/MallocMemoryAllocator.h	/^class OGDF_EXPORT MallocMemoryAllocator$/;"	c	namespace:ogdf
Math	ogdf/basic/Math.h	/^class OGDF_EXPORT Math {$/;"	c	namespace:ogdf
MaxIterChange	ogdf/energybased/FMMMLayout.h	/^	enum MaxIterChange {$/;"	g	class:ogdf::FMMMLayout
MemElem	ogdf/internal/basic/MallocMemoryAllocator.h	/^	struct MemElem { MemElem *m_next; };$/;"	s	class:ogdf::MallocMemoryAllocator
MemElem	ogdf/internal/basic/PoolMemoryAllocator.h	/^	struct MemElem {$/;"	s	class:ogdf::PoolMemoryAllocator
MemElemEx	ogdf/internal/basic/PoolMemoryAllocator.h	/^	struct MemElemEx {$/;"	s	class:ogdf::PoolMemoryAllocator
MemElemExPtr	ogdf/internal/basic/PoolMemoryAllocator.h	/^	typedef MemElemEx *MemElemExPtr;$/;"	t	class:ogdf::PoolMemoryAllocator
MemElemPtr	ogdf/internal/basic/MallocMemoryAllocator.h	/^	typedef MemElem *MemElemPtr;$/;"	t	class:ogdf::MallocMemoryAllocator
MemElemPtr	ogdf/internal/basic/PoolMemoryAllocator.h	/^	typedef MemElem   *MemElemPtr;$/;"	t	class:ogdf::PoolMemoryAllocator
Memory	program/memory.cpp	/^Memory::Memory()$/;"	f	class:Memory
Memory	program/memory.h	/^class Memory$/;"	c
Multilevel	ogdf/energybased/Multilevel.h	/^	Multilevel() { }     \/\/constructor$/;"	f	class:ogdf::Multilevel
Multilevel	ogdf/energybased/Multilevel.h	/^class Multilevel$/;"	c	namespace:ogdf
MultilevelGraph	ogdf/internal/energybased/MultilevelGraph.cpp	/^MultilevelGraph::MultilevelGraph()$/;"	f	class:ogdf::MultilevelGraph
MultilevelGraph	ogdf/internal/energybased/MultilevelGraph.cpp	/^MultilevelGraph::MultilevelGraph(Graph &G)$/;"	f	class:ogdf::MultilevelGraph
MultilevelGraph	ogdf/internal/energybased/MultilevelGraph.cpp	/^MultilevelGraph::MultilevelGraph(GraphAttributes &GA)$/;"	f	class:ogdf::MultilevelGraph
MultilevelGraph	ogdf/internal/energybased/MultilevelGraph.cpp	/^MultilevelGraph::MultilevelGraph(GraphAttributes &GA, Graph &G)$/;"	f	class:ogdf::MultilevelGraph
MultilevelGraph	ogdf/internal/energybased/MultilevelGraph.cpp	/^MultilevelGraph::MultilevelGraph(const String &filename)$/;"	f	class:ogdf::MultilevelGraph
MultilevelGraph	ogdf/internal/energybased/MultilevelGraph.cpp	/^MultilevelGraph::MultilevelGraph(istream &is)$/;"	f	class:ogdf::MultilevelGraph
MultilevelGraph	ogdf/internal/energybased/MultilevelGraph.h	/^class OGDF_EXPORT MultilevelGraph$/;"	c	namespace:ogdf
MyGraphicsScene	ui/mygraphicsscene.cpp	/^MyGraphicsScene::MyGraphicsScene(QObject *parent) :$/;"	f	class:MyGraphicsScene
MyGraphicsScene	ui/mygraphicsscene.h	/^class MyGraphicsScene : public QGraphicsScene$/;"	c
MyGraphicsView	ui/mygraphicsview.cpp	/^MyGraphicsView::MyGraphicsView(QObject * \/*parent*\/) :$/;"	f	class:MyGraphicsView
MyGraphicsView	ui/mygraphicsview.h	/^class MyGraphicsView : public QGraphicsView$/;"	c
MyProgressDialog	ui/myprogressdialog.cpp	/^MyProgressDialog::MyProgressDialog(QWidget * parent, QString message, bool showCancelButton,$/;"	f	class:MyProgressDialog
MyProgressDialog	ui/myprogressdialog.h	/^class MyProgressDialog : public QDialog$/;"	c
MyTableWidget	ui/mytablewidget.cpp	/^MyTableWidget::MyTableWidget(QWidget * parent) :$/;"	f	class:MyTableWidget
MyTableWidget	ui/mytablewidget.h	/^class MyTableWidget : public QTableWidget$/;"	c
NEARBY_PIECES	program/globals.h	/^enum NodeDragging {ONE_PIECE, NEARBY_PIECES, ALL_PIECES, NO_DRAGGING};$/;"	e	enum:NodeDragging
NEXTPREDEFKEY	ogdf/fileformats/GmlParser.h	/^		edgeWeightPredefKey, NEXTPREDEFKEY };$/;"	e	enum:ogdf::GmlParser::PredefinedKey
NEXTPREDEFKEY	ogdf/fileformats/XmlParser.h	/^		pointPredefKey, NEXTPREDEFKEY };$/;"	e	enum:ogdf::XmlParser::PredefinedKey
NM	ogdf/energybased/FMMMLayout.h	/^	NMM NM; \/\/!< Class for repulsive force calculation.$/;"	m	class:ogdf::FMMMLayout
NMM	ogdf/internal/energybased/NMM.cpp	/^NMM::NMM()$/;"	f	class:ogdf::NMM
NMM	ogdf/internal/energybased/NMM.h	/^class OGDF_EXPORT NMM$/;"	c	namespace:ogdf
NODEWIDTHVISUALAID_H	ui/nodewidthvisualaid.h	/^#define NODEWIDTHVISUALAID_H$/;"	d
NODE_NAME_CONTAINS_COMMA	program/globals.h	/^                     NODE_NAME_CONTAINS_NEWLINE, NODE_NAME_CONTAINS_COMMA,$/;"	e	enum:NodeNameStatus
NODE_NAME_CONTAINS_NEWLINE	program/globals.h	/^                     NODE_NAME_CONTAINS_NEWLINE, NODE_NAME_CONTAINS_COMMA,$/;"	e	enum:NodeNameStatus
NODE_NAME_CONTAINS_SPACE	program/globals.h	/^                     NODE_NAME_CONTAINS_SPACE};$/;"	e	enum:NodeNameStatus
NODE_NAME_CONTAINS_TAB	program/globals.h	/^enum NodeNameStatus {NODE_NAME_OKAY, NODE_NAME_TAKEN, NODE_NAME_CONTAINS_TAB,$/;"	e	enum:NodeNameStatus
NODE_NAME_OKAY	program/globals.h	/^enum NodeNameStatus {NODE_NAME_OKAY, NODE_NAME_TAKEN, NODE_NAME_CONTAINS_TAB,$/;"	e	enum:NodeNameStatus
NODE_NAME_TAKEN	program/globals.h	/^enum NodeNameStatus {NODE_NAME_OKAY, NODE_NAME_TAKEN, NODE_NAME_CONTAINS_TAB,$/;"	e	enum:NodeNameStatus
NOMINMAX	ogdf/basic/basic.h	/^#define NOMINMAX$/;"	d
NOMINMAX	ogdf/basic/basic.h	/^#undef NOMINMAX$/;"	d
NOT_CONTIGUOUS	program/globals.h	/^                       NOT_CONTIGUOUS};$/;"	e	enum:ContiguityStatus
NOT_READY	program/globals.h	/^enum SequencesLoadedFromFasta {NOT_READY, NOT_TRIED, TRIED};$/;"	e	enum:SequencesLoadedFromFasta
NOT_TRIED	program/globals.h	/^enum SequencesLoadedFromFasta {NOT_READY, NOT_TRIED, TRIED};$/;"	e	enum:SequencesLoadedFromFasta
NO_COMMAND	program/globals.h	/^enum CommandLineCommand {NO_COMMAND, BANDAGE_LOAD, BANDAGE_INFO, BANDAGE_IMAGE,$/;"	e	enum:CommandLineCommand
NO_DRAGGING	program/globals.h	/^enum NodeDragging {ONE_PIECE, NEARBY_PIECES, ALL_PIECES, NO_DRAGGING};$/;"	e	enum:NodeDragging
NO_GRAPH_LOADED	program/globals.h	/^enum UiState {NO_GRAPH_LOADED, GRAPH_LOADED, GRAPH_DRAWN};$/;"	e	enum:UiState
NUCLEOTIDE	program/globals.h	/^enum SequenceType {NUCLEOTIDE, PROTEIN, EITHER_NUCLEOTIDE_OR_PROTEIN};$/;"	e	enum:SequenceType
NoStdComparerException	ogdf/basic/exceptions.h	/^		NoStdComparerException(const char *file = NULL, int line = -1) : Exception(file, line) {}$/;"	f	class:ogdf::NoStdComparerException
NoStdComparerException	ogdf/basic/exceptions.h	/^	class OGDF_EXPORT NoStdComparerException : public Exception {$/;"	c	namespace:ogdf
Node	ogdf/energybased/Node.h	/^		Node() { vertex = NULL; value = 0; }        \/\/constructor$/;"	f	class:ogdf::Node
Node	ogdf/energybased/Node.h	/^	class Node$/;"	c	namespace:ogdf
NodeArray	ogdf/basic/NodeArray.h	/^	NodeArray() : Array<T>(), NodeArrayBase() { }$/;"	f	class:ogdf::NodeArray
NodeArray	ogdf/basic/NodeArray.h	/^	NodeArray(const Graph &G) : Array<T>(G.nodeArrayTableSize()), NodeArrayBase(&G) { }$/;"	f	class:ogdf::NodeArray
NodeArray	ogdf/basic/NodeArray.h	/^	NodeArray(const Graph &G, const T &x) :$/;"	f	class:ogdf::NodeArray
NodeArray	ogdf/basic/NodeArray.h	/^	NodeArray(const NodeArray<T> &A) : Array<T>(A), NodeArrayBase(A.m_pGraph), m_x(A.m_x) { }$/;"	f	class:ogdf::NodeArray
NodeArray	ogdf/basic/NodeArray.h	/^template<class T> class NodeArray : private Array<T>, protected NodeArrayBase {$/;"	c	namespace:ogdf
NodeArrayBase	ogdf/basic/NodeArray.h	/^	NodeArrayBase() : m_pGraph(0) { }$/;"	f	class:ogdf::NodeArrayBase
NodeArrayBase	ogdf/basic/NodeArray.h	/^	NodeArrayBase(const Graph *pG) : m_pGraph(pG) {$/;"	f	class:ogdf::NodeArrayBase
NodeArrayBase	ogdf/basic/NodeArray.h	/^class NodeArrayBase {$/;"	c	namespace:ogdf
NodeAttributes	ogdf/internal/energybased/NodeAttributes.cpp	/^NodeAttributes::NodeAttributes()$/;"	f	class:ogdf::NodeAttributes
NodeAttributes	ogdf/internal/energybased/NodeAttributes.h	/^class OGDF_EXPORT NodeAttributes$/;"	c	namespace:ogdf
NodeColourScheme	program/globals.h	/^enum NodeColourScheme {UNIFORM_COLOURS, RANDOM_COLOURS, DEPTH_COLOUR,$/;"	g
NodeDragging	program/globals.h	/^enum NodeDragging {ONE_PIECE, NEARBY_PIECES, ALL_PIECES, NO_DRAGGING};$/;"	g
NodeElement	ogdf/basic/Graph_d.h	/^	NodeElement(const Graph *pGraph, int id) :$/;"	f	class:ogdf::NodeElement
NodeElement	ogdf/basic/Graph_d.h	/^	NodeElement(int id) : m_indeg(0), m_outdeg(0), m_id(id) { }$/;"	f	class:ogdf::NodeElement
NodeElement	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT NodeElement : private GraphElement {$/;"	c	namespace:ogdf
NodeElement	ogdf/basic/Graph_d.h	/^class OGDF_EXPORT NodeElement;$/;"	m	namespace:ogdf	typeref:class:ogdf::OGDF_EXPORT
NodeLengthMode	program/globals.h	/^enum NodeLengthMode {AUTO_NODE_LENGTH, MANUAL_NODE_LENGTH};$/;"	g
NodeMerge	ogdf/internal/energybased/MultilevelGraph.h	/^	NodeMerge(int level) : m_level(level) { }$/;"	f	struct:ogdf::NodeMerge
NodeMerge	ogdf/internal/energybased/MultilevelGraph.h	/^struct NodeMerge$/;"	s	namespace:ogdf
NodeNameStatus	program/globals.h	/^enum NodeNameStatus {NODE_NAME_OKAY, NODE_NAME_TAKEN, NODE_NAME_CONTAINS_TAB,$/;"	g
NodeType	ogdf/basic/Graph_d.h	/^	enum NodeType {$/;"	g	class:ogdf::Graph
NodeWidthVisualAid	ui/nodewidthvisualaid.cpp	/^NodeWidthVisualAid::NodeWidthVisualAid(QWidget *parent) : QWidget(parent)$/;"	f	class:NodeWidthVisualAid
NodeWidthVisualAid	ui/nodewidthvisualaid.h	/^class NodeWidthVisualAid : public QWidget$/;"	c
OBJECTS	Makefile	/^OBJECTS       = main.o \\$/;"	m
OBJECTS_DIR	Makefile	/^OBJECTS_DIR   = .\/$/;"	m
OGDFNODE_H	graph/ogdfnode.h	/^#define OGDFNODE_H$/;"	d
OGDF_ADJ_ENTRY_ARRAY_H	ogdf/basic/AdjEntryArray.h	/^#define OGDF_ADJ_ENTRY_ARRAY_H$/;"	d
OGDF_ALLOCATOR	ogdf/basic/memory.h	/^#define OGDF_ALLOCATOR /;"	d
OGDF_ARCH_IA64	ogdf/basic/System.h	/^#define OGDF_ARCH_IA64$/;"	d
OGDF_ARCH_PPC	ogdf/basic/System.h	/^#define OGDF_ARCH_PPC$/;"	d
OGDF_ARCH_SPARC	ogdf/basic/System.h	/^#define OGDF_ARCH_SPARC$/;"	d
OGDF_ARCH_SPARC_V9	ogdf/basic/System.h	/^#define OGDF_ARCH_SPARC_V9$/;"	d
OGDF_ARCH_X64	ogdf/basic/System.h	/^#define OGDF_ARCH_X64$/;"	d
OGDF_ARCH_X86	ogdf/basic/System.h	/^#define OGDF_ARCH_X86$/;"	d
OGDF_ARRAY2D_H	ogdf/basic/Array2D.h	/^#define OGDF_ARRAY2D_H$/;"	d
OGDF_ARRAY_H	ogdf/basic/Array.h	/^#define OGDF_ARRAY_H$/;"	d
OGDF_ASSERT	ogdf/basic/basic.h	/^#define OGDF_ASSERT(/;"	d
OGDF_ASSERT_IF	ogdf/basic/basic.h	/^#define OGDF_ASSERT_IF(/;"	d
OGDF_ATTRIBUTED_GRAPH_H	ogdf/basic/GraphAttributes.h	/^#define OGDF_ATTRIBUTED_GRAPH_H$/;"	d
OGDF_AUGMENT_COMPARER	ogdf/basic/comparer.h	/^#define OGDF_AUGMENT_COMPARER(/;"	d
OGDF_AUGMENT_STATICCOMPARER	ogdf/basic/comparer.h	/^#define OGDF_AUGMENT_STATICCOMPARER(/;"	d
OGDF_BASIC_H	ogdf/basic/basic.h	/^#define OGDF_BASIC_H$/;"	d
OGDF_B_STACK_H	ogdf/basic/BoundedStack.h	/^#define OGDF_B_STACK_H$/;"	d
OGDF_CHECK_SSE2	ogdf/basic/System.h	/^#define OGDF_CHECK_SSE2 /;"	d
OGDF_CLUSTER_ARRAY_H	ogdf/cluster/ClusterArray.h	/^#define OGDF_CLUSTER_ARRAY_H$/;"	d
OGDF_CLUSTER_GRAPH_ATTRIBUTES_H	ogdf/cluster/ClusterGraphAttributes.h	/^#define OGDF_CLUSTER_GRAPH_ATTRIBUTES_H$/;"	d
OGDF_CLUSTER_GRAPH_H	ogdf/cluster/ClusterGraph.h	/^#define OGDF_CLUSTER_GRAPH_H$/;"	d
OGDF_CLUSTER_GRAPH_OBSERVER_H	ogdf/cluster/ClusterGraphObserver.h	/^#define OGDF_CLUSTER_GRAPH_OBSERVER_H$/;"	d
OGDF_COMBINATORIAL_EMBEDDING_H	ogdf/basic/CombinatorialEmbedding.h	/^#define OGDF_COMBINATORIAL_EMBEDDING_H$/;"	d
OGDF_COMPARER_H	ogdf/basic/comparer.h	/^#define OGDF_COMPARER_H$/;"	d
OGDF_CONSTRAINTS_H	ogdf/basic/Constraints.h	/^#define OGDF_CONSTRAINTS_H$/;"	d
OGDF_CRITICAL_SECTION_H	ogdf/basic/CriticalSection.h	/^#define OGDF_CRITICAL_SECTION_H$/;"	d
OGDF_DECL_ALIGN	ogdf/basic/basic.h	/^#define OGDF_DECL_ALIGN(/;"	d
OGDF_DECL_THREAD	ogdf/basic/basic.h	/^#define OGDF_DECL_THREAD /;"	d
OGDF_DINO_LINE_BUFFER_H	ogdf/fileformats/DinoLineBuffer.h	/^#define OGDF_DINO_LINE_BUFFER_H$/;"	d
OGDF_DINO_TOOLS_H	ogdf/fileformats/DinoTools.h	/^#define OGDF_DINO_TOOLS_H$/;"	d
OGDF_DINO_XML_PARSER_H	ogdf/fileformats/DinoXmlParser.h	/^#define OGDF_DINO_XML_PARSER_H$/;"	d
OGDF_DINO_XML_SCANNER_H	ogdf/fileformats/DinoXmlScanner.h	/^#define OGDF_DINO_XML_SCANNER_H$/;"	d
OGDF_EDGE_ARRAY_H	ogdf/basic/EdgeArray.h	/^#define OGDF_EDGE_ARRAY_H$/;"	d
OGDF_EDGE_ATTRIBUTES_H	ogdf/internal/energybased/EdgeAttributes.h	/^#define OGDF_EDGE_ATTRIBUTES_H$/;"	d
OGDF_EDGE_H	ogdf/energybased/Edge.h	/^#define OGDF_EDGE_H$/;"	d
OGDF_EXCEPTIONS_H	ogdf/basic/exceptions.h	/^#define OGDF_EXCEPTIONS_H$/;"	d
OGDF_EXPORT	ogdf/basic/basic.h	/^#define OGDF_EXPORT /;"	d
OGDF_EXPORT	ogdf/basic/basic.h	/^#define OGDF_EXPORT$/;"	d
OGDF_FACE_ARRAY_H	ogdf/basic/FaceArray.h	/^#define OGDF_FACE_ARRAY_H$/;"	d
OGDF_FACE_SET_H	ogdf/basic/FaceSet.h	/^#define OGDF_FACE_SET_H$/;"	d
OGDF_FMMMLAYOUT_H	ogdf/energybased/FMMMLayout.h	/^#define OGDF_FMMMLAYOUT_H$/;"	d
OGDF_FRUCHTERMAN_REINGOLD_H	ogdf/internal/energybased/FruchtermanReingold.h	/^#define OGDF_FRUCHTERMAN_REINGOLD_H$/;"	d
OGDF_GEOMETRY_H	ogdf/basic/geometry.h	/^#define OGDF_GEOMETRY_H$/;"	d
OGDF_GEOM_EPS	ogdf/basic/geometry.h	/^#define OGDF_GEOM_EPS /;"	d
OGDF_GML_PARSER_H	ogdf/fileformats/GmlParser.h	/^#define OGDF_GML_PARSER_H$/;"	d
OGDF_GRAPH_COPY_H	ogdf/basic/GraphCopy.h	/^#define OGDF_GRAPH_COPY_H$/;"	d
OGDF_GRAPH_D_H	ogdf/basic/Graph_d.h	/^#define OGDF_GRAPH_D_H$/;"	d
OGDF_GRAPH_H	ogdf/basic/Graph.h	/^#define OGDF_GRAPH_H$/;"	d
OGDF_GRAPH_STRUCTURE_H	ogdf/basic/GraphObserver.h	/^#define OGDF_GRAPH_STRUCTURE_H$/;"	d
OGDF_HASHING_H	ogdf/basic/Hashing.h	/^#define OGDF_HASHING_H$/;"	d
OGDF_HASH_ARRAY_H	ogdf/basic/HashArray.h	/^#define OGDF_HASH_ARRAY_H$/;"	d
OGDF_LAYOUT_MODULE_H	ogdf/module/LayoutModule.h	/^#define OGDF_LAYOUT_MODULE_H$/;"	d
OGDF_LIKELY	ogdf/basic/basic.h	/^#define OGDF_LIKELY(/;"	d
OGDF_LIST_H	ogdf/basic/List.h	/^#define OGDF_LIST_H$/;"	d
OGDF_LIST_TEMPLATES_H	ogdf/internal/basic/list_templates.h	/^#define OGDF_LIST_TEMPLATES_H$/;"	d
OGDF_LP_SOLVER	ogdf/basic/basic.h	/^#define OGDF_LP_SOLVER$/;"	d
OGDF_MAAR_PACKING_H	ogdf/energybased/MAARPacking.h	/^#define OGDF_MAAR_PACKING_H$/;"	d
OGDF_MALLOC_MEMORY_ALLOCATOR_H	ogdf/internal/basic/MallocMemoryAllocator.h	/^#define OGDF_MALLOC_MEMORY_ALLOCATOR_H$/;"	d
OGDF_MALLOC_NEW_DELETE	ogdf/basic/memory.h	/^#define OGDF_MALLOC_NEW_DELETE /;"	d
OGDF_MATH_H	ogdf/basic/Math.h	/^#define OGDF_MATH_H$/;"	d
OGDF_MEMORY_H	ogdf/basic/memory.h	/^#define OGDF_MEMORY_H$/;"	d
OGDF_MEMORY_MALLOC_TS	ogdf/basic/memory.h	/^#define OGDF_MEMORY_MALLOC_TS$/;"	d
OGDF_MEMORY_POOL_TS	ogdf/basic/memory.h	/^#define OGDF_MEMORY_POOL_TS$/;"	d
OGDF_MM	ogdf/basic/memory.h	/^#define OGDF_MM(/;"	d
OGDF_MULTILEVEL_GRAPH_H	ogdf/internal/energybased/MultilevelGraph.h	/^#define OGDF_MULTILEVEL_GRAPH_H$/;"	d
OGDF_MULTILEVEL_H	ogdf/energybased/Multilevel.h	/^#define OGDF_MULTILEVEL_H$/;"	d
OGDF_NEW	ogdf/basic/memory.h	/^#define OGDF_NEW /;"	d
OGDF_NEW_DELETE	ogdf/basic/memory.h	/^#define OGDF_NEW_DELETE /;"	d
OGDF_NMM_H	ogdf/internal/energybased/NMM.h	/^#define OGDF_NMM_H$/;"	d
OGDF_NODEFAULT	ogdf/basic/basic.h	/^#define OGDF_NODEFAULT /;"	d
OGDF_NODEFAULT	ogdf/basic/basic.h	/^#define OGDF_NODEFAULT$/;"	d
OGDF_NODE_ARRAY_H	ogdf/basic/NodeArray.h	/^#define OGDF_NODE_ARRAY_H$/;"	d
OGDF_NODE_ATTRIBUTES_H	ogdf/internal/energybased/NodeAttributes.h	/^#define OGDF_NODE_ATTRIBUTES_H$/;"	d
OGDF_NODE_H	ogdf/energybased/Node.h	/^#define OGDF_NODE_H$/;"	d
OGDF_NO_COMPILER_TLS	ogdf/basic/basic.h	/^#define OGDF_NO_COMPILER_TLS$/;"	d
OGDF_NUMEXCEPT_H	ogdf/energybased/numexcept.h	/^#define OGDF_NUMEXCEPT_H$/;"	d
OGDF_OGML_H	ogdf/fileformats/Ogml.h	/^#define OGDF_OGML_H$/;"	d
OGDF_OGML_PARSER_H	ogdf/fileformats/OgmlParser.h	/^#define OGDF_OGML_PARSER_H$/;"	d
OGDF_PACKING_ROW_INFO_H	ogdf/energybased/PackingRowInfo.h	/^#define OGDF_PACKING_ROW_INFO_H$/;"	d
OGDF_PARTICLE_INFO_H	ogdf/internal/energybased/ParticleInfo.h	/^#define OGDF_PARTICLE_INFO_H$/;"	d
OGDF_POOL_MEMORY_ALLOCATOR_H	ogdf/internal/basic/PoolMemoryAllocator.h	/^#define OGDF_POOL_MEMORY_ALLOCATOR_H$/;"	d
OGDF_PQUEUE_H	ogdf/energybased/PQueue.h	/^#define OGDF_PQUEUE_H$/;"	d
OGDF_QUAD_TREE_NM_H	ogdf/internal/energybased/QuadTreeNM.h	/^#define OGDF_QUAD_TREE_NM_H$/;"	d
OGDF_QUAD_TREE_NODE_NM_H	ogdf/internal/energybased/QuadTreeNodeNM.h	/^#define OGDF_QUAD_TREE_NODE_NM_H$/;"	d
OGDF_RECTANGLE_H	ogdf/energybased/Rectangle.h	/^#define OGDF_RECTANGLE_H$/;"	d
OGDF_SET_DEBUG_LEVEL	ogdf/basic/basic.h	/^#define OGDF_SET_DEBUG_LEVEL(/;"	d
OGDF_SET_H	ogdf/energybased/Set.h	/^#define OGDF_SET_H$/;"	d
OGDF_SIMPLE_GRAPH_ALG_H	ogdf/basic/simple_graph_alg.h	/^#define OGDF_SIMPLE_GRAPH_ALG_H$/;"	d
OGDF_SLIST_H	ogdf/basic/SList.h	/^#define OGDF_SLIST_H$/;"	d
OGDF_STACK_H	ogdf/basic/Stack.h	/^#define OGDF_STACK_H$/;"	d
OGDF_STD_COMPARER	ogdf/basic/comparer.h	/^#define OGDF_STD_COMPARER(/;"	d
OGDF_STRING_BUFFER_SIZE	ogdf/basic/String.h	/^#define OGDF_STRING_BUFFER_SIZE /;"	d
OGDF_STRING_H	ogdf/basic/String.h	/^#define OGDF_STRING_H$/;"	d
OGDF_SYSTEM_H	ogdf/basic/System.h	/^#define OGDF_SYSTEM_H$/;"	d
OGDF_SYSTEM_OSX	ogdf/basic/basic.h	/^#define OGDF_SYSTEM_OSX$/;"	d
OGDF_SYSTEM_UNIX	ogdf/basic/basic.h	/^#define OGDF_SYSTEM_UNIX$/;"	d
OGDF_SYSTEM_WINDOWS	ogdf/basic/basic.h	/^#define OGDF_SYSTEM_WINDOWS$/;"	d
OGDF_THROW	ogdf/basic/exceptions.h	/^#define OGDF_THROW(/;"	d
OGDF_THROW	ogdf/basic/exceptions.h	/^#undef OGDF_THROW$/;"	d
OGDF_THROW_PARAM	ogdf/basic/exceptions.h	/^#define OGDF_THROW_PARAM(/;"	d
OGDF_THROW_WITH_INFO	ogdf/basic/exceptions.h	/^#define OGDF_THROW_WITH_INFO$/;"	d
OGDF_TUPLE_H	ogdf/basic/tuples.h	/^#define OGDF_TUPLE_H$/;"	d
OGDF_UNLIKELY	ogdf/basic/basic.h	/^#define OGDF_UNLIKELY(/;"	d
OGDF_USE_SSE2	ogdf/basic/System.h	/^#define OGDF_USE_SSE2 /;"	d
OGDF_USE_SSE2	ogdf/basic/System.h	/^#define OGDF_USE_SSE2$/;"	d
OGDF_XML_OBJECT_H	ogdf/fileformats/XmlObject.h	/^#define OGDF_XML_OBJECT_H$/;"	d
OGDF_XML_PARSER_H	ogdf/fileformats/XmlParser.h	/^#define OGDF_XML_PARSER_H$/;"	d
OGDF_clk_tck	ogdf/basic/basic.cpp	/^double OGDF_clk_tck = sysconf(_SC_CLK_TCK); \/\/is long. but definig it here avoids casts...$/;"	v
ONE_PIECE	program/globals.h	/^enum NodeDragging {ONE_PIECE, NEARBY_PIECES, ALL_PIECES, NO_DRAGGING};$/;"	e	enum:NodeDragging
OgdfNode	graph/ogdfnode.h	/^    OgdfNode() {}$/;"	f	class:OgdfNode
OgdfNode	graph/ogdfnode.h	/^class OgdfNode$/;"	c
Ogml	ogdf/fileformats/Ogml.h	/^class Ogml$/;"	c	namespace:ogdf
OgmlAttribute	ogdf/fileformats/OgmlParser.cpp	/^	OgmlAttribute() : id(Ogml::a_none), values() { }$/;"	f	class:ogdf::OgmlParser::OgmlAttribute
OgmlAttribute	ogdf/fileformats/OgmlParser.cpp	/^	OgmlAttribute(int id) : values() {$/;"	f	class:ogdf::OgmlParser::OgmlAttribute
OgmlAttribute	ogdf/fileformats/OgmlParser.cpp	/^class OgmlParser::OgmlAttribute$/;"	c	class:ogdf::OgmlParser	file:
OgmlAttributeValue	ogdf/fileformats/OgmlParser.cpp	/^	OgmlAttributeValue() : id(Ogml::av_any) { }$/;"	f	class:ogdf::OgmlParser::OgmlAttributeValue
OgmlAttributeValue	ogdf/fileformats/OgmlParser.cpp	/^	OgmlAttributeValue(int id) {$/;"	f	class:ogdf::OgmlParser::OgmlAttributeValue
OgmlAttributeValue	ogdf/fileformats/OgmlParser.cpp	/^class OgmlParser::OgmlAttributeValue$/;"	c	class:ogdf::OgmlParser	file:
OgmlEdgeTemplate	ogdf/fileformats/OgmlParser.cpp	/^	OgmlEdgeTemplate(const String &id): m_id(id) { }$/;"	f	struct:ogdf::OgmlParser::OgmlEdgeTemplate
OgmlEdgeTemplate	ogdf/fileformats/OgmlParser.cpp	/^struct OgmlParser::OgmlEdgeTemplate$/;"	s	class:ogdf::OgmlParser	file:
OgmlNodeTemplate	ogdf/fileformats/OgmlParser.cpp	/^	OgmlNodeTemplate(const String &id): m_id(id) { }$/;"	f	struct:ogdf::OgmlParser::OgmlNodeTemplate
OgmlNodeTemplate	ogdf/fileformats/OgmlParser.cpp	/^struct OgmlParser::OgmlNodeTemplate$/;"	s	class:ogdf::OgmlParser	file:
OgmlParser	ogdf/fileformats/OgmlParser.h	/^	OgmlParser() { }$/;"	f	class:ogdf::OgmlParser
OgmlParser	ogdf/fileformats/OgmlParser.h	/^class OgmlParser$/;"	c	namespace:ogdf
OgmlSegment	ogdf/fileformats/OgmlParser.cpp	/^struct OgmlParser::OgmlSegment$/;"	s	class:ogdf::OgmlParser	file:
OgmlTag	ogdf/fileformats/OgmlParser.cpp	/^	OgmlTag() : id(Ogml::t_none), ignoreContent(0) { }$/;"	f	class:ogdf::OgmlParser::OgmlTag
OgmlTag	ogdf/fileformats/OgmlParser.cpp	/^	OgmlTag(int id) : id(Ogml::t_none), ignoreContent(0) {$/;"	f	class:ogdf::OgmlParser::OgmlTag
OgmlTag	ogdf/fileformats/OgmlParser.cpp	/^class OgmlParser::OgmlTag$/;"	c	class:ogdf::OgmlParser	file:
Orientation	ogdf/basic/geometry.h	/^enum Orientation {$/;"	g	namespace:ogdf
P	ogdf/energybased/PQueue.h	/^	List<HelpRecord> P;\/\/the priority queue;$/;"	m	class:ogdf::PQueue
PATHSPECIFYDIALOG_H	ui/pathspecifydialog.h	/^#define PATHSPECIFYDIALOG_H$/;"	d
PATH_H	graph/path.h	/^#define PATH_H$/;"	d
PLAIN_FASTA	program/globals.h	/^enum GraphFileType {LAST_GRAPH, FASTG, GFA, TRINITY, ASQG, PLAIN_FASTA, ANY_FILE_TYPE,$/;"	e	enum:GraphFileType
POS_BIG_DOUBLE	ogdf/energybased/numexcept.cpp	/^#define POS_BIG_DOUBLE /;"	d	file:
POS_SMALL_DOUBLE	ogdf/energybased/numexcept.cpp	/^#define POS_SMALL_DOUBLE /;"	d	file:
PQueue	ogdf/energybased/PQueue.h	/^	PQueue() { P.clear(); } \/\/constructor$/;"	f	class:ogdf::PQueue
PQueue	ogdf/energybased/PQueue.h	/^class PQueue$/;"	c	namespace:ogdf
PROTEIN	program/globals.h	/^enum SequenceType {NUCLEOTIDE, PROTEIN, EITHER_NUCLEOTIDE_OR_PROTEIN};$/;"	e	enum:SequenceType
PackingRowInfo	ogdf/energybased/PackingRowInfo.h	/^		PackingRowInfo()      \/\/constructor$/;"	f	class:ogdf::PackingRowInfo
PackingRowInfo	ogdf/energybased/PackingRowInfo.h	/^	class PackingRowInfo$/;"	c	namespace:ogdf
PageFormatType	ogdf/energybased/FMMMLayout.h	/^	enum PageFormatType {$/;"	g	class:ogdf::FMMMLayout
ParticleInfo	ogdf/internal/energybased/ParticleInfo.h	/^	ParticleInfo()    \/\/constructor$/;"	f	class:ogdf::ParticleInfo
ParticleInfo	ogdf/internal/energybased/ParticleInfo.h	/^class OGDF_EXPORT ParticleInfo$/;"	c	namespace:ogdf
ParticleInfoComparer	ogdf/internal/energybased/ParticleInfo.h	/^class ParticleInfoComparer {$/;"	c	namespace:ogdf
Path	graph/path.h	/^    Path() {}$/;"	f	class:Path
Path	graph/path.h	/^class Path$/;"	c
PathSpecifyDialog	ui/pathspecifydialog.cpp	/^PathSpecifyDialog::PathSpecifyDialog(QWidget *parent) :$/;"	f	class:PathSpecifyDialog
PathSpecifyDialog	ui/pathspecifydialog.h	/^class PathSpecifyDialog : public QDialog$/;"	c
PoolElement	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^struct PoolMemoryAllocator::PoolElement$/;"	s	class:ogdf::PoolMemoryAllocator	file:
PoolMemoryAllocator	ogdf/internal/basic/PoolMemoryAllocator.h	/^	PoolMemoryAllocator() { }$/;"	f	class:ogdf::PoolMemoryAllocator
PoolMemoryAllocator	ogdf/internal/basic/PoolMemoryAllocator.h	/^class PoolMemoryAllocator$/;"	c	namespace:ogdf
PoolVector	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^struct PoolMemoryAllocator::PoolVector$/;"	s	class:ogdf::PoolMemoryAllocator	file:
PreSort	ogdf/energybased/FMMMLayout.h	/^	enum PreSort {$/;"	g	class:ogdf::FMMMLayout
PreconditionViolatedCode	ogdf/basic/exceptions.h	/^	enum PreconditionViolatedCode {$/;"	g	namespace:ogdf
PreconditionViolatedException	ogdf/basic/exceptions.h	/^		PreconditionViolatedException($/;"	f	class:ogdf::PreconditionViolatedException
PreconditionViolatedException	ogdf/basic/exceptions.h	/^		PreconditionViolatedException(PreconditionViolatedCode code,$/;"	f	class:ogdf::PreconditionViolatedException
PreconditionViolatedException	ogdf/basic/exceptions.h	/^	class OGDF_EXPORT PreconditionViolatedException : public Exception$/;"	c	namespace:ogdf
PredefinedKey	ogdf/fileformats/GmlParser.h	/^	enum PredefinedKey { idPredefKey = 0, labelPredefKey, CreatorPredefKey,$/;"	g	class:ogdf::GmlParser
PredefinedKey	ogdf/fileformats/XmlParser.h	/^	enum PredefinedKey { idPredefKey = 0, labelPredefKey, CreatorPredefKey,$/;"	g	class:ogdf::XmlParser
QINSTALL	Makefile	/^QINSTALL      = \/usr\/local\/opt\/qt5\/bin\/qmake -install qinstall$/;"	m
QINSTALL_PROGRAM	Makefile	/^QINSTALL_PROGRAM = \/usr\/local\/opt\/qt5\/bin\/qmake -install qinstall -exe$/;"	m
QMAKE	Makefile	/^QMAKE         = \/usr\/local\/opt\/qt5\/bin\/qmake$/;"	m
QMAKE_TARGET	Makefile	/^QMAKE_TARGET  = Bandage$/;"	m
QT_PATH	build_scripts/bandage_build_windows.bat	/^set QT_PATH=C:\\Qt\\5.6$/;"	v
QT_PATH	build_scripts/bandage_build_windows_32bit.bat	/^set QT_PATH=C:\\Qt\\5.6$/;"	v
QUERYDISTANCE_H	graph/querydistance.h	/^#define QUERYDISTANCE_H$/;"	d
QUERYPATHSDIALOG_H	ui/querypathsdialog.h	/^#define QUERYPATHSDIALOG_H$/;"	d
QUERYPATHSEQUENCECOPYBUTTON_H	ui/querypathsequencecopybutton.h	/^#define QUERYPATHSEQUENCECOPYBUTTON_H$/;"	d
QUERYPATHSPUSHBUTTON_H	ui/querypathspushbutton.h	/^#define QUERYPATHSPUSHBUTTON_H$/;"	d
QUERYPATHS_H	command_line/querypaths.h	/^#define QUERYPATHS_H$/;"	d
QuadTreeNM	ogdf/internal/energybased/QuadTreeNM.cpp	/^QuadTreeNM::QuadTreeNM()$/;"	f	class:ogdf::QuadTreeNM
QuadTreeNM	ogdf/internal/energybased/QuadTreeNM.h	/^class QuadTreeNM$/;"	c	namespace:ogdf
QuadTreeNodeNM	ogdf/internal/energybased/QuadTreeNodeNM.cpp	/^QuadTreeNodeNM::QuadTreeNodeNM()$/;"	f	class:ogdf::QuadTreeNodeNM
QuadTreeNodeNM	ogdf/internal/energybased/QuadTreeNodeNM.h	/^class QuadTreeNodeNM$/;"	c	namespace:ogdf
QualityVsSpeed	ogdf/energybased/FMMMLayout.h	/^	enum QualityVsSpeed {$/;"	g	class:ogdf::FMMMLayout
QueryDistance	graph/querydistance.h	/^class QueryDistance$/;"	c
QueryPathSequenceCopyButton	ui/querypathsequencecopybutton.cpp	/^QueryPathSequenceCopyButton::QueryPathSequenceCopyButton(QByteArray pathSequence, QString pathStart) :$/;"	f	class:QueryPathSequenceCopyButton
QueryPathSequenceCopyButton	ui/querypathsequencecopybutton.h	/^class QueryPathSequenceCopyButton : public QPushButton$/;"	c
QueryPathsDialog	ui/querypathsdialog.cpp	/^QueryPathsDialog::QueryPathsDialog(QWidget * parent, BlastQuery * query) :$/;"	f	class:QueryPathsDialog
QueryPathsDialog	ui/querypathsdialog.h	/^class QueryPathsDialog : public QDialog$/;"	c
QueryPathsPushButton	ui/querypathspushbutton.cpp	/^QueryPathsPushButton::QueryPathsPushButton(int pathCount, BlastQuery * query) :$/;"	f	class:QueryPathsPushButton
QueryPathsPushButton	ui/querypathspushbutton.h	/^class QueryPathsPushButton : public QPushButton$/;"	c
RANDOM_COLOURS	program/globals.h	/^enum NodeColourScheme {UNIFORM_COLOURS, RANDOM_COLOURS, DEPTH_COLOUR,$/;"	e	enum:NodeColourScheme
RANLIB	Makefile	/^RANLIB        = \/Applications\/Xcode.app\/Contents\/Developer\/Toolchains\/XcodeDefault.xctoolchain\/usr\/bin\/ranlib -s$/;"	m
READY_FOR_BLAST_SEARCH	program/globals.h	/^                   READY_FOR_BLAST_SEARCH, BLAST_SEARCH_IN_PROGRESS,$/;"	e	enum:BlastUiState
REDUCE_H	command_line/reduce.h	/^#define REDUCE_H$/;"	d
RUNBLASTSEARCHWORKER_H	blast/runblastsearchworker.h	/^#define RUNBLASTSEARCHWORKER_H$/;"	d
Rectangle	ogdf/energybased/Rectangle.h	/^		Rectangle() \/\/constructor$/;"	f	class:ogdf::Rectangle
Rectangle	ogdf/energybased/Rectangle.h	/^	class Rectangle$/;"	c	namespace:ogdf
RectangleComparerArea	ogdf/energybased/Rectangle.h	/^        RectangleComparerArea() { }$/;"	f	class:ogdf::RectangleComparerArea
RectangleComparerArea	ogdf/energybased/Rectangle.h	/^    class RectangleComparerArea$/;"	c	namespace:ogdf
RectangleComparerHeight	ogdf/energybased/Rectangle.h	/^		RectangleComparerHeight() { }$/;"	f	class:ogdf::RectangleComparerHeight
RectangleComparerHeight	ogdf/energybased/Rectangle.h	/^	class RectangleComparerHeight$/;"	c	namespace:ogdf
RectangleComparerWidth	ogdf/energybased/Rectangle.h	/^		RectangleComparerWidth() { }$/;"	f	class:ogdf::RectangleComparerWidth
RectangleComparerWidth	ogdf/energybased/Rectangle.h	/^	class RectangleComparerWidth$/;"	c	namespace:ogdf
ReducedTreeConstruction	ogdf/energybased/FMMMLayout.h	/^	enum ReducedTreeConstruction {$/;"	g	class:ogdf::FMMMLayout
RepulsiveForcesMethod	ogdf/energybased/FMMMLayout.h	/^	enum RepulsiveForcesMethod {$/;"	g	class:ogdf::FMMMLayout
RunBlastSearchWorker	blast/runblastsearchworker.cpp	/^RunBlastSearchWorker::RunBlastSearchWorker(QString blastnCommand, QString tblastnCommand, QString parameters) :$/;"	f	class:RunBlastSearchWorker
RunBlastSearchWorker	blast/runblastsearchworker.h	/^class RunBlastSearchWorker : public QObject$/;"	c
SCINOT_H	program/scinot.h	/^#define SCINOT_H$/;"	d
SED	Makefile	/^SED           = sed$/;"	m
SETTINGSDIALOG_H	ui/settingsdialog.h	/^#define SETTINGSDIALOG_H$/;"	d
SETTINGS_H	program/settings.h	/^#define SETTINGS_H$/;"	d
SIZE_MAX	ogdf/basic/basic.h	/^#define SIZE_MAX /;"	d
SList	ogdf/basic/SList.h	/^	SList() : m_count(0) { }$/;"	f	class:ogdf::SList
SList	ogdf/basic/SList.h	/^	SList(const SList<E> &L) : SListPure<E>(L), m_count(L.m_count) { }$/;"	f	class:ogdf::SList
SList	ogdf/basic/SList.h	/^class SList : private SListPure<E> {$/;"	c	namespace:ogdf
SListConstIterator	ogdf/basic/SList.h	/^	SListConstIterator() : m_pX(0) { }$/;"	f	class:ogdf::SListConstIterator
SListConstIterator	ogdf/basic/SList.h	/^	SListConstIterator(const SListConstIterator &it) : m_pX(it.m_pX) { }$/;"	f	class:ogdf::SListConstIterator
SListConstIterator	ogdf/basic/SList.h	/^	SListConstIterator(const SListElement<E> *pX) : m_pX(pX) { }$/;"	f	class:ogdf::SListConstIterator
SListConstIterator	ogdf/basic/SList.h	/^	SListConstIterator(const SListIterator<E> &it) : m_pX((const SListElement<E> *)it) { }$/;"	f	class:ogdf::SListConstIterator
SListConstIterator	ogdf/basic/SList.h	/^template<class E> class SListConstIterator {$/;"	c	namespace:ogdf
SListElement	ogdf/basic/SList.h	/^	SListElement() : m_next(0) { }$/;"	f	class:ogdf::SListElement
SListElement	ogdf/basic/SList.h	/^	SListElement(const E &x) : m_next(0), m_x(x) { }$/;"	f	class:ogdf::SListElement
SListElement	ogdf/basic/SList.h	/^	SListElement(const E &x, SListElement<E> *next) :$/;"	f	class:ogdf::SListElement
SListElement	ogdf/basic/SList.h	/^class SListElement {$/;"	c	namespace:ogdf
SListIterator	ogdf/basic/SList.h	/^	SListIterator() : m_pX(0) { }$/;"	f	class:ogdf::SListIterator
SListIterator	ogdf/basic/SList.h	/^	SListIterator(SListElement<E> *pX) : m_pX(pX) { }$/;"	f	class:ogdf::SListIterator
SListIterator	ogdf/basic/SList.h	/^	SListIterator(const SListIterator<E> &it) : m_pX(it.m_pX) { }$/;"	f	class:ogdf::SListIterator
SListIterator	ogdf/basic/SList.h	/^template<class E> class SListIterator {$/;"	c	namespace:ogdf
SListPure	ogdf/basic/SList.h	/^	SListPure() : m_head(0), m_tail(0) { }$/;"	f	class:ogdf::SListPure
SListPure	ogdf/basic/SList.h	/^	SListPure(const SListPure<E> &L) : m_head(0), m_tail(0) {$/;"	f	class:ogdf::SListPure
SListPure	ogdf/basic/SList.h	/^template<class E> class SListPure {$/;"	c	namespace:ogdf
SOURCES	Makefile	/^SOURCES       = program\/main.cpp \\$/;"	m
SPIN_BOX	program/globals.h	/^enum ZoomSource {MOUSE_WHEEL, SPIN_BOX, KEYBOARD, GESTURE};$/;"	e	enum:ZoomSource
STARTING	program/globals.h	/^enum ContiguityStatus {STARTING, CONTIGUOUS_STRAND_SPECIFIC,$/;"	e	enum:ContiguityStatus
STRIP	Makefile	/^STRIP         = strip$/;"	m
SYMLINK	Makefile	/^SYMLINK       = ln -f -s$/;"	m
S_node	ogdf/energybased/Set.h	/^		node* S_node;       \/\/representation of the node set S_node[0,G.number_of_nodes()-1]$/;"	m	class:ogdf::Set
SciNot	program/scinot.cpp	/^SciNot::SciNot() :$/;"	f	class:SciNot
SciNot	program/scinot.cpp	/^SciNot::SciNot(QString sciNotString) :$/;"	f	class:SciNot
SciNot	program/scinot.cpp	/^SciNot::SciNot(double coefficient, int exponent) :$/;"	f	class:SciNot
SciNot	program/scinot.cpp	/^SciNot::SciNot(double num) :$/;"	f	class:SciNot
SciNot	program/scinot.h	/^class SciNot$/;"	c
SciNotSetting	program/settings.h	/^    SciNotSetting() {val = 0.0; min = 0.0; max = 0.0;}$/;"	f	class:SciNotSetting
SciNotSetting	program/settings.h	/^    SciNotSetting(SciNot v, SciNot minimum, SciNot maximum, bool isOn = true) {val = v; min = minimum; max = maximum; on = isOn;}$/;"	f	class:SciNotSetting
SciNotSetting	program/settings.h	/^class SciNotSetting$/;"	c
SequenceType	program/globals.h	/^enum SequenceType {NUCLEOTIDE, PROTEIN, EITHER_NUCLEOTIDE_OR_PROTEIN};$/;"	g
SequencesLoadedFromFasta	program/globals.h	/^enum SequencesLoadedFromFasta {NOT_READY, NOT_TRIED, TRIED};$/;"	g
Set	ogdf/energybased/Set.cpp	/^Set::Set()$/;"	f	class:ogdf::Set
Set	ogdf/energybased/Set.h	/^	class Set$/;"	c	namespace:ogdf
Settings	program/settings.cpp	/^Settings::Settings()$/;"	f	class:Settings
Settings	program/settings.h	/^class Settings$/;"	c
SettingsDialog	ui/settingsdialog.cpp	/^SettingsDialog::SettingsDialog(QWidget *parent) :$/;"	f	class:SettingsDialog
SettingsDialog	ui/settingsdialog.h	/^class SettingsDialog : public QDialog$/;"	c
Sm_boxlength	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	double Sm_boxlength;               \/\/length of small cell$/;"	m	class:ogdf::QuadTreeNodeNM
Sm_center	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	complex<double>  Sm_center;        \/\/center of the small cell$/;"	m	class:ogdf::QuadTreeNodeNM
Sm_downleftcorner	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	DPoint Sm_downleftcorner;          \/\/coords of the down left corner of the small cell$/;"	m	class:ogdf::QuadTreeNodeNM
Sm_level	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	int  Sm_level;                     \/\/level of the small cell$/;"	m	class:ogdf::QuadTreeNodeNM
SmallestCellFinding	ogdf/energybased/FMMMLayout.h	/^	enum SmallestCellFinding {$/;"	g	class:ogdf::FMMMLayout
Stack	ogdf/basic/Stack.h	/^	Stack() { m_count = 0; }$/;"	f	class:ogdf::Stack
Stack	ogdf/basic/Stack.h	/^	Stack(const Stack<E> &S) : StackPure<E>(S) { m_count = S.m_count; }$/;"	f	class:ogdf::Stack
Stack	ogdf/basic/Stack.h	/^template<class E> class Stack : private StackPure<E>$/;"	c	namespace:ogdf
StackPure	ogdf/basic/Stack.h	/^	StackPure() { m_head = 0; }$/;"	f	class:ogdf::StackPure
StackPure	ogdf/basic/Stack.h	/^	StackPure(const StackPure<E> &S)  {$/;"	f	class:ogdf::StackPure
StackPure	ogdf/basic/Stack.h	/^template<class E> class StackPure$/;"	c	namespace:ogdf
StdComparer	ogdf/basic/comparer.h	/^template<> class StdComparer<bool> {$/;"	c	namespace:ogdf
StdComparer	ogdf/basic/comparer.h	/^template<typename E> class StdComparer$/;"	c	namespace:ogdf
StopCriterion	ogdf/energybased/FMMMLayout.h	/^	enum StopCriterion {$/;"	g	class:ogdf::FMMMLayout
String	ogdf/basic/String.cpp	/^String::String()$/;"	f	class:ogdf::String
String	ogdf/basic/String.cpp	/^String::String(const String &str)$/;"	f	class:ogdf::String
String	ogdf/basic/String.cpp	/^String::String(const char *str)$/;"	f	class:ogdf::String
String	ogdf/basic/String.cpp	/^String::String(const char c)$/;"	f	class:ogdf::String
String	ogdf/basic/String.cpp	/^String::String(size_t maxLen, const char *str)$/;"	f	class:ogdf::String
String	ogdf/basic/String.h	/^class OGDF_EXPORT String {$/;"	c	namespace:ogdf
String	ogdf/basic/basic.h	/^	class OGDF_EXPORT String;$/;"	m	namespace:ogdf	typeref:class:ogdf::OGDF_EXPORT
System	ogdf/basic/System.h	/^class OGDF_EXPORT System {$/;"	c	namespace:ogdf
TABLEWIDGETITEMDOUBLE_H	ui/tablewidgetitemdouble.h	/^#define TABLEWIDGETITEMDOUBLE_H$/;"	d
TABLEWIDGETITEMINT_H	ui/tablewidgetitemint.h	/^#define TABLEWIDGETITEMINT_H$/;"	d
TABLEWIDGETITEMNAME_H	ui/tablewidgetitemname.h	/^#define TABLEWIDGETITEMNAME_H$/;"	d
TABLEWIDGETITEMSHOWN_H	ui/tablewidgetitemshown.h	/^#define TABLEWIDGETITEMSHOWN_H$/;"	d
TAG_NUM	ogdf/fileformats/Ogml.h	/^		TAG_NUM						\/\/!< number of tags$/;"	e	enum:ogdf::Ogml::TagId
TAR	Makefile	/^TAR           = tar -cf$/;"	m
TARGET	Makefile	/^TARGET        = Bandage.app\/Contents\/MacOS\/Bandage$/;"	m
TRIED	program/globals.h	/^enum SequencesLoadedFromFasta {NOT_READY, NOT_TRIED, TRIED};$/;"	e	enum:SequencesLoadedFromFasta
TRINITY	program/globals.h	/^enum GraphFileType {LAST_GRAPH, FASTG, GFA, TRINITY, ASQG, PLAIN_FASTA, ANY_FILE_TYPE,$/;"	e	enum:GraphFileType
TableWidgetItemDouble	ui/tablewidgetitemdouble.cpp	/^TableWidgetItemDouble::TableWidgetItemDouble(QString text, double value) :$/;"	f	class:TableWidgetItemDouble
TableWidgetItemDouble	ui/tablewidgetitemdouble.h	/^class TableWidgetItemDouble : public QTableWidgetItem$/;"	c
TableWidgetItemInt	ui/tablewidgetitemint.cpp	/^TableWidgetItemInt::TableWidgetItemInt(QString text, int value) :$/;"	f	class:TableWidgetItemInt
TableWidgetItemInt	ui/tablewidgetitemint.h	/^class TableWidgetItemInt : public QTableWidgetItem$/;"	c
TableWidgetItemName	ui/tablewidgetitemname.cpp	/^TableWidgetItemName::TableWidgetItemName(BlastQuery * query) :$/;"	f	class:TableWidgetItemName
TableWidgetItemName	ui/tablewidgetitemname.h	/^class TableWidgetItemName : public QTableWidgetItem$/;"	c
TableWidgetItemShown	ui/tablewidgetitemshown.cpp	/^TableWidgetItemShown::TableWidgetItemShown(bool shown) :$/;"	f	class:TableWidgetItemShown
TableWidgetItemShown	ui/tablewidgetitemshown.h	/^class TableWidgetItemShown : public QTableWidgetItem$/;"	c
TagId	ogdf/fileformats/Ogml.h	/^	enum TagId$/;"	g	class:ogdf::Ogml
TargetComparer	ogdf/basic/comparer.h	/^class TargetComparer {$/;"	c	namespace:ogdf
TipOver	ogdf/energybased/FMMMLayout.h	/^	enum TipOver {$/;"	g	class:ogdf::FMMMLayout
TopCenter	ogdf/basic/GraphAttributes.h	/^		TopLeft = 0, TopCenter, TopRight, CenterLeft, Center, CenterRight, BottomLeft, BottomCenter, BottomRight$/;"	e	enum:ogdf::GraphAttributes::ImageAlignment
TopLeft	ogdf/basic/GraphAttributes.h	/^		TopLeft = 0, TopCenter, TopRight, CenterLeft, Center, CenterRight, BottomLeft, BottomCenter, BottomRight$/;"	e	enum:ogdf::GraphAttributes::ImageAlignment
TopRight	ogdf/basic/GraphAttributes.h	/^		TopLeft = 0, TopCenter, TopRight, CenterLeft, Center, CenterRight, BottomLeft, BottomCenter, BottomRight$/;"	e	enum:ogdf::GraphAttributes::ImageAlignment
Tuple2	ogdf/basic/tuples.h	/^	Tuple2() { }$/;"	f	class:ogdf::Tuple2
Tuple2	ogdf/basic/tuples.h	/^	Tuple2(const E1 &y1, const E2 &y2) : m_x1(y1), m_x2(y2) { }$/;"	f	class:ogdf::Tuple2
Tuple2	ogdf/basic/tuples.h	/^	Tuple2(const Tuple2<E1,E2> &t2) : m_x1(t2.m_x1), m_x2(t2.m_x2) { }$/;"	f	class:ogdf::Tuple2
Tuple2	ogdf/basic/tuples.h	/^template<class E1, class E2> class Tuple2 {$/;"	c	namespace:ogdf
Tuple3	ogdf/basic/tuples.h	/^	Tuple3() { }$/;"	f	class:ogdf::Tuple3
Tuple3	ogdf/basic/tuples.h	/^	Tuple3(const E1 &y1, const E2 &y2, const E3 &y3) :$/;"	f	class:ogdf::Tuple3
Tuple3	ogdf/basic/tuples.h	/^	Tuple3(const Tuple3<E1,E2,E3> &t3) :$/;"	f	class:ogdf::Tuple3
Tuple3	ogdf/basic/tuples.h	/^template<class E1, class E2, class E3> class Tuple3 {$/;"	c	namespace:ogdf
Tuple4	ogdf/basic/tuples.h	/^	Tuple4() { }$/;"	f	class:ogdf::Tuple4
Tuple4	ogdf/basic/tuples.h	/^	Tuple4(const E1 &y1, const E2 &y2, const E3 &y3, const E4 &y4) :$/;"	f	class:ogdf::Tuple4
Tuple4	ogdf/basic/tuples.h	/^	Tuple4(const Tuple4<E1,E2,E3,E4> &t4) :$/;"	f	class:ogdf::Tuple4
Tuple4	ogdf/basic/tuples.h	/^template<class E1, class E2, class E3, class E4> class Tuple4 {$/;"	c	namespace:ogdf
UNIFORM_COLOURS	program/globals.h	/^enum NodeColourScheme {UNIFORM_COLOURS, RANDOM_COLOURS, DEPTH_COLOUR,$/;"	e	enum:NodeColourScheme
UNKNOWN_FILE_TYPE	program/globals.h	/^                    UNKNOWN_FILE_TYPE};$/;"	e	enum:GraphFileType
UNKNOWN_OVERLAP	program/globals.h	/^enum EdgeOverlapType {UNKNOWN_OVERLAP, EXACT_OVERLAP,$/;"	e	enum:EdgeOverlapType
Ui	ui/aboutdialog.h	/^namespace Ui {$/;"	n
Ui	ui/blasthitfiltersdialog.h	/^namespace Ui {$/;"	n
Ui	ui/blastsearchdialog.h	/^namespace Ui {$/;"	n
Ui	ui/changenodedepthdialog.h	/^namespace Ui {$/;"	n
Ui	ui/changenodenamedialog.h	/^namespace Ui {$/;"	n
Ui	ui/enteroneblastquerydialog.h	/^namespace Ui {$/;"	n
Ui	ui/graphinfodialog.h	/^namespace Ui {$/;"	n
Ui	ui/mainwindow.h	/^namespace Ui {$/;"	n
Ui	ui/myprogressdialog.h	/^namespace Ui {$/;"	n
Ui	ui/pathspecifydialog.h	/^namespace Ui {$/;"	n
Ui	ui/querypathsdialog.h	/^namespace Ui {$/;"	n
Ui	ui/settingsdialog.h	/^namespace Ui {$/;"	n
UiState	program/globals.h	/^enum UiState {NO_GRAPH_LOADED, GRAPH_LOADED, GRAPH_DRAWN};$/;"	g
VComparer	ogdf/basic/comparer.h	/^	VComparer() { }$/;"	f	class:ogdf::VComparer
VComparer	ogdf/basic/comparer.h	/^template<class E> class VComparer {$/;"	c	namespace:ogdf
VERSION	build_scripts/bandage_build_windows.bat	/^for \/f "tokens=2 delims=;" %%G IN ("%VERSION_LINE%") DO set VERSION=%%G$/;"	v
VERSION	build_scripts/bandage_build_windows_32bit.bat	/^for \/f "tokens=2 delims=;" %%G IN ("%VERSION_LINE%") DO set VERSION=%%G$/;"	v
VERSION_LINE	build_scripts/bandage_build_windows.bat	/^for \/f %%i in ('findstr setApplicationVersion Bandage\\program\\main.cpp') do set VERSION_LINE=%%i$/;"	v
VERSION_LINE	build_scripts/bandage_build_windows.bat	/^set VERSION_LINE=%VERSION_LINE:"=;%$/;"	v
VERSION_LINE	build_scripts/bandage_build_windows.bat	/^set VERSION_LINE=%VERSION_LINE:.=_%$/;"	v
VERSION_LINE	build_scripts/bandage_build_windows_32bit.bat	/^for \/f %%i in ('findstr setApplicationVersion Bandage\\program\\main.cpp') do set VERSION_LINE=%%i$/;"	v
VERSION_LINE	build_scripts/bandage_build_windows_32bit.bat	/^set VERSION_LINE=%VERSION_LINE:"=;%$/;"	v
VERSION_LINE	build_scripts/bandage_build_windows_32bit.bat	/^set VERSION_LINE=%VERSION_LINE:.=_%$/;"	v
VERTICALLABEL_H	ui/verticallabel.h	/^#define VERTICALLABEL_H$/;"	d
VERTICALSCROLLAREA_H	ui/verticalscrollarea.h	/^#define VERTICALSCROLLAREA_H$/;"	d
ValidityState	ogdf/fileformats/Ogml.h	/^	enum ValidityState$/;"	g	class:ogdf::Ogml
VerticalLabel	ui/verticallabel.cpp	/^VerticalLabel::VerticalLabel(QWidget *parent)$/;"	f	class:VerticalLabel
VerticalLabel	ui/verticallabel.cpp	/^VerticalLabel::VerticalLabel(const QString &text, QWidget *parent)$/;"	f	class:VerticalLabel
VerticalLabel	ui/verticallabel.h	/^class VerticalLabel : public QLabel$/;"	c
VerticalScrollArea	ui/verticalscrollarea.cpp	/^VerticalScrollArea::VerticalScrollArea(QWidget *parent) :$/;"	f	class:VerticalScrollArea
VerticalScrollArea	ui/verticalscrollarea.h	/^class VerticalScrollArea : public QScrollArea$/;"	c
WHOLE_GRAPH	program/globals.h	/^enum GraphScope {WHOLE_GRAPH, AROUND_NODE, AROUND_BLAST_HITS, DEPTH_RANGE};$/;"	e	enum:GraphScope
WIN32_EXTRA_LEAN	ogdf/basic/basic.h	/^#define WIN32_EXTRA_LEAN$/;"	d
WIN32_FIND_DATA	ogdf/basic/basic.cpp	/^#define WIN32_FIND_DATA /;"	d	file:
WIN32_LEAN_AND_MEAN	ogdf/basic/basic.h	/^#define WIN32_LEAN_AND_MEAN$/;"	d
XmlAttributeObject	ogdf/fileformats/DinoXmlParser.h	/^		XmlAttributeObject(HashedString *name, HashedString *value) :$/;"	f	struct:ogdf::XmlAttributeObject
XmlAttributeObject	ogdf/fileformats/DinoXmlParser.h	/^	struct OGDF_EXPORT XmlAttributeObject {$/;"	s	namespace:ogdf
XmlKey	ogdf/fileformats/XmlObject.h	/^typedef HashElement<String,int> *XmlKey;$/;"	t	namespace:ogdf
XmlObject	ogdf/fileformats/XmlObject.h	/^	XmlObject(XmlKey key) : m_pBrother(0), m_key(key),$/;"	f	struct:ogdf::XmlObject
XmlObject	ogdf/fileformats/XmlObject.h	/^	XmlObject(XmlKey key, const char *stringValue) : m_pBrother(0), m_key(key),$/;"	f	struct:ogdf::XmlObject
XmlObject	ogdf/fileformats/XmlObject.h	/^	XmlObject(XmlKey key, double doubleValue) : m_pBrother(0), m_key(key),$/;"	f	struct:ogdf::XmlObject
XmlObject	ogdf/fileformats/XmlObject.h	/^	XmlObject(XmlKey key, int intValue) : m_pBrother(0), m_key(key),$/;"	f	struct:ogdf::XmlObject
XmlObject	ogdf/fileformats/XmlObject.h	/^	XmlObject(const char *stringValue) : m_pBrother(0), m_key(0),$/;"	f	struct:ogdf::XmlObject
XmlObject	ogdf/fileformats/XmlObject.h	/^struct OGDF_EXPORT XmlObject {$/;"	s	namespace:ogdf
XmlObjectType	ogdf/fileformats/XmlObject.h	/^enum XmlObjectType { xmlIntValue, xmlDoubleValue, xmlStringValue, xmlListBegin,$/;"	g	namespace:ogdf
XmlParser	ogdf/fileformats/XmlParser.cpp	/^XmlParser::XmlParser(const char *fileName, bool doCheck)$/;"	f	class:ogdf::XmlParser
XmlParser	ogdf/fileformats/XmlParser.cpp	/^XmlParser::XmlParser(istream &is, bool doCheck)$/;"	f	class:ogdf::XmlParser
XmlParser	ogdf/fileformats/XmlParser.h	/^class OGDF_EXPORT XmlParser {$/;"	c	namespace:ogdf
XmlTagObject	ogdf/fileformats/DinoXmlParser.h	/^		XmlTagObject(HashedString *name) :$/;"	f	struct:ogdf::XmlTagObject
XmlTagObject	ogdf/fileformats/DinoXmlParser.h	/^	struct OGDF_EXPORT XmlTagObject {$/;"	s	namespace:ogdf
XmlToken	ogdf/fileformats/DinoXmlScanner.h	/^	enum XmlToken {$/;"	g	namespace:ogdf
ZIP_PATH	build_scripts/bandage_build_windows.bat	/^set ZIP_PATH=C:\\Program Files\\7-Zip\\7z.exe$/;"	v
ZIP_PATH	build_scripts/bandage_build_windows_32bit.bat	/^set ZIP_PATH=C:\\Program Files\\7-Zip\\7z.exe$/;"	v
ZoomSource	program/globals.h	/^enum ZoomSource {MOUSE_WHEEL, SPIN_BOX, KEYBOARD, GESTURE};$/;"	g
_WIN32_WINNT	ogdf/basic/basic.h	/^#define _WIN32_WINNT /;"	d
__MSVCRT_VERSION__	ogdf/basic/basic.h	/^#define __MSVCRT_VERSION__ /;"	d
__SIZEOF_POINTER__	ogdf/basic/basic.h	/^#define __SIZEOF_POINTER__ /;"	d
__cpuid	ogdf/basic/System.cpp	/^static void __cpuid(int CPUInfo[4], int infoType)$/;"	f	file:
__int16	ogdf/basic/basic.h	/^#undef __int16$/;"	d
__int16	ogdf/basic/basic.h	/^typedef short              __int16;$/;"	t
__int32	ogdf/basic/basic.h	/^#undef __int32$/;"	d
__int32	ogdf/basic/basic.h	/^typedef int                __int32;$/;"	t
__int64	ogdf/basic/basic.h	/^#undef __int64$/;"	d
__int64	ogdf/basic/basic.h	/^typedef long long          __int64;$/;"	t
__int8	ogdf/basic/basic.h	/^#undef __int8$/;"	d
__int8	ogdf/basic/basic.h	/^typedef signed char        __int8;$/;"	t
__uint16	ogdf/basic/basic.h	/^typedef unsigned __int16 __uint16;$/;"	t
__uint16	ogdf/basic/basic.h	/^typedef unsigned short     __uint16;$/;"	t
__uint32	ogdf/basic/basic.h	/^typedef unsigned __int32 __uint32;$/;"	t
__uint32	ogdf/basic/basic.h	/^typedef unsigned int       __uint32;$/;"	t
__uint64	ogdf/basic/basic.h	/^typedef unsigned __int64 __uint64;$/;"	t
__uint64	ogdf/basic/basic.h	/^typedef unsigned long long __uint64;$/;"	t
__uint8	ogdf/basic/basic.h	/^typedef unsigned __int8  __uint8;$/;"	t
__uint8	ogdf/basic/basic.h	/^typedef unsigned char      __uint8;$/;"	t
_aligned_free	ogdf/basic/System.h	/^#define _aligned_free(/;"	d
_aligned_malloc	ogdf/basic/System.h	/^#define _aligned_malloc(/;"	d
_chdir	ogdf/basic/basic.cpp	/^#define _chdir /;"	d	file:
_find_small_cell	ogdf/internal/energybased/NMM.h	/^	int _find_small_cell;\/\/0 = iterative; 1= Aluru$/;"	m	class:ogdf::NMM
_grid_quotient	ogdf/internal/energybased/FruchtermanReingold.h	/^	int _grid_quotient;\/\/for coarsening the FrRe-grid$/;"	m	class:ogdf::FruchtermanReingold
_particles_in_leaves	ogdf/internal/energybased/NMM.h	/^	int _particles_in_leaves;\/\/max. number of particles for leaves of the quadtree$/;"	m	class:ogdf::NMM
_precision	ogdf/internal/energybased/NMM.h	/^	int _precision;  \/\/precision for p-term multipole expansion$/;"	m	class:ogdf::NMM
_tree_construction_way	ogdf/internal/energybased/NMM.h	/^	int _tree_construction_way;\/\/1 = pathwise;2 = subtreewise$/;"	m	class:ogdf::NMM
a_alignment	ogdf/fileformats/Ogml.h	/^		a_alignment,$/;"	e	enum:ogdf::Ogml::AttributeId
a_angle	ogdf/fileformats/Ogml.h	/^		a_angle,$/;"	e	enum:ogdf::Ogml::AttributeId
a_boolValue	ogdf/fileformats/Ogml.h	/^		a_boolValue,$/;"	e	enum:ogdf::Ogml::AttributeId
a_color	ogdf/fileformats/Ogml.h	/^		a_color,$/;"	e	enum:ogdf::Ogml::AttributeId
a_constraintType	ogdf/fileformats/Ogml.h	/^		a_constraintType,$/;"	e	enum:ogdf::Ogml::AttributeId
a_decoration	ogdf/fileformats/Ogml.h	/^		a_decoration,$/;"	e	enum:ogdf::Ogml::AttributeId
a_defaultEdgeTemplate	ogdf/fileformats/Ogml.h	/^		a_defaultEdgeTemplate,$/;"	e	enum:ogdf::Ogml::AttributeId
a_defaultLabelTemplate	ogdf/fileformats/Ogml.h	/^		a_defaultLabelTemplate,$/;"	e	enum:ogdf::Ogml::AttributeId
a_defaultNodeTemplate	ogdf/fileformats/Ogml.h	/^		a_defaultNodeTemplate,$/;"	e	enum:ogdf::Ogml::AttributeId
a_disabled	ogdf/fileformats/Ogml.h	/^		a_disabled,$/;"	e	enum:ogdf::Ogml::AttributeId
a_edgeIdRef	ogdf/fileformats/Ogml.h	/^		a_edgeIdRef,				\/\/!< attribute idRef of elements edgeRef, edgeStyle$/;"	e	enum:ogdf::Ogml::AttributeId
a_edgeStyleTemplateIdRef	ogdf/fileformats/Ogml.h	/^		a_edgeStyleTemplateIdRef,	\/\/!< attribute idRef of subelement template of element edgeStyle$/;"	e	enum:ogdf::Ogml::AttributeId
a_endpointIdRef	ogdf/fileformats/Ogml.h	/^		a_endpointIdRef,			\/\/!< attribute idRef of subelement endpoint of element segment$/;"	e	enum:ogdf::Ogml::AttributeId
a_family	ogdf/fileformats/Ogml.h	/^		a_family,$/;"	e	enum:ogdf::Ogml::AttributeId
a_height	ogdf/fileformats/Ogml.h	/^		a_height,$/;"	e	enum:ogdf::Ogml::AttributeId
a_id	ogdf/fileformats/Ogml.h	/^		a_id,						\/\/!< id attribute$/;"	e	enum:ogdf::Ogml::AttributeId
a_imageAlignment	ogdf/fileformats/Ogml.h	/^		a_imageAlignment,$/;"	e	enum:ogdf::Ogml::AttributeId
a_imageDrawLine	ogdf/fileformats/Ogml.h	/^		a_imageDrawLine,$/;"	e	enum:ogdf::Ogml::AttributeId
a_imageHeight	ogdf/fileformats/Ogml.h	/^		a_imageHeight,$/;"	e	enum:ogdf::Ogml::AttributeId
a_imageStyle	ogdf/fileformats/Ogml.h	/^		a_imageStyle,$/;"	e	enum:ogdf::Ogml::AttributeId
a_imageUri	ogdf/fileformats/Ogml.h	/^		a_imageUri,$/;"	e	enum:ogdf::Ogml::AttributeId
a_imageWidth	ogdf/fileformats/Ogml.h	/^		a_imageWidth,$/;"	e	enum:ogdf::Ogml::AttributeId
a_intValue	ogdf/fileformats/Ogml.h	/^		a_intValue,$/;"	e	enum:ogdf::Ogml::AttributeId
a_labelIdRef	ogdf/fileformats/Ogml.h	/^		a_labelIdRef,				\/\/!< attribute idRef of elements edgeRef, edgeStyle$/;"	e	enum:ogdf::Ogml::AttributeId
a_labelStyleTemplateIdRef	ogdf/fileformats/Ogml.h	/^		a_labelStyleTemplateIdRef,	\/\/!< attribute idRef of subelement template of element labelStyle$/;"	e	enum:ogdf::Ogml::AttributeId
a_nLineType	ogdf/fileformats/Ogml.h	/^		a_nLineType,				\/\/!< attribute type of subelement line of tag nodeStyleTemplate$/;"	e	enum:ogdf::Ogml::AttributeId
a_nShapeType	ogdf/fileformats/Ogml.h	/^		a_nShapeType,				\/\/!< attribute type of subelement shape of tag nodeStyleTemplate$/;"	e	enum:ogdf::Ogml::AttributeId
a_name	ogdf/fileformats/Ogml.h	/^		a_name,$/;"	e	enum:ogdf::Ogml::AttributeId
a_nodeIdRef	ogdf/fileformats/Ogml.h	/^		a_nodeIdRef,				\/\/!< attribute idRef of elements source, target, nodeRef, nodeStyle$/;"	e	enum:ogdf::Ogml::AttributeId
a_nodeStyleTemplateIdRef	ogdf/fileformats/Ogml.h	/^		a_nodeStyleTemplateIdRef,	\/\/!< attribute idRef of subelement template of element nodeStyle$/;"	e	enum:ogdf::Ogml::AttributeId
a_none	ogdf/fileformats/Ogml.h	/^		a_none = -1,$/;"	e	enum:ogdf::Ogml::AttributeId
a_numValue	ogdf/fileformats/Ogml.h	/^		a_numValue,$/;"	e	enum:ogdf::Ogml::AttributeId
a_pattern	ogdf/fileformats/Ogml.h	/^		a_pattern,$/;"	e	enum:ogdf::Ogml::AttributeId
a_patternColor	ogdf/fileformats/Ogml.h	/^		a_patternColor,$/;"	e	enum:ogdf::Ogml::AttributeId
a_rotation	ogdf/fileformats/Ogml.h	/^		a_rotation,$/;"	e	enum:ogdf::Ogml::AttributeId
a_size	ogdf/fileformats/Ogml.h	/^		a_size,$/;"	e	enum:ogdf::Ogml::AttributeId
a_sourceIdRef	ogdf/fileformats/Ogml.h	/^		a_sourceIdRef,				\/\/!< attribute idRef of element endpoint$/;"	e	enum:ogdf::Ogml::AttributeId
a_stretch	ogdf/fileformats/Ogml.h	/^		a_stretch,$/;"	e	enum:ogdf::Ogml::AttributeId
a_style	ogdf/fileformats/Ogml.h	/^		a_style,$/;"	e	enum:ogdf::Ogml::AttributeId
a_targetIdRef	ogdf/fileformats/Ogml.h	/^		a_targetIdRef,				\/\/!< attribute idRef of element endpoint$/;"	e	enum:ogdf::Ogml::AttributeId
a_transform	ogdf/fileformats/Ogml.h	/^		a_transform,$/;"	e	enum:ogdf::Ogml::AttributeId
a_type	ogdf/fileformats/Ogml.h	/^		a_type,						\/\/!< attribute type of subelements source-\/targetStyle of tag edgeStyleTemplate$/;"	e	enum:ogdf::Ogml::AttributeId
a_uri	ogdf/fileformats/Ogml.h	/^		a_uri,$/;"	e	enum:ogdf::Ogml::AttributeId
a_variant	ogdf/fileformats/Ogml.h	/^		a_variant,$/;"	e	enum:ogdf::Ogml::AttributeId
a_weight	ogdf/fileformats/Ogml.h	/^		a_weight,$/;"	e	enum:ogdf::Ogml::AttributeId
a_width	ogdf/fileformats/Ogml.h	/^		a_width,$/;"	e	enum:ogdf::Ogml::AttributeId
a_x	ogdf/fileformats/Ogml.h	/^		a_x,$/;"	e	enum:ogdf::Ogml::AttributeId
a_y	ogdf/fileformats/Ogml.h	/^		a_y,$/;"	e	enum:ogdf::Ogml::AttributeId
a_z	ogdf/fileformats/Ogml.h	/^		a_z,$/;"	e	enum:ogdf::Ogml::AttributeId
accept	ui/settingsdialog.cpp	/^void SettingsDialog::accept()$/;"	f	class:SettingsDialog
act_ptr	ogdf/internal/energybased/QuadTreeNM.h	/^	QuadTreeNodeNM* act_ptr;  \/\/points to the actual node$/;"	m	class:ogdf::QuadTreeNM
adapt_drawing_to_ideal_average_edgelength	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::adapt_drawing_to_ideal_average_edgelength($/;"	f	class:ogdf::FMMMLayout
addBlastHit	graph/debruijnnode.h	/^    void addBlastHit(BlastHit * newHit) {m_blastHits.push_back(newHit);}$/;"	f	class:DeBruijnNode
addComplementaryNodes	ui/mainwindow.cpp	/^std::vector<DeBruijnNode *> MainWindow::addComplementaryNodes(std::vector<DeBruijnNode *> nodes)$/;"	f	class:MainWindow
addConstraint	ogdf/basic/Constraints.h	/^	void addConstraint(Constraint *c) { c->listIt = m_List.pushBack(c); }$/;"	f	class:ogdf::GraphConstraints
addEdge	graph/debruijnnode.cpp	/^void DeBruijnNode::addEdge(DeBruijnEdge * edge)$/;"	f	class:DeBruijnNode
addGraphicsItemsToScene	graph/assemblygraph.cpp	/^void AssemblyGraph::addGraphicsItemsToScene(MyGraphicsScene * scene)$/;"	f	class:AssemblyGraph
addHit	blast/blastquery.h	/^    void addHit(QSharedPointer<BlastHit> newHit) {m_hits.push_back(newHit);}$/;"	f	class:BlastQuery
addNewHashElement	ogdf/fileformats/DinoXmlParser.h	/^		void addNewHashElement(const String &key, int info){$/;"	f	class:ogdf::DinoXmlParser
addNewlinesToSequence	graph/assemblygraph.cpp	/^QByteArray AssemblyGraph::addNewlinesToSequence(QByteArray sequence,$/;"	f	class:AssemblyGraph
addNode	graph/path.cpp	/^bool Path::addNode(DeBruijnNode * newNode, bool strandSpecific, bool makeCircularIfPossible)$/;"	f	class:Path
addNodeCenter2Bends	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::addNodeCenter2Bends(int mode)$/;"	f	class:ogdf::GraphAttributes
addNodeName	ui/pathspecifydialog.cpp	/^void PathSpecifyDialog::addNodeName(DeBruijnNode * node)$/;"	f	class:PathSpecifyDialog
addOgdfNode	graph/ogdfnode.h	/^    void addOgdfNode(ogdf::node newNode) {m_ogdfNodes.push_back(newNode);}$/;"	f	class:OgdfNode
addQuery	blast/blastqueries.cpp	/^void BlastQueries::addQuery(BlastQuery * newQuery)$/;"	f	class:BlastQueries
addSubGraph	ogdf/basic/GraphAttributes.h	/^	void addSubGraph(edge e, int n) {$/;"	f	class:ogdf::GraphAttributes
addToOgdfGraph	graph/debruijnedge.cpp	/^void DeBruijnEdge::addToOgdfGraph(ogdf::Graph * ogdfGraph, ogdf::EdgeArray<double> * edgeArray) const$/;"	f	class:DeBruijnEdge
addToOgdfGraph	graph/debruijnnode.cpp	/^void DeBruijnNode::addToOgdfGraph(ogdf::Graph * ogdfGraph, ogdf::GraphAttributes * graphAttributes,$/;"	f	class:DeBruijnNode
add_attr_rep_forces	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::add_attr_rep_forces($/;"	f	class:ogdf::FMMMLayout
add_local_expansion	ogdf/internal/energybased/NMM.cpp	/^void NMM::add_local_expansion(QuadTreeNodeNM* ptr_0, QuadTreeNodeNM* ptr_1)$/;"	f	class:ogdf::NMM
add_local_expansion_of_leaf	ogdf/internal/energybased/NMM.cpp	/^void NMM::add_local_expansion_of_leaf($/;"	f	class:ogdf::NMM
add_rep_forces	ogdf/internal/energybased/NMM.cpp	/^inline void NMM::add_rep_forces($/;"	f	class:ogdf::NMM
add_shifted_expansion_to_father_expansion	ogdf/internal/energybased/NMM.cpp	/^void NMM::add_shifted_expansion_to_father_expansion(QuadTreeNodeNM* act_ptr)$/;"	f	class:ogdf::NMM
add_shifted_local_exp_of_parent	ogdf/internal/energybased/NMM.cpp	/^void NMM::add_shifted_local_exp_of_parent(QuadTreeNodeNM* node_ptr)$/;"	f	class:ogdf::NMM
adjAvailable	ogdf/cluster/ClusterGraph.h	/^	void adjAvailable(bool val){ m_adjAvailable = val; }$/;"	f	class:ogdf::ClusterGraph
adjEdges	ogdf/basic/Graph_d.h	/^	void adjEdges(node v, EDGELIST &edges) const {$/;"	f	class:ogdf::Graph
adjEdges	ogdf/cluster/ClusterGraph.h	/^	void adjEdges(cluster c, EDGELIST &edges) const {$/;"	f	class:ogdf::ClusterGraph
adjEntries	ogdf/basic/Graph_d.h	/^	void adjEntries(node v, ADJLIST &entries) const {$/;"	f	class:ogdf::Graph
adjEntries	ogdf/cluster/ClusterGraph.h	/^	void adjEntries(cluster c, ADJLIST &entries) const {$/;"	f	class:ogdf::ClusterGraph
adjEntry	ogdf/basic/Graph_d.h	/^typedef AdjElement *adjEntry; \/\/!< The type of adjacency entries.$/;"	t	namespace:ogdf
adjEntryArrayTableSize	ogdf/basic/Graph_d.h	/^	int adjEntryArrayTableSize() const { return m_edgeArrayTableSize << 1; }$/;"	f	class:ogdf::Graph
adjSource	ogdf/basic/Graph_d.h	/^	adjEntry adjSource() const { return m_adjSrc; }$/;"	f	class:ogdf::EdgeElement
adjTarget	ogdf/basic/Graph_d.h	/^	adjEntry adjTarget() const { return m_adjTgt; }$/;"	f	class:ogdf::EdgeElement
adjustPostRepStrengthDynamically	ogdf/energybased/FMMMLayout.h	/^	bool adjustPostRepStrengthDynamically() const {$/;"	f	class:ogdf::FMMMLayout
adjustPostRepStrengthDynamically	ogdf/energybased/FMMMLayout.h	/^	void adjustPostRepStrengthDynamically(bool b) {$/;"	f	class:ogdf::FMMMLayout
afcExternalFace	ogdf/basic/exceptions.h	/^		afcExternalFace,     \/\/!< external face not correct$/;"	e	enum:ogdf::AlgorithmFailureCode
afcForbiddenCrossing	ogdf/basic/exceptions.h	/^		afcForbiddenCrossing,\/\/!< crossing forbidden but necessary$/;"	e	enum:ogdf::AlgorithmFailureCode
afcIllegalParameter	ogdf/basic/exceptions.h	/^		afcIllegalParameter, \/\/!< function parameter is illegal$/;"	e	enum:ogdf::AlgorithmFailureCode
afcLabel	ogdf/basic/exceptions.h	/^		afcLabel,            \/\/!< labelling failed$/;"	e	enum:ogdf::AlgorithmFailureCode
afcNoFlow	ogdf/basic/exceptions.h	/^		afcNoFlow,           \/\/!< min-cost flow could not find a legal flow$/;"	e	enum:ogdf::AlgorithmFailureCode
afcNoSolutionFound	ogdf/basic/exceptions.h	/^		afcNoSolutionFound,  \/\/!< couldn't solve the problem$/;"	e	enum:ogdf::AlgorithmFailureCode
afcSTOP	ogdf/basic/exceptions.h	/^		afcSTOP              \/\/ INSERT NEW CODES BEFORE afcSTOP!$/;"	e	enum:ogdf::AlgorithmFailureCode
afcSort	ogdf/basic/exceptions.h	/^		afcSort,             \/\/!< sequence not sorted$/;"	e	enum:ogdf::AlgorithmFailureCode
afcTimelimitExceeded	ogdf/basic/exceptions.h	/^		afcTimelimitExceeded,\/\/!< it took too long$/;"	e	enum:ogdf::AlgorithmFailureCode
afcUnknown	ogdf/basic/exceptions.h	/^		afcUnknown,$/;"	e	enum:ogdf::AlgorithmFailureCode
after	ogdf/basic/basic.h	/^	enum Direction { before, after };$/;"	e	enum:ogdf::Direction
afterMainWindowShow	ui/mainwindow.cpp	/^void MainWindow::afterMainWindowShow()$/;"	f	class:MainWindow
afterWindowShow	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::afterWindowShow()$/;"	f	class:BlastSearchDialog
alignedMemoryAlloc16	ogdf/basic/System.h	/^    static void *alignedMemoryAlloc16(size_t size) {$/;"	f	class:ogdf::System
alignedMemoryFree	ogdf/basic/System.h	/^	static void alignedMemoryFree(void *p) {$/;"	f	class:ogdf::System
allClusters	ogdf/cluster/ClusterGraph.h	/^	void allClusters(CLUSTERLIST &clusters) const {$/;"	f	class:ogdf::ClusterGraph
allEdges	ogdf/basic/Graph_d.h	/^	void allEdges(EDGELIST &edges) const {$/;"	f	class:ogdf::Graph
allNodes	ogdf/basic/Graph_d.h	/^	void allNodes(NODELIST &nodes) const {$/;"	f	class:ogdf::Graph
allNodesStartWith	graph/assemblygraph.cpp	/^bool AssemblyGraph::allNodesStartWith(QString start) const$/;"	f	class:AssemblyGraph
allocate	ogdf/internal/basic/MallocMemoryAllocator.h	/^	static void *allocate(size_t nBytes)$/;"	f	class:ogdf::MallocMemoryAllocator
allocate	ogdf/internal/basic/MallocMemoryAllocator.h	/^	static void *allocate(size_t nBytes, const char *, int) { return allocate(nBytes); }$/;"	f	class:ogdf::MallocMemoryAllocator
allocate	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^void *PoolMemoryAllocator::allocate(size_t nBytes) {$/;"	f	class:ogdf::PoolMemoryAllocator
allocateBlock	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^PoolMemoryAllocator::allocateBlock(__uint16 nBytes)$/;"	f	class:ogdf::PoolMemoryAllocator
allowedPositions	ogdf/energybased/FMMMLayout.h	/^	AllowedPositions allowedPositions() const { return m_allowedPositions; }$/;"	f	class:ogdf::FMMMLayout
allowedPositions	ogdf/energybased/FMMMLayout.h	/^	void allowedPositions(AllowedPositions ap) { m_allowedPositions = ap; }$/;"	f	class:ogdf::FMMMLayout
angle	ogdf/energybased/Edge.h	/^	double angle;$/;"	m	class:ogdf::Edge
angle	ogdf/energybased/FMMMLayout.cpp	/^double FMMMLayout::angle(DPoint& P, DPoint& Q, DPoint& R)$/;"	f	class:ogdf::FMMMLayout
angle	ogdf/energybased/Multilevel.cpp	/^double Multilevel::angle(DPoint& P, DPoint& Q, DPoint& R)$/;"	f	class:ogdf::Multilevel
angleBetweenTwoLines	ui/mygraphicsview.cpp	/^double MyGraphicsView::angleBetweenTwoLines(QPointF line1Start, QPointF line1End, QPointF line2Start, QPointF line2End)$/;"	f	class:MyGraphicsView
angle_1	ogdf/internal/energybased/NodeAttributes.h	/^	double angle_1;\/\/describes the sector where nodes that are not adjacent to other$/;"	m	class:ogdf::NodeAttributes
angle_2	ogdf/internal/energybased/NodeAttributes.h	/^	double angle_2;\/\/solar systems have to be placed$/;"	m	class:ogdf::NodeAttributes
antialiasing	program/settings.h	/^    bool antialiasing;$/;"	m	class:Settings
anyNodeDisplayText	graph/graphicsitemnode.cpp	/^bool GraphicsItemNode::anyNodeDisplayText()$/;"	f	class:GraphicsItemNode
apAll	ogdf/energybased/FMMMLayout.h	/^		apAll,$/;"	e	enum:ogdf::FMMMLayout::AllowedPositions
apExponent	ogdf/energybased/FMMMLayout.h	/^		apExponent$/;"	e	enum:ogdf::FMMMLayout::AllowedPositions
apInteger	ogdf/energybased/FMMMLayout.h	/^		apInteger,$/;"	e	enum:ogdf::FMMMLayout::AllowedPositions
appendAttributeObject	ogdf/fileformats/DinoXmlParser.cpp	/^	void DinoXmlParser::appendAttributeObject($/;"	f	class:ogdf::DinoXmlParser
appendSonTagObject	ogdf/fileformats/DinoXmlParser.cpp	/^	void DinoXmlParser::appendSonTagObject($/;"	f	class:ogdf::DinoXmlParser
appendToSequence	graph/debruijnnode.h	/^    void appendToSequence(QByteArray additionalSeq) {m_sequence.append(additionalSeq); m_length = m_sequence.length();}$/;"	f	class:DeBruijnNode
area_height	ogdf/energybased/MAARPacking.h	/^		double area_height; \/\/total height of the packing area$/;"	m	class:ogdf::MAARPacking
area_width	ogdf/energybased/MAARPacking.h	/^		double area_width;  \/\/total width of the packing area$/;"	m	class:ogdf::MAARPacking
arrowEdge	ogdf/basic/GraphAttributes.h	/^	EdgeArrow &arrowEdge(edge e) {$/;"	f	class:ogdf::GraphAttributes
arrowEdge	ogdf/basic/GraphAttributes.h	/^	const EdgeArrow &arrowEdge(edge e) const {$/;"	f	class:ogdf::GraphAttributes
arrowPredefKey	ogdf/fileformats/GmlParser.h	/^		sourcePredefKey, targetPredefKey, arrowPredefKey, LinePredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
arrowPredefKey	ogdf/fileformats/XmlParser.h	/^		sourcePredefKey, targetPredefKey, sensePredefKey, arrowPredefKey, LinePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
arrowheadSize	program/settings.h	/^    double arrowheadSize;$/;"	m	class:Settings
arrowheadsInSingleMode	program/settings.h	/^    double arrowheadsInSingleMode;$/;"	m	class:Settings
asString	program/scinot.cpp	/^QString SciNot::asString(bool alwaysInSciNot) const$/;"	f	class:SciNot
assign	ogdf/basic/Graph.cpp	/^void Graph::assign(const Graph &G, NodeArray<node> &mapNode,$/;"	f	class:ogdf::Graph
assignNode	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::assignNode(node v, cluster c)$/;"	f	class:ogdf::ClusterGraph
association	ogdf/basic/Graph_d.h	/^		association = 0,$/;"	e	enum:ogdf::Graph::EdgeType
associationClass	ogdf/basic/Graph_d.h	/^		associationClass$/;"	e	enum:ogdf::Graph::NodeType
attemptToLoadSequencesFromFasta	graph/assemblygraph.cpp	/^bool AssemblyGraph::attemptToLoadSequencesFromFasta()$/;"	f	class:AssemblyGraph
attributeValue	ogdf/fileformats/DinoXmlScanner.h	/^		attributeValue,		\/\/\/< a sequence of characters, digits, minus - and dot .$/;"	e	enum:ogdf::XmlToken
attributedClusterRead	ogdf/fileformats/GmlParser.cpp	/^bool GmlParser::attributedClusterRead($/;"	f	class:ogdf::GmlParser
attributes	ogdf/basic/GraphAttributes.h	/^	long attributes() const {$/;"	f	class:ogdf::GraphAttributes
autoDepthValue	program/settings.h	/^    bool autoDepthValue;$/;"	m	class:Settings
autoDetermineAllEdgesExactOverlap	graph/assemblygraph.cpp	/^void AssemblyGraph::autoDetermineAllEdgesExactOverlap()$/;"	f	class:AssemblyGraph
autoDetermineExactOverlap	graph/debruijnedge.cpp	/^void DeBruijnEdge::autoDetermineExactOverlap()$/;"	f	class:DeBruijnEdge
autoNodeLengthPerMegabase	program/settings.h	/^    double autoNodeLengthPerMegabase;$/;"	m	class:Settings
autoSetSequenceType	blast/blastquery.cpp	/^void BlastQuery::autoSetSequenceType()$/;"	f	class:BlastQuery
av_any	ogdf/fileformats/Ogml.h	/^		av_any = 0,					\/\/!< for any attributeValue$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_arrow	ogdf/fileformats/Ogml.h	/^		av_arrow,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_blink	ogdf/fileformats/Ogml.h	/^		av_blink,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bold	ogdf/fileformats/Ogml.h	/^		av_bold,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bolder	ogdf/fileformats/Ogml.h	/^		av_bolder,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bool	ogdf/fileformats/Ogml.h	/^		av_bool,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bottomCenter	ogdf/fileformats/Ogml.h	/^		av_bottomCenter,			\/\/!< image-alignemnt$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bottomLeft	ogdf/fileformats/Ogml.h	/^		av_bottomLeft,				\/\/!< image-alignemnt$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bottomRight	ogdf/fileformats/Ogml.h	/^		av_bottomRight,				\/\/!< image-alignemnt$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_box	ogdf/fileformats/Ogml.h	/^		av_box,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpBackwardDiagonal	ogdf/fileformats/Ogml.h	/^		av_bpBackwardDiagonal,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpCross	ogdf/fileformats/Ogml.h	/^		av_bpCross,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpDense1	ogdf/fileformats/Ogml.h	/^		av_bpDense1,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpDense2	ogdf/fileformats/Ogml.h	/^		av_bpDense2,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpDense3	ogdf/fileformats/Ogml.h	/^		av_bpDense3,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpDense4	ogdf/fileformats/Ogml.h	/^		av_bpDense4,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpDense5	ogdf/fileformats/Ogml.h	/^		av_bpDense5,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpDense6	ogdf/fileformats/Ogml.h	/^		av_bpDense6,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpDense7	ogdf/fileformats/Ogml.h	/^		av_bpDense7,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpDiagonalCross	ogdf/fileformats/Ogml.h	/^		av_bpDiagonalCross,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpForwardDiagonal	ogdf/fileformats/Ogml.h	/^		av_bpForwardDiagonal,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpHorizontal	ogdf/fileformats/Ogml.h	/^		av_bpHorizontal,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpNone	ogdf/fileformats/Ogml.h	/^		av_bpNone,					\/\/!< values for node patterns$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpSolid	ogdf/fileformats/Ogml.h	/^		av_bpSolid,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_bpVertical	ogdf/fileformats/Ogml.h	/^		av_bpVertical,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_capitalize	ogdf/fileformats/Ogml.h	/^		av_capitalize,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_center	ogdf/fileformats/Ogml.h	/^		av_center,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_centerLeft	ogdf/fileformats/Ogml.h	/^		av_centerLeft,				\/\/!< image-alignemnt$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_centerRight	ogdf/fileformats/Ogml.h	/^		av_centerRight,				\/\/!< image-alignemnt$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_checked	ogdf/fileformats/Ogml.h	/^		av_checked,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_circle	ogdf/fileformats/Ogml.h	/^		av_circle,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_condensed	ogdf/fileformats/Ogml.h	/^		av_condensed,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_constraintAlignment	ogdf/fileformats/Ogml.h	/^		av_constraintAlignment,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_constraintAnchor	ogdf/fileformats/Ogml.h	/^		av_constraintAnchor,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_constraintSequence	ogdf/fileformats/Ogml.h	/^		av_constraintSequence,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_cursive	ogdf/fileformats/Ogml.h	/^		av_cursive,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_dashed	ogdf/fileformats/Ogml.h	/^		av_dashed,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_diamond	ogdf/fileformats/Ogml.h	/^		av_diamond,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_dotted	ogdf/fileformats/Ogml.h	/^		av_dotted,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_double	ogdf/fileformats/Ogml.h	/^		av_double,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_doubleSlash	ogdf/fileformats/Ogml.h	/^		av_doubleSlash,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_edgeIdRef	ogdf/fileformats/Ogml.h	/^		av_edgeIdRef,				\/\/!< attribute idRef of elements edgeRef, edgeStyle$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_edgeStyleTemplateIdRef	ogdf/fileformats/Ogml.h	/^		av_edgeStyleTemplateIdRef,	\/\/!< attribute idRef of subelement template of element edgeStyle$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_ellipse	ogdf/fileformats/Ogml.h	/^		av_ellipse,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_esDash	ogdf/fileformats/Ogml.h	/^		av_esDash,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_esDashdot	ogdf/fileformats/Ogml.h	/^		av_esDashdot,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_esDashdotdot	ogdf/fileformats/Ogml.h	/^		av_esDashdotdot,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_esDot	ogdf/fileformats/Ogml.h	/^		av_esDot,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_esNoPen	ogdf/fileformats/Ogml.h	/^		av_esNoPen,					\/\/!< values for line style$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_esSolid	ogdf/fileformats/Ogml.h	/^		av_esSolid,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_expanded	ogdf/fileformats/Ogml.h	/^		av_expanded,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_extraCondensed	ogdf/fileformats/Ogml.h	/^		av_extraCondensed,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_extraExpanded	ogdf/fileformats/Ogml.h	/^		av_extraExpanded,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_fantasy	ogdf/fileformats/Ogml.h	/^		av_fantasy,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_filledBox	ogdf/fileformats/Ogml.h	/^		av_filledBox,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_filledCircle	ogdf/fileformats/Ogml.h	/^		av_filledCircle,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_filledDiamond	ogdf/fileformats/Ogml.h	/^		av_filledDiamond,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_filledHalfBox	ogdf/fileformats/Ogml.h	/^		av_filledHalfBox,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_filledHalfCircle	ogdf/fileformats/Ogml.h	/^		av_filledHalfCircle,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_filledHalfDiamond	ogdf/fileformats/Ogml.h	/^		av_filledHalfDiamond,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_filledHalfRhomb	ogdf/fileformats/Ogml.h	/^		av_filledHalfRhomb,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_filledRhomb	ogdf/fileformats/Ogml.h	/^		av_filledRhomb,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_fixScale	ogdf/fileformats/Ogml.h	/^		av_fixScale,				\/\/!< image-style$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_freeScale	ogdf/fileformats/Ogml.h	/^		av_freeScale,				\/\/!< image-style$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_groove	ogdf/fileformats/Ogml.h	/^		av_groove,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_halfBox	ogdf/fileformats/Ogml.h	/^		av_halfBox,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_halfCircle	ogdf/fileformats/Ogml.h	/^		av_halfCircle,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_halfDiamond	ogdf/fileformats/Ogml.h	/^		av_halfDiamond,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_halfRhomb	ogdf/fileformats/Ogml.h	/^		av_halfRhomb,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_hex	ogdf/fileformats/Ogml.h	/^		av_hex,						\/\/!< hexadecimal value$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_hexagon	ogdf/fileformats/Ogml.h	/^		av_hexagon,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_id	ogdf/fileformats/Ogml.h	/^		av_id,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_image	ogdf/fileformats/Ogml.h	/^		av_image,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_inset	ogdf/fileformats/Ogml.h	/^		av_inset,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_int	ogdf/fileformats/Ogml.h	/^		av_int,						\/\/!< integer value$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_italic	ogdf/fileformats/Ogml.h	/^		av_italic,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_justify	ogdf/fileformats/Ogml.h	/^		av_justify,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_lParallelogram	ogdf/fileformats/Ogml.h	/^		av_lParallelogram,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_labelIdRef	ogdf/fileformats/Ogml.h	/^		av_labelIdRef,				\/\/!< attribute idRef of elements edgeRef, edgeStyle$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_labelStyleTemplateIdRef	ogdf/fileformats/Ogml.h	/^		av_labelStyleTemplateIdRef,	\/\/!< attribute idRef of subelement template of element labelStyle$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_left	ogdf/fileformats/Ogml.h	/^		av_left,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_lighter	ogdf/fileformats/Ogml.h	/^		av_lighter,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_line	ogdf/fileformats/Ogml.h	/^		av_line,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_lineThrough	ogdf/fileformats/Ogml.h	/^		av_lineThrough,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_lowercase	ogdf/fileformats/Ogml.h	/^		av_lowercase,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_monospace	ogdf/fileformats/Ogml.h	/^		av_monospace,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_narrower	ogdf/fileformats/Ogml.h	/^		av_narrower,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_nodeIdRef	ogdf/fileformats/Ogml.h	/^		av_nodeIdRef,				\/\/!< attribute idRef of elements source, target, nodeRef, nodeStyle$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_nodeStyleTemplateIdRef	ogdf/fileformats/Ogml.h	/^		av_nodeStyleTemplateIdRef,	\/\/!< attribute idRef of subelement template of element nodeStyle$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_none	ogdf/fileformats/Ogml.h	/^		av_none,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_normal	ogdf/fileformats/Ogml.h	/^		av_normal,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_num	ogdf/fileformats/Ogml.h	/^		av_num,						\/\/!< real value$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_oblique	ogdf/fileformats/Ogml.h	/^		av_oblique,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_oct	ogdf/fileformats/Ogml.h	/^		av_oct,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_octagon	ogdf/fileformats/Ogml.h	/^		av_octagon,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_outset	ogdf/fileformats/Ogml.h	/^		av_outset,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_overline	ogdf/fileformats/Ogml.h	/^		av_overline,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_pentagon	ogdf/fileformats/Ogml.h	/^		av_pentagon,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_pointIdRef	ogdf/fileformats/Ogml.h	/^		av_pointIdRef,				\/\/!< attribute idRef of subelement endpoint of element segment$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_rParallelogram	ogdf/fileformats/Ogml.h	/^		av_rParallelogram,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_rect	ogdf/fileformats/Ogml.h	/^		av_rect,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_rectSimple	ogdf/fileformats/Ogml.h	/^		av_rectSimple,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_rhomb	ogdf/fileformats/Ogml.h	/^		av_rhomb,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_ridge	ogdf/fileformats/Ogml.h	/^		av_ridge,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_right	ogdf/fileformats/Ogml.h	/^		av_right,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_sansSerif	ogdf/fileformats/Ogml.h	/^		av_sansSerif,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_semiCondensed	ogdf/fileformats/Ogml.h	/^		av_semiCondensed,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_semiExpanded	ogdf/fileformats/Ogml.h	/^		av_semiExpanded,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_serif	ogdf/fileformats/Ogml.h	/^		av_serif,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_slash	ogdf/fileformats/Ogml.h	/^		av_slash,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_smallCaps	ogdf/fileformats/Ogml.h	/^		av_smallCaps,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_smurf	ogdf/fileformats/Ogml.h	/^		av_smurf,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_solid	ogdf/fileformats/Ogml.h	/^		av_solid,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_sourceIdRef	ogdf/fileformats/Ogml.h	/^		av_sourceIdRef,				\/\/!< attribute idRef of element endpoint$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_string	ogdf/fileformats/Ogml.h	/^		av_string,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_striped	ogdf/fileformats/Ogml.h	/^		av_striped,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_targetIdRef	ogdf/fileformats/Ogml.h	/^		av_targetIdRef,				\/\/!< attribute idRef of element endpoint$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_topCenter	ogdf/fileformats/Ogml.h	/^		av_topCenter,				\/\/!< image-alignemnt$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_topLeft	ogdf/fileformats/Ogml.h	/^		av_topLeft,					\/\/!< image-alignemnt$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_topRight	ogdf/fileformats/Ogml.h	/^		av_topRight,				\/\/!< image-alignemnt$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_trapeze	ogdf/fileformats/Ogml.h	/^		av_trapeze,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_triangle	ogdf/fileformats/Ogml.h	/^		av_triangle,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_triple	ogdf/fileformats/Ogml.h	/^		av_triple,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_ultraCondensed	ogdf/fileformats/Ogml.h	/^		av_ultraCondensed,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_ultraExpanded	ogdf/fileformats/Ogml.h	/^		av_ultraExpanded,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_umlClass	ogdf/fileformats/Ogml.h	/^		av_umlClass,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_underline	ogdf/fileformats/Ogml.h	/^		av_underline,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_upTrapeze	ogdf/fileformats/Ogml.h	/^		av_upTrapeze,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_uppercase	ogdf/fileformats/Ogml.h	/^		av_uppercase,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_uri	ogdf/fileformats/Ogml.h	/^		av_uri,$/;"	e	enum:ogdf::Ogml::AttributeValueId
av_wider	ogdf/fileformats/Ogml.h	/^		av_wider,$/;"	e	enum:ogdf::Ogml::AttributeValueId
availablePhysicalMemory	ogdf/basic/System.cpp	/^long long System::availablePhysicalMemory()$/;"	f	class:ogdf::System
averageNodeWidth	program/settings.h	/^    FloatSetting averageNodeWidth;$/;"	m	class:Settings
averageRadius	ogdf/internal/energybased/MultilevelGraph.h	/^	double averageRadius() const { return m_avgRadius;}$/;"	f	class:ogdf::MultilevelGraph
average_ideal_edgelength	ogdf/energybased/FMMMLayout.h	/^	double average_ideal_edgelength; \/\/!< Measured from center to center.$/;"	m	class:ogdf::FMMMLayout
back	ogdf/basic/List.h	/^	E &back() { return ListPure<E>::back(); }$/;"	f	class:ogdf::List
back	ogdf/basic/List.h	/^	E &back() {$/;"	f	class:ogdf::ListPure
back	ogdf/basic/List.h	/^	const E &back() const { return ListPure<E>::back(); }$/;"	f	class:ogdf::List
back	ogdf/basic/List.h	/^	const E &back() const {$/;"	f	class:ogdf::ListPure
back	ogdf/basic/SList.h	/^	E &back() { return SListPure<E>::back(); }$/;"	f	class:ogdf::SList
back	ogdf/basic/SList.h	/^	E &back() {$/;"	f	class:ogdf::SListPure
back	ogdf/basic/SList.h	/^	const E &back() const { return SListPure<E>::back(); }$/;"	f	class:ogdf::SList
back	ogdf/basic/SList.h	/^	const E &back() const {$/;"	f	class:ogdf::SListPure
bandageImage	command_line/image.cpp	/^int bandageImage(QStringList arguments)$/;"	f
bandageInfo	command_line/info.cpp	/^int bandageInfo(QStringList arguments)$/;"	f
bandageInfo	tests/bandagetests.cpp	/^void BandageTests::bandageInfo()$/;"	f	class:BandageTests
bandageLoad	command_line/load.cpp	/^int bandageLoad(QStringList arguments)$/;"	f
bandageQueryPaths	command_line/querypaths.cpp	/^int bandageQueryPaths(QStringList arguments)$/;"	f
bandageReduce	command_line/reduce.cpp	/^int bandageReduce(QStringList arguments)$/;"	f
before	ogdf/basic/basic.h	/^	enum Direction { before, after };$/;"	e	enum:ogdf::Direction
begin	ogdf/basic/Array.h	/^	E *begin() { return m_pStart; }$/;"	f	class:ogdf::Array
begin	ogdf/basic/Array.h	/^	const E *begin() const { return m_pStart; }$/;"	f	class:ogdf::Array
begin	ogdf/basic/Graph_d.h	/^	T *begin () const { return (T *)m_head; }$/;"	f	class:ogdf::GraphList
begin	ogdf/basic/HashArray.h	/^	HashConstIterator<I,E,H> begin() const { return Hashing<I,E,H>::begin(); }$/;"	f	class:ogdf::HashArray
begin	ogdf/basic/Hashing.h	/^inline HashConstIterator<K,I,H> Hashing<K,I,H>::begin() const$/;"	f	class:ogdf::Hashing
begin	ogdf/basic/List.h	/^	ListIterator<E> begin() { return ListPure<E>::begin(); }$/;"	f	class:ogdf::List
begin	ogdf/basic/List.h	/^	ListIterator<E> begin() { return m_head; }$/;"	f	class:ogdf::ListPure
begin	ogdf/basic/List.h	/^	const ListConstIterator<E> begin() const { return ListPure<E>::begin(); }$/;"	f	class:ogdf::List
begin	ogdf/basic/List.h	/^	const ListConstIterator<E> begin() const { return m_head; }$/;"	f	class:ogdf::ListPure
begin	ogdf/basic/SList.h	/^	SListConstIterator<E> begin() const { return m_head; }$/;"	f	class:ogdf::SListPure
begin	ogdf/basic/SList.h	/^	SListIterator<E> begin() { return SListPure<E>::begin(); }$/;"	f	class:ogdf::SList
begin	ogdf/basic/SList.h	/^	SListIterator<E> begin() { return m_head; }$/;"	f	class:ogdf::SListPure
begin	ogdf/basic/SList.h	/^	const SListConstIterator<E> begin() const { return SListPure<E>::begin(); }$/;"	f	class:ogdf::SList
bends	ogdf/basic/GraphAttributes.h	/^	DPolyline &bends(edge e) {$/;"	f	class:ogdf::GraphAttributes
bends	ogdf/basic/GraphAttributes.h	/^	const DPolyline &bends(edge e) const {$/;"	f	class:ogdf::GraphAttributes
better_tipp_rectangle_in_new_row	ogdf/energybased/MAARPacking.cpp	/^bool MAARPacking::better_tipp_rectangle_in_new_row($/;"	f	class:ogdf::MAARPacking
better_tipp_rectangle_in_this_row	ogdf/energybased/MAARPacking.cpp	/^bool MAARPacking::better_tipp_rectangle_in_this_row($/;"	f	class:ogdf::MAARPacking
biconnectedComponents	ogdf/basic/simple_graph_alg.cpp	/^int biconnectedComponents(const Graph &G, EdgeArray<int> &component)$/;"	f	namespace:ogdf
binarySearch	ogdf/basic/Array.h	/^	inline int binarySearch (const E& x) const {$/;"	f	class:ogdf::Array
binarySearch	ogdf/basic/Array.h	/^	int binarySearch(const E& e, const COMPARER &comp) const {$/;"	f	class:ogdf::Array
binko	ogdf/internal/energybased/NMM.cpp	/^inline double NMM::binko(int n, int k)$/;"	f	class:ogdf::NMM
binomial	ogdf/basic/Math.cpp	/^	int Math::binomial(int n, int k)$/;"	f	class:ogdf::Math
binomial_d	ogdf/basic/Math.cpp	/^	double Math::binomial_d(int n, int k)$/;"	f	class:ogdf::Math
blastAlignmentLengthFilter	program/settings.h	/^    IntSetting blastAlignmentLengthFilter;$/;"	m	class:Settings
blastBitScoreFilter	program/settings.h	/^    FloatSetting blastBitScoreFilter;$/;"	m	class:Settings
blastChanged	ui/mainwindow.cpp	/^void MainWindow::blastChanged()$/;"	f	class:MainWindow
blastDatabaseBuildFinished	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::blastDatabaseBuildFinished(QString error)$/;"	f	class:BlastSearchDialog
blastEValueFilter	program/settings.h	/^    SciNotSetting blastEValueFilter;$/;"	m	class:Settings
blastIdentityFilter	program/settings.h	/^    FloatSetting blastIdentityFilter;$/;"	m	class:Settings
blastQueryChanged	blast/blastsearch.cpp	/^void BlastSearch::blastQueryChanged(QString queryName)$/;"	f	class:BlastSearch
blastQueryChanged	ui/mainwindow.cpp	/^void MainWindow::blastQueryChanged()$/;"	f	class:MainWindow
blastQueryCoverageFilter	program/settings.h	/^    FloatSetting blastQueryCoverageFilter;$/;"	m	class:Settings
blastQueryFilename	program/settings.h	/^    QString blastQueryFilename;$/;"	m	class:Settings
blastQueryPaths	tests/bandagetests.cpp	/^void BandageTests::blastQueryPaths()$/;"	f	class:BandageTests
blastRainbowPartsPerQuery	program/settings.h	/^    int blastRainbowPartsPerQuery;$/;"	m	class:Settings
blastSearch	tests/bandagetests.cpp	/^void BandageTests::blastSearch()$/;"	f	class:BandageTests
blastSearchFilters	tests/bandagetests.cpp	/^void BandageTests::blastSearchFilters()$/;"	f	class:BandageTests
blastSearchParameters	program/settings.h	/^    QString blastSearchParameters;$/;"	m	class:Settings
bordering	ogdf/internal/energybased/NMM.cpp	/^bool NMM::bordering(QuadTreeNodeNM* node_1_ptr,QuadTreeNodeNM* node_2_ptr)$/;"	f	class:ogdf::NMM
both	ogdf/basic/GraphAttributes.h	/^		both, \/\/!< edge arrow at target and source node of the edge$/;"	e	enum:ogdf::GraphAttributes::EdgeArrow
bottomLine	ogdf/basic/geometry.h	/^	const DLine bottomLine() const {$/;"	f	class:ogdf::DRect
bottomToTop	ogdf/basic/geometry.h	/^	bottomToTop, \/\/!< Edges are oriented from bottom to top.$/;"	e	enum:ogdf::Orientation
boundingBox	ogdf/basic/GraphAttributes.cpp	/^const DRect GraphAttributes::boundingBox() const$/;"	f	class:ogdf::GraphAttributes
boundingBox	ogdf/cluster/ClusterGraphAttributes.cpp	/^const DRect ClusterGraphAttributes::boundingBox() const$/;"	f	class:ogdf::ClusterGraphAttributes
boundingRect	graph/graphicsitemnode.cpp	/^QRectF GraphicsItemNode::boundingRect() const$/;"	f	class:GraphicsItemNode
boxlength	ogdf/energybased/FMMMLayout.h	/^	double boxlength; \/\/!< Holds the length of the quadratic comput. box.$/;"	m	class:ogdf::FMMMLayout
boxlength	ogdf/internal/energybased/FruchtermanReingold.h	/^	double boxlength;  \/\/length of drawing box$/;"	m	class:ogdf::FruchtermanReingold
boxlength	ogdf/internal/energybased/NMM.h	/^	double boxlength;\/\/length of drawing box$/;"	m	class:ogdf::NMM
bpCross	ogdf/basic/GraphAttributes.h	/^		bpCross = 11,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
bpDense1	ogdf/basic/GraphAttributes.h	/^		bpDense1 = 2,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
bpDense2	ogdf/basic/GraphAttributes.h	/^		bpDense2 = 3,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
bpDense3	ogdf/basic/GraphAttributes.h	/^		bpDense3 = 4,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
bpDense4	ogdf/basic/GraphAttributes.h	/^		bpDense4 = 5,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
bpDense5	ogdf/basic/GraphAttributes.h	/^		bpDense5 = 6,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
bpDense6	ogdf/basic/GraphAttributes.h	/^		bpDense6 = 7,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
bpDense7	ogdf/basic/GraphAttributes.h	/^		bpDense7 = 8,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
bpHorizontal	ogdf/basic/GraphAttributes.h	/^		bpHorizontal = 9,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
bpNone	ogdf/basic/GraphAttributes.h	/^		bpNone = 0,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
bpSolid	ogdf/basic/GraphAttributes.h	/^		bpSolid = 1,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
bpVertical	ogdf/basic/GraphAttributes.h	/^		bpVertical = 10,$/;"	e	enum:ogdf::GraphAttributes::BrushPattern
bringSelectedNodesToFront	ui/mainwindow.cpp	/^void MainWindow::bringSelectedNodesToFront()$/;"	f	class:MainWindow
brushPatternToOGML	ogdf/basic/GraphAttributes.cpp	/^const char * GraphAttributes::brushPatternToOGML(const GraphAttributes::BrushPattern & brushPattern)$/;"	f	class:ogdf::GraphAttributes
bucketSort	ogdf/basic/List.h	/^	void bucketSort(int l, int h, BucketFunc<E> &f) {$/;"	f	class:ogdf::List
bucketSort	ogdf/basic/List.h	/^void ListPure<E>::bucketSort(int l, int h, BucketFunc<E> &f)$/;"	f	class:ogdf::ListPure
bucketSort	ogdf/basic/SList.h	/^	void bucketSort(BucketFunc<E> &f) {$/;"	f	class:ogdf::SList
bucketSort	ogdf/basic/SList.h	/^	void bucketSort(int l, int h, BucketFunc<E> &f) {$/;"	f	class:ogdf::SList
bucketSort	ogdf/basic/SList.h	/^void SListPure<E>::bucketSort(BucketFunc<E> &f)$/;"	f	class:ogdf::SListPure
bucketSort	ogdf/basic/SList.h	/^void SListPure<E>::bucketSort(int l, int h, BucketFunc<E> &f)$/;"	f	class:ogdf::SListPure
bucketSort	ogdf/basic/SList.h	/^void bucketSort(Array<E> &a, int min, int max, BucketFunc<E> &f)$/;"	f	namespace:ogdf
buildAttributedClusterGraph	ogdf/fileformats/OgmlParser.cpp	/^bool OgmlParser::buildAttributedClusterGraph($/;"	f	class:ogdf::OgmlParser
buildBlastDatabase	blast/buildblastdatabaseworker.cpp	/^void BuildBlastDatabaseWorker::buildBlastDatabase()$/;"	f	class:BuildBlastDatabaseWorker
buildBlastDatabase	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::buildBlastDatabase(bool separateThread)$/;"	f	class:BlastSearchDialog
buildBlastDatabaseCancelled	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::buildBlastDatabaseCancelled()$/;"	f	class:BlastSearchDialog
buildBlastDatabaseInThread	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::buildBlastDatabaseInThread()$/;"	f	class:BlastSearchDialog
buildCluster	ogdf/fileformats/OgmlParser.cpp	/^bool OgmlParser::buildCluster($/;"	f	class:ogdf::OgmlParser
buildClusterRecursive	ogdf/fileformats/OgmlParser.cpp	/^bool OgmlParser::buildClusterRecursive($/;"	f	class:ogdf::OgmlParser
buildDeBruijnGraphFromAsqg	graph/assemblygraph.cpp	/^int AssemblyGraph::buildDeBruijnGraphFromAsqg(QString fullFileName)$/;"	f	class:AssemblyGraph
buildDeBruijnGraphFromFastg	graph/assemblygraph.cpp	/^void AssemblyGraph::buildDeBruijnGraphFromFastg(QString fullFileName)$/;"	f	class:AssemblyGraph
buildDeBruijnGraphFromGfa	graph/assemblygraph.cpp	/^void AssemblyGraph::buildDeBruijnGraphFromGfa(QString fullFileName, bool *unsupportedCigar,$/;"	f	class:AssemblyGraph
buildDeBruijnGraphFromLastGraph	graph/assemblygraph.cpp	/^void AssemblyGraph::buildDeBruijnGraphFromLastGraph(QString fullFileName)$/;"	f	class:AssemblyGraph
buildDeBruijnGraphFromPlainFasta	graph/assemblygraph.cpp	/^void AssemblyGraph::buildDeBruijnGraphFromPlainFasta(QString fullFileName)$/;"	f	class:AssemblyGraph
buildDeBruijnGraphFromTrinityFasta	graph/assemblygraph.cpp	/^void AssemblyGraph::buildDeBruijnGraphFromTrinityFasta(QString fullFileName)$/;"	f	class:AssemblyGraph
buildFromOgml	ogdf/basic/Constraint.cpp	/^bool Constraint::buildFromOgml(XmlTagObject* \/*constraintTag*\/, Hashing <String, node> * \/*nodes*\/)$/;"	f	class:ogdf::Constraint
buildGraph	ogdf/fileformats/OgmlParser.cpp	/^bool OgmlParser::buildGraph(Graph &G)$/;"	f	class:ogdf::OgmlParser
buildHashTables	ogdf/fileformats/OgmlParser.cpp	/^void OgmlParser::buildHashTables()$/;"	f	class:ogdf::OgmlParser
buildHitsFromBlastOutput	blast/blastsearch.cpp	/^void BlastSearch::buildHitsFromBlastOutput()$/;"	f	class:BlastSearch
buildOgdfGraphFromNodesAndEdges	graph/assemblygraph.cpp	/^void AssemblyGraph::buildOgdfGraphFromNodesAndEdges(std::vector<DeBruijnNode *> startingNodes, int nodeDistance)$/;"	f	class:AssemblyGraph
buildPartialHighlightPath	graph/graphicsitemnode.cpp	/^QPainterPath GraphicsItemNode::buildPartialHighlightPath(double startFraction,$/;"	f	class:GraphicsItemNode
buildUnambiguousPathFromNodes	graph/path.cpp	/^void Path::buildUnambiguousPathFromNodes(QList<DeBruijnNode *> nodes,$/;"	f	class:Path
build_up_red_quad_tree_path_by_path	ogdf/internal/energybased/NMM.cpp	/^void NMM::build_up_red_quad_tree_path_by_path($/;"	f	class:ogdf::NMM
build_up_red_quad_tree_subtree_by_subtree	ogdf/internal/energybased/NMM.cpp	/^void NMM::build_up_red_quad_tree_subtree_by_subtree($/;"	f	class:ogdf::NMM
build_up_root_node	ogdf/internal/energybased/NMM.cpp	/^void NMM::build_up_root_node($/;"	f	class:ogdf::NMM
build_up_root_vertex	ogdf/internal/energybased/NMM.cpp	/^void NMM::build_up_root_vertex(const Graph&G, QuadTreeNM& T)$/;"	f	class:ogdf::NMM
build_up_sorted_subLists	ogdf/internal/energybased/NMM.cpp	/^void NMM::build_up_sorted_subLists($/;"	f	class:ogdf::NMM
cBegin	ogdf/cluster/ClusterGraph.h	/^	ListConstIterator<ClusterElement*> cBegin() const{ return m_children.begin();}$/;"	f	class:ogdf::ClusterElement
cCount	ogdf/cluster/ClusterGraph.h	/^	int cCount(){ return m_children.size();}$/;"	f	class:ogdf::ClusterElement
c_maxLengthPerLine	ogdf/basic/GraphAttributes.cpp	/^const int c_maxLengthPerLine = 200;$/;"	m	namespace:ogdf	file:
c_maxLineLength	ogdf/fileformats/DinoLineBuffer.cpp	/^	const int DinoLineBuffer::c_maxLineLength = 200;$/;"	m	class:ogdf::DinoLineBuffer	file:
c_maxLineLength	ogdf/fileformats/DinoLineBuffer.h	/^		const static int c_maxLineLength;$/;"	m	class:ogdf::DinoLineBuffer
c_maxNoOfLines	ogdf/fileformats/DinoLineBuffer.cpp	/^	const int DinoLineBuffer::c_maxNoOfLines = 20;$/;"	m	class:ogdf::DinoLineBuffer	file:
c_maxNoOfLines	ogdf/fileformats/DinoLineBuffer.h	/^		const static int c_maxNoOfLines;$/;"	m	class:ogdf::DinoLineBuffer
c_maxStringLength	ogdf/fileformats/DinoLineBuffer.cpp	/^	const int DinoLineBuffer::c_maxStringLength = OGDF_STRING_BUFFER_SIZE;$/;"	m	class:ogdf::DinoLineBuffer	file:
c_maxStringLength	ogdf/fileformats/DinoLineBuffer.h	/^		const static int c_maxStringLength;$/;"	m	class:ogdf::DinoLineBuffer
cacheLineBytes	ogdf/basic/System.h	/^	static int cacheLineBytes() { return s_cacheLine; }$/;"	f	class:ogdf::System
cacheSizeKBytes	ogdf/basic/System.h	/^	static int cacheSizeKBytes() { return s_cacheSize; }$/;"	f	class:ogdf::System
calculateAndSetPath	graph/graphicsitemedge.cpp	/^void GraphicsItemEdge::calculateAndSetPath()$/;"	f	class:GraphicsItemEdge
calculate_approx_repulsive_forces	ogdf/internal/energybased/FruchtermanReingold.cpp	/^void FruchtermanReingold::calculate_approx_repulsive_forces($/;"	f	class:ogdf::FruchtermanReingold
calculate_aspect_ratio_area	ogdf/energybased/MAARPacking.cpp	/^inline double MAARPacking::calculate_aspect_ratio_area($/;"	f	class:ogdf::MAARPacking
calculate_attractive_forces	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::calculate_attractive_forces($/;"	f	class:ogdf::FMMMLayout
calculate_boundaries_of_act_node	ogdf/internal/energybased/NMM.cpp	/^inline void NMM::calculate_boundaries_of_act_node($/;"	f	class:ogdf::NMM
calculate_bounding_rectangle	ogdf/energybased/FMMMLayout.cpp	/^Rectangle FMMMLayout::calculate_bounding_rectangle($/;"	f	class:ogdf::FMMMLayout
calculate_bounding_rectangles_area	ogdf/energybased/MAARPacking.cpp	/^inline double MAARPacking::calculate_bounding_rectangles_area(List<Rectangle>& R)$/;"	f	class:ogdf::MAARPacking
calculate_bounding_rectangles_of_components	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::calculate_bounding_rectangles_of_components($/;"	f	class:ogdf::FMMMLayout
calculate_exact_repulsive_forces	ogdf/internal/energybased/FruchtermanReingold.cpp	/^void FruchtermanReingold::calculate_exact_repulsive_forces($/;"	f	class:ogdf::FruchtermanReingold
calculate_forces	ogdf/energybased/FMMMLayout.cpp	/^inline void FMMMLayout::calculate_forces($/;"	f	class:ogdf::FMMMLayout
calculate_local_expansions_and_WSPRLS	ogdf/internal/energybased/NMM.cpp	/^void NMM::calculate_local_expansions_and_WSPRLS($/;"	f	class:ogdf::NMM
calculate_mass_of_collapsed_nodes	ogdf/energybased/Multilevel.cpp	/^inline void Multilevel::calculate_mass_of_collapsed_nodes($/;"	f	class:ogdf::Multilevel
calculate_neighbourcell_forces	ogdf/internal/energybased/NMM.cpp	/^void NMM::calculate_neighbourcell_forces($/;"	f	class:ogdf::NMM
calculate_position	ogdf/energybased/Multilevel.cpp	/^inline DPoint Multilevel::calculate_position(DPoint P, DPoint Q, double dist_P, double dist_Q)$/;"	f	class:ogdf::Multilevel
calculate_repulsive_forces	ogdf/energybased/FMMMLayout.h	/^	void calculate_repulsive_forces($/;"	f	class:ogdf::FMMMLayout
calculate_repulsive_forces	ogdf/internal/energybased/NMM.cpp	/^void NMM::calculate_repulsive_forces($/;"	f	class:ogdf::NMM
calculate_repulsive_forces_by_NMM	ogdf/internal/energybased/NMM.cpp	/^void NMM::calculate_repulsive_forces_by_NMM($/;"	f	class:ogdf::NMM
calculate_repulsive_forces_by_exact_method	ogdf/internal/energybased/NMM.cpp	/^inline void NMM::calculate_repulsive_forces_by_exact_method($/;"	f	class:ogdf::NMM
call	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::call($/;"	f	class:ogdf::FMMMLayout
call	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::call(ClusterGraphAttributes &GA)$/;"	f	class:ogdf::FMMMLayout
call	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::call(GraphAttributes &AG, char* ps_file)$/;"	f	class:ogdf::FMMMLayout
call	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::call(GraphAttributes &GA)$/;"	f	class:ogdf::FMMMLayout
call	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::call(GraphAttributes &GA, const EdgeArray<double> &edgeLength)$/;"	f	class:ogdf::FMMMLayout
call	ogdf/module/LayoutModule.h	/^        virtual void call(GraphAttributes &GA, GraphConstraints & \/*GC*\/) { call(GA); }$/;"	f	class:ogdf::LayoutModule
call_DIVIDE_ET_IMPERA_step	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::call_DIVIDE_ET_IMPERA_step($/;"	f	class:ogdf::FMMMLayout
call_FORCE_CALCULATION_step	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::call_FORCE_CALCULATION_step($/;"	f	class:ogdf::FMMMLayout
call_MULTILEVEL_step_for_subGraph	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::call_MULTILEVEL_step_for_subGraph($/;"	f	class:ogdf::FMMMLayout
call_POSTPROCESSING_step	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::call_POSTPROCESSING_step($/;"	f	class:ogdf::FMMMLayout
canAddNodeToEndOfMergeList	graph/assemblygraph.cpp	/^bool AssemblyGraph::canAddNodeToEndOfMergeList(QList<DeBruijnNode *> * mergeList,$/;"	f	class:AssemblyGraph
canAddNodeToStartOfMergeList	graph/assemblygraph.cpp	/^bool AssemblyGraph::canAddNodeToStartOfMergeList(QList<DeBruijnNode *> * mergeList,$/;"	f	class:AssemblyGraph
canNodeFitAtStart	graph/path.cpp	/^bool Path::canNodeFitAtStart(DeBruijnNode * node, Path * extendedPath) const$/;"	f	class:Path
canNodeFitOnEnd	graph/path.cpp	/^bool Path::canNodeFitOnEnd(DeBruijnNode * node, Path * extendedPath) const$/;"	f	class:Path
cancel	ui/myprogressdialog.cpp	/^void MyProgressDialog::cancel()$/;"	f	class:MyProgressDialog
capacity	ogdf/basic/BoundedStack.h	/^	INDEX capacity() const { return m_pStop - m_pStart; }$/;"	f	class:ogdf::BoundedStack
chain	ogdf/basic/GraphCopy.h	/^	const List<edge> &chain(edge e) const { return m_eCopy[e]; }$/;"	f	class:ogdf::GraphCopy
changeDir	ogdf/basic/basic.cpp	/^bool changeDir(const char *dirName)$/;"	f	namespace:ogdf
changeEdge	ogdf/internal/energybased/MultilevelGraph.cpp	/^bool MultilevelGraph::changeEdge(NodeMerge * NM, edge theEdge, double newWeight, node newSource, node newTarget)$/;"	f	class:ogdf::MultilevelGraph
changeNode	ogdf/internal/energybased/MultilevelGraph.cpp	/^bool MultilevelGraph::changeNode(NodeMerge * NM, node theNode, double newRadius, node merged)$/;"	f	class:ogdf::MultilevelGraph
changeNodeDepth	graph/assemblygraph.cpp	/^void AssemblyGraph::changeNodeDepth(std::vector<DeBruijnNode *> * nodes,$/;"	f	class:AssemblyGraph
changeNodeDepth	ui/mainwindow.cpp	/^void MainWindow::changeNodeDepth()$/;"	f	class:MainWindow
changeNodeDepths	tests/bandagetests.cpp	/^void BandageTests::changeNodeDepths()$/;"	f	class:BandageTests
changeNodeName	graph/assemblygraph.cpp	/^void AssemblyGraph::changeNodeName(QString oldName, QString newName)$/;"	f	class:AssemblyGraph
changeNodeName	ui/mainwindow.cpp	/^void MainWindow::changeNodeName()$/;"	f	class:MainWindow
changeNodeNames	tests/bandagetests.cpp	/^void BandageTests::changeNodeNames()$/;"	f	class:BandageTests
changeRotation	ui/mygraphicsview.cpp	/^void MyGraphicsView::changeRotation(double rotationChange)$/;"	f	class:MyGraphicsView
checkBoxesChanged	ui/blasthitfiltersdialog.cpp	/^void BlastHitFiltersDialog::checkBoxesChanged()$/;"	f	class:BlastHitFiltersDialog
checkBoxesChanged	ui/settingsdialog.cpp	/^void SettingsDialog::checkBoxesChanged()$/;"	f	class:SettingsDialog
checkFileIsAsqg	graph/assemblygraph.cpp	/^bool AssemblyGraph::checkFileIsAsqg(QString fullFileName)$/;"	f	class:AssemblyGraph
checkFileIsFastG	graph/assemblygraph.cpp	/^bool AssemblyGraph::checkFileIsFastG(QString fullFileName)$/;"	f	class:AssemblyGraph
checkFileIsFasta	graph/assemblygraph.cpp	/^bool AssemblyGraph::checkFileIsFasta(QString fullFileName)$/;"	f	class:AssemblyGraph
checkFileIsGfa	graph/assemblygraph.cpp	/^bool AssemblyGraph::checkFileIsGfa(QString fullFileName)$/;"	f	class:AssemblyGraph
checkFileIsLastGraph	graph/assemblygraph.cpp	/^bool AssemblyGraph::checkFileIsLastGraph(QString fullFileName)$/;"	f	class:AssemblyGraph
checkFileIsTrinityFasta	graph/assemblygraph.cpp	/^bool AssemblyGraph::checkFileIsTrinityFasta(QString fullFileName)$/;"	f	class:AssemblyGraph
checkFirstLineOfFile	graph/assemblygraph.cpp	/^bool AssemblyGraph::checkFirstLineOfFile(QString fullFileName, QString regExp)$/;"	f	class:AssemblyGraph
checkForExcessArguments	command_line/commoncommandlinefunctions.cpp	/^QString checkForExcessArguments(QStringList arguments)$/;"	f
checkForHelp	command_line/commoncommandlinefunctions.cpp	/^bool checkForHelp(QStringList arguments)$/;"	f
checkForHelpAll	command_line/commoncommandlinefunctions.cpp	/^bool checkForHelpAll(QStringList arguments)$/;"	f
checkForImageSave	ui/mainwindow.cpp	/^bool MainWindow::checkForImageSave()$/;"	f	class:MainWindow
checkForInvalidImageOptions	command_line/image.cpp	/^QString checkForInvalidImageOptions(QStringList arguments)$/;"	f
checkForInvalidInfoOptions	command_line/info.cpp	/^QString checkForInvalidInfoOptions(QStringList arguments)$/;"	f
checkForInvalidLoadOptions	command_line/load.cpp	/^QString checkForInvalidLoadOptions(QStringList arguments)$/;"	f
checkForInvalidOrExcessSettings	command_line/commoncommandlinefunctions.cpp	/^QString checkForInvalidOrExcessSettings(QStringList * arguments)$/;"	f
checkForInvalidQueryPathsOptions	command_line/querypaths.cpp	/^QString checkForInvalidQueryPathsOptions(QStringList arguments)$/;"	f
checkForInvalidReduceOptions	command_line/reduce.cpp	/^QString checkForInvalidReduceOptions(QStringList arguments)$/;"	f
checkForOtherEdges	graph/path.cpp	/^bool Path::checkForOtherEdges()$/;"	f	class:Path
checkForVersion	command_line/commoncommandlinefunctions.cpp	/^bool checkForVersion(QStringList arguments)$/;"	f
checkGraphType	ogdf/fileformats/OgmlParser.cpp	/^bool OgmlParser::checkGraphType(const XmlTagObject *xmlTag) const$/;"	f	class:ogdf::OgmlParser
checkIfFileExists	command_line/commoncommandlinefunctions.cpp	/^bool checkIfFileExists(QString filename)$/;"	f
checkIfStringHasNodes	graph/assemblygraph.cpp	/^bool AssemblyGraph::checkIfStringHasNodes(QString nodesString)$/;"	f	class:AssemblyGraph
checkNodeNameValidity	graph/assemblygraph.cpp	/^NodeNameStatus AssemblyGraph::checkNodeNameValidity(QString nodeName)$/;"	f	class:AssemblyGraph
checkNodeNameValidity	ui/changenodenamedialog.cpp	/^void ChangeNodeNameDialog::checkNodeNameValidity()$/;"	f	class:ChangeNodeNameDialog
checkOptionForColour	command_line/commoncommandlinefunctions.cpp	/^QString checkOptionForColour(QString option, QStringList * arguments)$/;"	f
checkOptionForFile	command_line/commoncommandlinefunctions.cpp	/^QString checkOptionForFile(QString option, QStringList * arguments)$/;"	f
checkOptionForFloat	command_line/commoncommandlinefunctions.cpp	/^QString checkOptionForFloat(QString option, QStringList * arguments, FloatSetting setting, bool offOkay)$/;"	f
checkOptionForInt	command_line/commoncommandlinefunctions.cpp	/^QString checkOptionForInt(QString option, QStringList * arguments, IntSetting setting, bool offOkay)$/;"	f
checkOptionForSciNot	command_line/commoncommandlinefunctions.cpp	/^QString checkOptionForSciNot(QString option, QStringList * arguments,$/;"	f
checkOptionForString	command_line/commoncommandlinefunctions.cpp	/^QString checkOptionForString(QString option, QStringList * arguments, QStringList validOptionsList, QString validDescription)$/;"	f
checkOptionWithoutValue	command_line/commoncommandlinefunctions.cpp	/^void checkOptionWithoutValue(QString option, QStringList * arguments)$/;"	f
checkPathValidity	ui/pathspecifydialog.cpp	/^void PathSpecifyDialog::checkPathValidity()$/;"	f	class:PathSpecifyDialog
checkSize	ogdf/internal/basic/MallocMemoryAllocator.h	/^	static bool checkSize(size_t \/* nBytes *\/) { return true; }$/;"	f	class:ogdf::MallocMemoryAllocator
checkSize	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^bool PoolMemoryAllocator::checkSize(size_t nBytes) {$/;"	f	class:ogdf::PoolMemoryAllocator
checkTwoOptionsForFloats	command_line/commoncommandlinefunctions.cpp	/^QString checkTwoOptionsForFloats(QString option1, QString option2, QStringList * arguments,$/;"	f
check_and_delete_degenerated_node	ogdf/internal/energybased/NMM.cpp	/^bool NMM::check_and_delete_degenerated_node(QuadTreeNM& T)$/;"	f	class:ogdf::NMM
child_lb_exists	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	bool child_lb_exists() { if (child_lb_ptr != NULL) return true; else return false;}$/;"	f	class:ogdf::QuadTreeNodeNM
child_lb_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	QuadTreeNodeNM*  child_lb_ptr; \/\/points to left bottom child$/;"	m	class:ogdf::QuadTreeNodeNM
child_lt_exists	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	bool child_lt_exists() { if (child_lt_ptr != NULL) return true; else return false;}$/;"	f	class:ogdf::QuadTreeNodeNM
child_lt_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	QuadTreeNodeNM*  child_lt_ptr; \/\/points to left top child$/;"	m	class:ogdf::QuadTreeNodeNM
child_rb_exists	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	bool child_rb_exists() { if (child_rb_ptr != NULL) return true; else return false;}$/;"	f	class:ogdf::QuadTreeNodeNM
child_rb_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	QuadTreeNodeNM*  child_rb_ptr; \/\/points to right bottom child$/;"	m	class:ogdf::QuadTreeNodeNM
child_rt_exists	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	bool child_rt_exists() { if (child_rt_ptr != NULL) return true; else return false;}$/;"	f	class:ogdf::QuadTreeNodeNM
child_rt_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	QuadTreeNodeNM*  child_rt_ptr; \/\/points to right bottom child$/;"	m	class:ogdf::QuadTreeNodeNM
choiceAttributes	ogdf/fileformats/OgmlParser.cpp	/^	List<OgmlAttribute*> choiceAttributes; \/\/!< Represents the attributes of this object of which at least one needs to exist.$/;"	m	class:ogdf::OgmlParser::OgmlTag	file:
choiceTags	ogdf/fileformats/OgmlParser.cpp	/^	List<OgmlTag*> choiceTags;$/;"	m	class:ogdf::OgmlParser::OgmlTag	file:
chooseColour	ui/colourbutton.cpp	/^void ColourButton::chooseColour()$/;"	f	class:ColourButton
chooseEdge	ogdf/basic/Graph.cpp	/^edge Graph::chooseEdge() const$/;"	f	class:ogdf::Graph
chooseElement	ogdf/basic/List.h	/^	E chooseElement() {$/;"	f	class:ogdf::List
chooseElement	ogdf/basic/List.h	/^	E chooseElement() {$/;"	f	class:ogdf::ListPure
chooseElement	ogdf/basic/List.h	/^	const E chooseElement() const {$/;"	f	class:ogdf::List
chooseElement	ogdf/basic/List.h	/^	const E chooseElement() const {$/;"	f	class:ogdf::ListPure
chooseFace	ogdf/basic/CombinatorialEmbedding.cpp	/^face ConstCombinatorialEmbedding::chooseFace() const$/;"	f	class:ogdf::ConstCombinatorialEmbedding
chooseIterator	ogdf/basic/List.h	/^	ListConstIterator<E> chooseIterator() const {$/;"	f	class:ogdf::List
chooseIterator	ogdf/basic/List.h	/^	ListConstIterator<E> chooseIterator() const {$/;"	f	class:ogdf::ListPure
chooseIterator	ogdf/basic/List.h	/^	ListIterator<E> chooseIterator() {$/;"	f	class:ogdf::List
chooseIterator	ogdf/basic/List.h	/^	ListIterator<E> chooseIterator() {$/;"	f	class:ogdf::ListPure
chooseNode	ogdf/basic/Graph.cpp	/^node Graph::chooseNode() const$/;"	f	class:ogdf::Graph
choose_distinct_random_point_in_disque	ogdf/energybased/numexcept.cpp	/^DPoint numexcept::choose_distinct_random_point_in_disque(DPoint old_point,$/;"	f	class:ogdf::numexcept
choose_distinct_random_point_in_radius_epsilon	ogdf/energybased/numexcept.cpp	/^DPoint numexcept::choose_distinct_random_point_in_radius_epsilon(DPoint old_pos)$/;"	f	class:ogdf::numexcept
cigarContainsOnlyM	graph/assemblygraph.cpp	/^bool AssemblyGraph::cigarContainsOnlyM(QString cigar)$/;"	f	class:AssemblyGraph
cleanNodeName	graph/assemblygraph.cpp	/^QString AssemblyGraph::cleanNodeName(QString name)$/;"	f	class:AssemblyGraph
cleanQueryName	blast/blastsearch.cpp	/^QString BlastSearch::cleanQueryName(QString queryName)$/;"	f	class:BlastSearch
cleanUp	blast/blastsearch.cpp	/^void BlastSearch::cleanUp()$/;"	f	class:BlastSearch
cleanUp	graph/assemblygraph.cpp	/^void AssemblyGraph::cleanUp()$/;"	f	class:AssemblyGraph
cleanUp	ui/mainwindow.cpp	/^void MainWindow::cleanUp()$/;"	f	class:MainWindow
cleanUpAllBlast	ui/mainwindow.cpp	/^void MainWindow::cleanUpAllBlast()$/;"	f	class:MainWindow
cleanup	ogdf/internal/basic/MallocMemoryAllocator.h	/^	static void cleanup() { }$/;"	f	class:ogdf::MallocMemoryAllocator
cleanup	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^void PoolMemoryAllocator::cleanup()$/;"	f	class:ogdf::PoolMemoryAllocator
clear	ogdf/basic/BoundedStack.h	/^	void clear() { m_pTop = m_pStart-1; }$/;"	f	class:ogdf::BoundedStack
clear	ogdf/basic/CombinatorialEmbedding.cpp	/^void CombinatorialEmbedding::clear()$/;"	f	class:ogdf::CombinatorialEmbedding
clear	ogdf/basic/Constraints.h	/^	void clear() {$/;"	f	class:ogdf::GraphConstraints
clear	ogdf/basic/FaceSet.h	/^	void clear() {$/;"	f	class:ogdf::FaceSet
clear	ogdf/basic/FaceSet.h	/^	void clear() {$/;"	f	class:ogdf::FaceSetPure
clear	ogdf/basic/FaceSet.h	/^	void clear() {$/;"	f	class:ogdf::FaceSetSimple
clear	ogdf/basic/Graph.cpp	/^void Graph::clear()$/;"	f	class:ogdf::Graph
clear	ogdf/basic/Graph_d.h	/^	void clear() {$/;"	f	class:ogdf::GraphList
clear	ogdf/basic/HashArray.h	/^	void clear() { Hashing<I,E,H>::clear(); }$/;"	f	class:ogdf::HashArray
clear	ogdf/basic/Hashing.cpp	/^void HashingBase::clear()$/;"	f	class:ogdf::HashingBase
clear	ogdf/basic/Hashing.h	/^	void clear() { HashingBase::clear(); }$/;"	f	class:ogdf::Hashing
clear	ogdf/basic/List.h	/^	void clear() {$/;"	f	class:ogdf::List
clear	ogdf/basic/List.h	/^	void clear() {$/;"	f	class:ogdf::ListPure
clear	ogdf/basic/SList.h	/^	void clear() {$/;"	f	class:ogdf::SList
clear	ogdf/basic/SList.h	/^	void clear() {$/;"	f	class:ogdf::SListPure
clear	ogdf/basic/Stack.h	/^	void clear() {$/;"	f	class:ogdf::Stack
clear	ogdf/basic/Stack.h	/^	void clear() {$/;"	f	class:ogdf::StackPure
clear	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::clear()$/;"	f	class:ogdf::ClusterGraph
clearAllBends	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::clearAllBends()$/;"	f	class:ogdf::GraphAttributes
clearAllBlastHitPointers	graph/assemblygraph.cpp	/^void AssemblyGraph::clearAllBlastHitPointers()$/;"	f	class:AssemblyGraph
clearAllCsvData	graph/assemblygraph.cpp	/^void AssemblyGraph::clearAllCsvData()$/;"	f	class:AssemblyGraph
clearAllQueries	blast/blastqueries.cpp	/^void BlastQueries::clearAllQueries()$/;"	f	class:BlastQueries
clearAllQueries	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::clearAllQueries()$/;"	f	class:BlastSearchDialog
clearBlastHits	blast/blastsearch.cpp	/^void BlastSearch::clearBlastHits()$/;"	f	class:BlastSearch
clearBlastHits	graph/debruijnnode.h	/^    void clearBlastHits() {m_blastHits.clear();}$/;"	f	class:DeBruijnNode
clearBlastHits	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::clearBlastHits()$/;"	f	class:BlastSearchDialog
clearClusterTree	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::clearClusterTree(cluster c)$/;"	f	class:ogdf::ClusterGraph
clearClusterTree	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::clearClusterTree(cluster c,List<node> &attached)$/;"	f	class:ogdf::ClusterGraph
clearCsvData	graph/debruijnnode.h	/^    void clearCsvData() {m_csvData.clear();}$/;"	f	class:DeBruijnNode
clearGraphDetails	ui/mainwindow.cpp	/^void MainWindow::clearGraphDetails()$/;"	f	class:MainWindow
clearGraphInfo	graph/assemblygraph.cpp	/^void AssemblyGraph::clearGraphInfo()$/;"	f	class:AssemblyGraph
clearGraphSpecificMemory	program/memory.cpp	/^void Memory::clearGraphSpecificMemory()$/;"	f	class:Memory
clearOgdfGraphAndResetNodes	graph/assemblygraph.cpp	/^void AssemblyGraph::clearOgdfGraphAndResetNodes()$/;"	f	class:AssemblyGraph
clearSearchResults	blast/blastqueries.cpp	/^void BlastQueries::clearSearchResults()$/;"	f	class:BlastQueries
clearSearchResults	blast/blastquery.cpp	/^void BlastQuery::clearSearchResults()$/;"	f	class:BlastQuery
clearSelectedQueries	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::clearSelectedQueries()$/;"	f	class:BlastSearchDialog
clearSomeQueries	blast/blastqueries.cpp	/^void BlastQueries::clearSomeQueries(std::vector<BlastQuery *> queriesToRemove)$/;"	f	class:BlastQueries
clearSomeQueries	blast/blastsearch.cpp	/^void BlastSearch::clearSomeQueries(std::vector<BlastQuery *> queriesToRemove)$/;"	f	class:BlastSearch
cleared	ogdf/basic/Constraints.h	/^	virtual void cleared()            { }$/;"	f	class:ogdf::GraphConstraints
cleared	ogdf/cluster/ClusterGraph.h	/^	virtual void cleared()$/;"	f	class:ogdf::ClusterGraph
clickedSlot	ui/querypathspushbutton.cpp	/^void QueryPathsPushButton::clickedSlot()$/;"	f	class:QueryPathsPushButton
clockwiseFacePred	ogdf/basic/Graph_d.h	/^	adjEntry clockwiseFacePred() const { return cyclicSucc()->m_twin; }$/;"	f	class:ogdf::AdjElement
clockwiseFaceSucc	ogdf/basic/Graph_d.h	/^	adjEntry clockwiseFaceSucc() const { return m_twin->cyclicPred(); }$/;"	f	class:ogdf::AdjElement
closeLabels	ogdf/fileformats/XmlParser.cpp	/^void XmlParser::closeLabels(Array<char*> idMap,	Array<char*>  typeName)$/;"	f	class:ogdf::XmlParser
closingBracket	ogdf/fileformats/DinoXmlScanner.h	/^		closingBracket,		\/\/\/< >$/;"	e	enum:ogdf::XmlToken
cluster	ogdf/cluster/ClusterGraph.h	/^typedef ClusterElement *cluster; \/\/!< The type of clusters.$/;"	t	namespace:ogdf
clusterArrayTableSize	ogdf/cluster/ClusterGraph.h	/^	int clusterArrayTableSize() const { return m_clusterArrayTableSize; }$/;"	f	class:ogdf::ClusterGraph
clusterBackColor	ogdf/cluster/ClusterGraphAttributes.h	/^			String &clusterBackColor(cluster c) {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterBackColor	ogdf/cluster/ClusterGraphAttributes.h	/^			const String &clusterBackColor(cluster c) const {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterColor	ogdf/cluster/ClusterGraphAttributes.h	/^			String &clusterColor(cluster c) {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterColor	ogdf/cluster/ClusterGraphAttributes.h	/^			const String &clusterColor(cluster c) const {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterDepth	ogdf/cluster/ClusterGraph.h	/^	int& clusterDepth(cluster c) const$/;"	f	class:ogdf::ClusterGraph
clusterFillColor	ogdf/cluster/ClusterGraphAttributes.h	/^			String &clusterFillColor(cluster c) {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterFillColor	ogdf/cluster/ClusterGraphAttributes.h	/^			String& clusterFillColor(int clusterID) {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterFillColor	ogdf/cluster/ClusterGraphAttributes.h	/^			const String &clusterFillColor(cluster c) const {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterFillColor	ogdf/cluster/ClusterGraphAttributes.h	/^			const String &clusterFillColor(int clusterID) const {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterFillPattern	ogdf/cluster/ClusterGraphAttributes.h	/^			GraphAttributes::BrushPattern &clusterFillPattern(cluster c) {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterFillPattern	ogdf/cluster/ClusterGraphAttributes.h	/^			GraphAttributes::BrushPattern clusterFillPattern(int clusterID) const {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterFillPattern	ogdf/cluster/ClusterGraphAttributes.h	/^			GraphAttributes::BrushPattern& clusterFillPattern(int clusterID) {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterFillPattern	ogdf/cluster/ClusterGraphAttributes.h	/^			const GraphAttributes::BrushPattern &clusterFillPattern(cluster c) const {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterGraph	ogdf/fileformats/Ogml.h	/^		clusterGraph,$/;"	e	enum:ogdf::Ogml::GraphType
clusterHeight	ogdf/cluster/ClusterGraphAttributes.h	/^			double clusterHeight(cluster c) const { return m_clusterInfo[c->index()].m_h; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterHeight	ogdf/cluster/ClusterGraphAttributes.h	/^			double clusterHeight(int clusterID) const { return m_clusterInfo[clusterID].m_h; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterHeight	ogdf/cluster/ClusterGraphAttributes.h	/^			double& clusterHeight(cluster c) { return m_clusterInfo[c->index()].m_h; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterHeight	ogdf/cluster/ClusterGraphAttributes.h	/^			double& clusterHeight(int clusterID) { return m_clusterInfo[clusterID].m_h; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterID	ogdf/cluster/ClusterGraphAttributes.h	/^			int clusterID(node v) { return m_pClusterGraph->clusterOf(v)->index(); }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterIdCount	ogdf/cluster/ClusterGraph.h	/^	int clusterIdCount() const { return m_clusterIdCount;}$/;"	f	class:ogdf::ClusterGraph
clusterInfo	ogdf/cluster/ClusterGraphAttributes.h	/^			ClusterInfo& clusterInfo(cluster c) { return m_clusterInfo[c->index()]; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterInfo	ogdf/cluster/ClusterGraphAttributes.h	/^			ClusterInfo& clusterInfo(int clusterID) { return m_clusterInfo[clusterID]; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterInfo	ogdf/cluster/ClusterGraphAttributes.h	/^			const ClusterInfo& clusterInfo(cluster c) const { return m_clusterInfo[c->index()]; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterInfo	ogdf/cluster/ClusterGraphAttributes.h	/^			const ClusterInfo& clusterInfo(int clusterID) const {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterLabel	ogdf/cluster/ClusterGraphAttributes.h	/^			String &clusterLabel(cluster c) {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterLabel	ogdf/cluster/ClusterGraphAttributes.h	/^			String &clusterLabel(int clusterID) {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterLabel	ogdf/cluster/ClusterGraphAttributes.h	/^			const String &clusterLabel(cluster c) const {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterLabel	ogdf/cluster/ClusterGraphAttributes.h	/^			const String &clusterLabel(int clusterID) const {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterLineStyle	ogdf/cluster/ClusterGraphAttributes.h	/^			GraphAttributes::EdgeStyle &clusterLineStyle(cluster c) {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterLineStyle	ogdf/cluster/ClusterGraphAttributes.h	/^			const GraphAttributes::EdgeStyle &clusterLineStyle(cluster c) const {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterLineWidth	ogdf/cluster/ClusterGraphAttributes.h	/^			const double &clusterLineWidth(cluster c) const {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterLineWidth	ogdf/cluster/ClusterGraphAttributes.h	/^			double &clusterLineWidth(cluster c) {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterLineWidth	ogdf/cluster/ClusterGraphAttributes.h	/^			double clusterLineWidth(int clusterID) const {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterLineWidth	ogdf/cluster/ClusterGraphAttributes.h	/^			double& clusterLineWidth(int clusterID) {$/;"	f	class:ogdf::ClusterGraphAttributes
clusterOf	ogdf/cluster/ClusterGraph.h	/^	inline cluster clusterOf(node v) const{$/;"	f	class:ogdf::ClusterGraph
clusterOf	ogdf/cluster/ClusterGraphAttributes.h	/^			cluster clusterOf(node v) { return m_pClusterGraph->clusterOf(v); }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterPredefKey	ogdf/fileformats/GmlParser.h	/^		pointPredefKey, generalizationPredefKey, subGraphPredefKey, fillPredefKey, clusterPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
clusterRead	ogdf/fileformats/GmlParser.cpp	/^bool GmlParser::clusterRead($/;"	f	class:ogdf::GmlParser
clusterWidth	ogdf/cluster/ClusterGraphAttributes.h	/^			double clusterWidth(cluster c) const { return m_clusterInfo[c->index()].m_w; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterWidth	ogdf/cluster/ClusterGraphAttributes.h	/^			double clusterWidth(int clusterID) const { return m_clusterInfo[clusterID].m_w; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterWidth	ogdf/cluster/ClusterGraphAttributes.h	/^			double& clusterWidth(cluster c) { return m_clusterInfo[c->index()].m_w; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterWidth	ogdf/cluster/ClusterGraphAttributes.h	/^			double& clusterWidth(int clusterID) { return m_clusterInfo[clusterID].m_w; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterXPos	ogdf/cluster/ClusterGraphAttributes.h	/^			double clusterXPos(cluster c) const { return m_clusterInfo[c->index()].m_x; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterXPos	ogdf/cluster/ClusterGraphAttributes.h	/^			double clusterXPos(int clusterID) const { return m_clusterInfo[clusterID].m_x; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterXPos	ogdf/cluster/ClusterGraphAttributes.h	/^			double& clusterXPos(cluster c) { return m_clusterInfo[c->index()].m_x; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterXPos	ogdf/cluster/ClusterGraphAttributes.h	/^			double& clusterXPos(int clusterID) { return m_clusterInfo[clusterID].m_x; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterYPos	ogdf/cluster/ClusterGraphAttributes.h	/^			double clusterYPos(cluster c) const { return m_clusterInfo[c->index()].m_y; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterYPos	ogdf/cluster/ClusterGraphAttributes.h	/^			double clusterYPos(int clusterID) const { return m_clusterInfo[clusterID].m_y; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterYPos	ogdf/cluster/ClusterGraphAttributes.h	/^			double& clusterYPos(cluster c) { return m_clusterInfo[c->index()].m_y; }$/;"	f	class:ogdf::ClusterGraphAttributes
clusterYPos	ogdf/cluster/ClusterGraphAttributes.h	/^			double& clusterYPos(int clusterID) { return m_clusterInfo[clusterID].m_y; }$/;"	f	class:ogdf::ClusterGraphAttributes
collaps	ogdf/basic/Graph_d.h	/^	void collaps(NODELIST &nodes){$/;"	f	class:ogdf::Graph
collaps	ogdf/cluster/ClusterGraph.h	/^	void collaps(NODELIST &nodes,Graph &G){$/;"	f	class:ogdf::ClusterGraph
collaps_solar_systems	ogdf/energybased/Multilevel.cpp	/^inline void Multilevel::collaps_solar_systems($/;"	f	class:ogdf::Multilevel
collectGroups	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^PoolMemoryAllocator::collectGroups($/;"	f	class:ogdf::PoolMemoryAllocator
collect_contained_nodes	ogdf/internal/energybased/NMM.cpp	/^void NMM::collect_contained_nodes(QuadTreeNM& T, QuadTreeNodeNM* new_leaf_ptr)$/;"	f	class:ogdf::NMM
colorEdge	ogdf/basic/GraphAttributes.h	/^	String &colorEdge(edge e) {$/;"	f	class:ogdf::GraphAttributes
colorEdge	ogdf/basic/GraphAttributes.h	/^	const String &colorEdge(edge e) const {$/;"	f	class:ogdf::GraphAttributes
colorNode	ogdf/basic/GraphAttributes.h	/^	String &colorNode(node v) {$/;"	f	class:ogdf::GraphAttributes
colorNode	ogdf/basic/GraphAttributes.h	/^	const String &colorNode(node v) const {$/;"	f	class:ogdf::GraphAttributes
colorPredefKey	ogdf/fileformats/GmlParser.h	/^		rootClusterPredefKey, vertexPredefKey, colorPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
colourSliderChanged	ui/settingsdialog.cpp	/^void SettingsDialog::colourSliderChanged()$/;"	f	class:SettingsDialog
colourSpinBoxChanged	ui/settingsdialog.cpp	/^void SettingsDialog::colourSpinBoxChanged()$/;"	f	class:SettingsDialog
commandLineCommand	program/memory.h	/^    CommandLineCommand commandLineCommand;$/;"	m	class:Memory
commandLineSettings	tests/bandagetests.cpp	/^void BandageTests::commandLineSettings()$/;"	f	class:BandageTests
commonCluster	ogdf/cluster/ClusterGraph.cpp	/^cluster ClusterGraph::commonCluster(SList<node>& nodes)$/;"	f	class:ogdf::ClusterGraph
commonCluster	ogdf/cluster/ClusterGraph.cpp	/^cluster ClusterGraph::commonCluster(node v, node w) const$/;"	f	class:ogdf::ClusterGraph
commonClusterAncestorsPath	ogdf/cluster/ClusterGraph.cpp	/^cluster ClusterGraph::commonClusterAncestorsPath(node v,$/;"	f	class:ogdf::ClusterGraph
commonClusterLastAncestors	ogdf/cluster/ClusterGraph.cpp	/^cluster ClusterGraph::commonClusterLastAncestors(node v,$/;"	f	class:ogdf::ClusterGraph
commonClusterPath	ogdf/cluster/ClusterGraph.cpp	/^cluster ClusterGraph::commonClusterPath(node v,$/;"	f	class:ogdf::ClusterGraph
commonNode	ogdf/basic/Graph_d.h	/^	node commonNode(edge e) const { return (m_src==e->m_src || m_src==e->m_tgt) ? m_src : ((m_tgt==e->m_src || m_tgt==e->m_tgt) ? m_tgt: 0); }$/;"	f	class:ogdf::EdgeElement
compare	ogdf/basic/String.cpp	/^int String::compare (const String &x, const String &y)$/;"	f	class:ogdf::String
compare	ogdf/internal/energybased/ParticleInfo.h	/^	static int compare(const ParticleInfo& a,const ParticleInfo & b)$/;"	f	class:ogdf::ParticleInfoComparer
compareEdgePointers	graph/debruijnedge.cpp	/^bool DeBruijnEdge::compareEdgePointers(DeBruijnEdge * a, DeBruijnEdge * b)$/;"	f	class:DeBruijnEdge
compareNodeDepth	graph/assemblygraph.cpp	/^bool compareNodeDepth(DeBruijnNode * a, DeBruijnNode * b) {return (a->getDepth() < b->getDepth());}$/;"	f
compareNodePointers	ui/mygraphicsscene.cpp	/^bool compareNodePointers(DeBruijnNode * a, DeBruijnNode * b)$/;"	f
compareTwoBlastHitPointers	blast/blasthit.cpp	/^bool BlastHit::compareTwoBlastHitPointers(BlastHit * a, BlastHit * b)$/;"	f	class:BlastHit
componentSeparation	program/settings.h	/^    FloatSetting componentSeparation;$/;"	m	class:Settings
component_index	ogdf/energybased/Rectangle.h	/^		int component_index;  \/\/the index of the related connected component$/;"	m	class:ogdf::Rectangle
compoundGraph	ogdf/fileformats/Ogml.h	/^		compoundGraph,$/;"	e	enum:ogdf::Ogml::GraphType
compulsiveAttributes	ogdf/fileformats/OgmlParser.cpp	/^	List<OgmlParser::OgmlAttribute*> compulsiveAttributes; \/\/!< Represents the compulsive attributes of this object.$/;"	m	class:ogdf::OgmlParser::OgmlTag	file:
compulsiveTags	ogdf/fileformats/OgmlParser.cpp	/^	List<OgmlTag*> compulsiveTags;$/;"	m	class:ogdf::OgmlParser::OgmlTag	file:
computeFaces	ogdf/basic/CombinatorialEmbedding.cpp	/^void ConstCombinatorialEmbedding::computeFaces()$/;"	f	class:ogdf::ConstCombinatorialEmbedding
computeSubTreeDepth	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::computeSubTreeDepth(cluster c) const$/;"	f	class:ogdf::ClusterGraph
conc	ogdf/basic/List.h	/^	void conc(List<E> &L2) {$/;"	f	class:ogdf::List
conc	ogdf/basic/List.h	/^	void conc(ListPure<E> &L2) {$/;"	f	class:ogdf::ListPure
conc	ogdf/basic/SList.h	/^	void conc(SList<E> &L2) {$/;"	f	class:ogdf::SList
conc	ogdf/basic/SList.h	/^	void conc(SListPure<E> &L2) {$/;"	f	class:ogdf::SListPure
concFront	ogdf/basic/List.h	/^	void concFront(List<E> &L2) {$/;"	f	class:ogdf::List
concFront	ogdf/basic/List.h	/^	void concFront(ListPure<E> &L2) {$/;"	f	class:ogdf::ListPure
connectedComponents	ogdf/basic/simple_graph_alg.cpp	/^int connectedComponents(const Graph &G, NodeArray<int> &component)$/;"	f	namespace:ogdf
connectedIsolatedComponents	ogdf/basic/simple_graph_alg.cpp	/^int connectedIsolatedComponents(const Graph &G, List<node> &isolated,$/;"	f	namespace:ogdf
consistencyCheck	ogdf/basic/CombinatorialEmbedding.cpp	/^bool ConstCombinatorialEmbedding::consistencyCheck()$/;"	f	class:ogdf::ConstCombinatorialEmbedding
consistencyCheck	ogdf/basic/Graph.cpp	/^bool Graph::consistencyCheck() const$/;"	f	class:ogdf::Graph
consistencyCheck	ogdf/basic/GraphCopy.cpp	/^bool GraphCopy::consistencyCheck() const$/;"	f	class:ogdf::GraphCopy
consistencyCheck	ogdf/basic/Graph_d.h	/^	bool consistencyCheck() {$/;"	f	class:ogdf::GraphList
consistencyCheck	ogdf/basic/Graph_d.h	/^	bool consistencyCheck() {$/;"	f	class:ogdf::GraphListBase
consistencyCheck	ogdf/cluster/ClusterGraph.cpp	/^bool ClusterGraph::consistencyCheck()$/;"	f	class:ogdf::ClusterGraph
constClusterGraph	ogdf/cluster/ClusterGraphAttributes.h	/^			const ClusterGraph& constClusterGraph() const { return *m_pClusterGraph; }$/;"	f	class:ogdf::ClusterGraphAttributes
constGraph	ogdf/basic/Constraints.h	/^	const Graph *constGraph() { return m_pGraph; }$/;"	f	class:ogdf::GraphConstraints
constGraph	ogdf/basic/Constraints.h	/^	const Graph& constGraph() const { return *m_pGraph; }$/;"	f	class:ogdf::Constraint
constGraph	ogdf/basic/GraphAttributes.h	/^	const Graph& constGraph() const {$/;"	f	class:ogdf::GraphAttributes
const_iterator	ogdf/basic/HashArray.h	/^	typedef HashConstIterator<I,E,H> const_iterator;$/;"	t	class:ogdf::HashArray
const_iterator	ogdf/basic/Hashing.h	/^	typedef HashConstIterator<K,I,H> const_iterator;$/;"	t	class:ogdf::Hashing
const_iterator	ogdf/basic/List.h	/^	typedef ListConstIterator<E> const_iterator;$/;"	t	class:ogdf::List
const_iterator	ogdf/basic/List.h	/^	typedef ListConstIterator<E> const_iterator;$/;"	t	class:ogdf::ListPure
const_iterator	ogdf/basic/SList.h	/^	typedef SListConstIterator<E> const_iterator;$/;"	t	class:ogdf::SList
const_iterator	ogdf/basic/SList.h	/^	typedef SListConstIterator<E> const_iterator;$/;"	t	class:ogdf::SListPure
construct	ogdf/basic/Array.h	/^void Array<E,INDEX>::construct(INDEX a, INDEX b)$/;"	f	class:ogdf::Array
construct	ogdf/basic/Array2D.h	/^void Array2D<E>::construct(int a, int b, int c, int d)$/;"	f	class:ogdf::Array2D
construct	ogdf/basic/Graph.cpp	/^void Graph::construct(const Graph &G, NodeArray<node> &mapNode,$/;"	f	class:ogdf::Graph
constructInitByActiveNodes	ogdf/basic/Graph.cpp	/^void Graph::constructInitByActiveNodes($/;"	f	class:ogdf::Graph
constructInitByNodes	ogdf/basic/Graph.cpp	/^void Graph::constructInitByNodes($/;"	f	class:ogdf::Graph
construct_complete_subtree	ogdf/internal/energybased/NMM.cpp	/^void NMM::construct_complete_subtree($/;"	f	class:ogdf::NMM
construct_reduced_subtree	ogdf/internal/energybased/NMM.cpp	/^void NMM::construct_reduced_subtree($/;"	f	class:ogdf::NMM
construct_subtree	ogdf/internal/energybased/NMM.cpp	/^void NMM::construct_subtree($/;"	f	class:ogdf::NMM
contained_nodes	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	List <node>  contained_nodes;      \/\/list of nodes of G that are contained in this$/;"	m	class:ogdf::QuadTreeNodeNM
contained_nodes_empty	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	bool contained_nodes_empty() {return contained_nodes.empty();}$/;"	f	class:ogdf::QuadTreeNodeNM
contains	ogdf/basic/geometry.cpp	/^bool DLine::contains(const DPoint &p) const$/;"	f	class:ogdf::DLine
contains	ogdf/basic/geometry.h	/^	bool contains(const DPoint &p) const {$/;"	f	class:ogdf::DRect
containsEntireNode	graph/path.cpp	/^bool Path::containsEntireNode(DeBruijnNode * node) const$/;"	f	class:Path
containsNode	graph/path.cpp	/^bool Path::containsNode(DeBruijnNode * node) const$/;"	f	class:Path
containsPoint	ogdf/basic/geometry.cpp	/^bool DPolygon::containsPoint(DPoint &p) const$/;"	f	class:ogdf::DPolygon
contiguitySearchSteps	program/settings.h	/^    IntSetting contiguitySearchSteps;$/;"	m	class:Settings
contiguityStartingColour	program/settings.h	/^    QColor contiguityStartingColour;$/;"	m	class:Settings
contiguousEitherStrandColour	program/settings.h	/^    QColor contiguousEitherStrandColour;$/;"	m	class:Settings
contiguousStrandSpecificColour	program/settings.h	/^    QColor contiguousStrandSpecificColour;$/;"	m	class:Settings
contract	ogdf/basic/CombinatorialEmbedding.cpp	/^node CombinatorialEmbedding::contract(edge e)$/;"	f	class:ogdf::CombinatorialEmbedding
contract	ogdf/basic/Graph.cpp	/^node Graph::contract(edge e)$/;"	f	class:ogdf::Graph
convertGraphFileTypeToString	ui/mainwindow.cpp	/^QString MainWindow::convertGraphFileTypeToString(GraphFileType graphFileType)$/;"	f	class:MainWindow
convertNormalNumberStringToBandageNodeName	graph/assemblygraph.cpp	/^QString AssemblyGraph::convertNormalNumberStringToBandageNodeName(QString number)$/;"	f	class:AssemblyGraph
convertToInt	ogdf/basic/geometry.cpp	/^void DPolyline::convertToInt()$/;"	f	class:ogdf::DPolyline
coolTemperature	ogdf/energybased/FMMMLayout.h	/^	bool coolTemperature() const { return m_coolTemperature; }$/;"	f	class:ogdf::FMMMLayout
coolTemperature	ogdf/energybased/FMMMLayout.h	/^	void coolTemperature(bool b) { m_coolTemperature = b; }$/;"	f	class:ogdf::FMMMLayout
coolValue	ogdf/energybased/FMMMLayout.h	/^	double coolValue() const { return m_coolValue; }$/;"	f	class:ogdf::FMMMLayout
coolValue	ogdf/energybased/FMMMLayout.h	/^	void coolValue(double x) { m_coolValue = (((x >0 )&&(x<=1) )? x : 0.99);}$/;"	f	class:ogdf::FMMMLayout
cool_factor	ogdf/energybased/FMMMLayout.h	/^	double cool_factor; \/\/!< Needed for scaling the forces if coolTemperature is true.$/;"	m	class:ogdf::FMMMLayout
copy	ogdf/basic/Array.h	/^void Array<E,INDEX>::copy(const Array<E,INDEX> &array2)$/;"	f	class:ogdf::Array
copy	ogdf/basic/Array2D.h	/^void Array2D<E>::copy(const Array2D<E> &array2)$/;"	f	class:ogdf::Array2D
copy	ogdf/basic/BoundedStack.h	/^	void copy(const BoundedStack<E> &S)$/;"	f	class:ogdf::BoundedStack
copy	ogdf/basic/Graph.cpp	/^void Graph::copy(const Graph &G)$/;"	f	class:ogdf::Graph
copy	ogdf/basic/Graph.cpp	/^void Graph::copy(const Graph &G, NodeArray<node> &mapNode,$/;"	f	class:ogdf::Graph
copy	ogdf/basic/GraphCopy.h	/^	edge copy(edge e) const { return m_eCopy[e].front(); }$/;"	f	class:ogdf::GraphCopy
copy	ogdf/basic/GraphCopy.h	/^	edge copy(edge e) const { return m_eCopy[e]; }$/;"	f	class:ogdf::GraphCopySimple
copy	ogdf/basic/GraphCopy.h	/^	node copy(node v) const { return m_vCopy[v]; }$/;"	f	class:ogdf::GraphCopy
copy	ogdf/basic/GraphCopy.h	/^	node copy(node v) const { return m_vCopy[v]; }$/;"	f	class:ogdf::GraphCopySimple
copy	ogdf/basic/Hashing.h	/^	virtual HashElementBase *copy(HashElementBase *pElement) const {$/;"	f	class:ogdf::Hashing
copy	ogdf/basic/List.h	/^	void copy(const ListPure<E> &L) {$/;"	f	class:ogdf::ListPure
copy	ogdf/basic/SList.h	/^	void copy(const SListPure<E> &L) {$/;"	f	class:ogdf::SListPure
copy	ogdf/basic/Stack.h	/^	void copy(const StackPure<E> &S) {$/;"	f	class:ogdf::StackPure
copyAll	ogdf/basic/Hashing.cpp	/^void HashingBase::copyAll(const HashingBase &H)$/;"	f	class:ogdf::HashingBase
copyEdgeTo	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::copyEdgeTo(edge e, MultilevelGraph &MLG, std::map<node, node> &tempNodeAssociations, bool associate, int index)$/;"	f	class:ogdf::MultilevelGraph
copyFromGraph	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::copyFromGraph(const Graph &G, NodeArray<int> & \/*nodeAssociations*\/, EdgeArray<int> & \/* edgeAssociations *\/)$/;"	f	class:ogdf::MultilevelGraph
copyLCA	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::copyLCA($/;"	f	class:ogdf::ClusterGraph
copyNodeTo	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::copyNodeTo(node v, MultilevelGraph &MLG, std::map<node, node> &tempNodeAssociations, bool associate, int index)$/;"	f	class:ogdf::MultilevelGraph
copyPathToClipboard	ui/pathspecifydialog.cpp	/^void PathSpecifyDialog::copyPathToClipboard()$/;"	f	class:PathSpecifyDialog
copySelectedPathToClipboard	ui/mainwindow.cpp	/^void MainWindow::copySelectedPathToClipboard()$/;"	f	class:MainWindow
copySelectedSequencesToClipboard	ui/mainwindow.cpp	/^void MainWindow::copySelectedSequencesToClipboard()$/;"	f	class:MainWindow
copySelectedSequencesToClipboardActionTriggered	ui/mainwindow.cpp	/^void MainWindow::copySelectedSequencesToClipboardActionTriggered()$/;"	f	class:MainWindow
copySequenceToClipboard	ui/querypathsequencecopybutton.cpp	/^void QueryPathSequenceCopyButton::copySequenceToClipboard()$/;"	f	class:QueryPathSequenceCopyButton
copy_item	ogdf/internal/energybased/ParticleInfo.h	/^	ListIterator<ParticleInfo>  copy_item;  \/\/the item of this entry in the copy List$/;"	m	class:ogdf::ParticleInfo
corruptCompoundGraph	ogdf/fileformats/Ogml.h	/^		corruptCompoundGraph$/;"	e	enum:ogdf::Ogml::GraphType
counterClockwiseFacePred	ogdf/basic/Graph_d.h	/^	adjEntry counterClockwiseFacePred() const { return cyclicPred()->m_twin; }$/;"	f	class:ogdf::AdjElement
counterClockwiseFaceSucc	ogdf/basic/Graph_d.h	/^	adjEntry counterClockwiseFaceSucc() const { return m_twin->cyclicSucc(); }$/;"	f	class:ogdf::AdjElement
counterclock	ogdf/basic/geometry.h	/^	bool counterclock() { return m_counterclock; }$/;"	f	class:ogdf::DPolygon
cout_preorder	ogdf/internal/energybased/QuadTreeNM.cpp	/^void QuadTreeNM::cout_preorder(QuadTreeNodeNM* node_ptr)$/;"	f	class:ogdf::QuadTreeNM
cout_preorder	ogdf/internal/energybased/QuadTreeNM.cpp	/^void QuadTreeNM::cout_preorder(QuadTreeNodeNM* node_ptr, int precision)$/;"	f	class:ogdf::QuadTreeNM
cpuFeatures	ogdf/basic/System.h	/^	static int cpuFeatures() { return s_cpuFeatures; }$/;"	f	class:ogdf::System
cpuSupports	ogdf/basic/System.h	/^	static bool cpuSupports(CPUFeature feature) {$/;"	f	class:ogdf::System
cpufEST	ogdf/basic/System.h	/^	cpufEST,    \/\/!< Enhanced Intel SpeedStep Technology$/;"	e	enum:ogdf::CPUFeature
cpufMMX	ogdf/basic/System.h	/^	cpufMMX,    \/\/!< Intel MMX Technology$/;"	e	enum:ogdf::CPUFeature
cpufMONITOR	ogdf/basic/System.h	/^	cpufMONITOR \/\/!< Processor supports MONITOR\/MWAIT instructions$/;"	e	enum:ogdf::CPUFeature
cpufSMX	ogdf/basic/System.h	/^	cpufSMX,    \/\/!< Safer Mode Extensions$/;"	e	enum:ogdf::CPUFeature
cpufSSE	ogdf/basic/System.h	/^	cpufSSE,    \/\/!< Streaming SIMD Extensions (SSE)$/;"	e	enum:ogdf::CPUFeature
cpufSSE2	ogdf/basic/System.h	/^	cpufSSE2,   \/\/!< Streaming SIMD Extensions 2 (SSE2)$/;"	e	enum:ogdf::CPUFeature
cpufSSE3	ogdf/basic/System.h	/^	cpufSSE3,   \/\/!< Streaming SIMD Extensions 3 (SSE3)$/;"	e	enum:ogdf::CPUFeature
cpufSSE4_1	ogdf/basic/System.h	/^	cpufSSE4_1, \/\/!< Streaming SIMD Extensions 4.1 (SSE4.1)$/;"	e	enum:ogdf::CPUFeature
cpufSSE4_2	ogdf/basic/System.h	/^	cpufSSE4_2, \/\/!< Streaming SIMD Extensions 4.2 (SSE4.2)$/;"	e	enum:ogdf::CPUFeature
cpufSSSE3	ogdf/basic/System.h	/^	cpufSSSE3,  \/\/!< Supplemental Streaming SIMD Extensions 3 (SSSE3)$/;"	e	enum:ogdf::CPUFeature
cpufVMX	ogdf/basic/System.h	/^	cpufVMX,    \/\/!< Virtual Machine Extensions$/;"	e	enum:ogdf::CPUFeature
cpufmEST	ogdf/basic/System.h	/^	cpufmEST     = 1 << cpufEST,    \/\/!< Enhanced Intel SpeedStep Technology$/;"	e	enum:ogdf::CPUFeatureMask
cpufmMMX	ogdf/basic/System.h	/^	cpufmMMX     = 1 << cpufMMX,    \/\/!< Intel MMX Technology$/;"	e	enum:ogdf::CPUFeatureMask
cpufmMONITOR	ogdf/basic/System.h	/^	cpufmMONITOR = 1 << cpufMONITOR \/\/!< Processor supports MONITOR\/MWAIT instructions$/;"	e	enum:ogdf::CPUFeatureMask
cpufmSMX	ogdf/basic/System.h	/^	cpufmSMX     = 1 << cpufSMX,    \/\/!< Safer Mode Extensions$/;"	e	enum:ogdf::CPUFeatureMask
cpufmSSE	ogdf/basic/System.h	/^	cpufmSSE     = 1 << cpufSSE,    \/\/!< Streaming SIMD Extensions (SSE)$/;"	e	enum:ogdf::CPUFeatureMask
cpufmSSE2	ogdf/basic/System.h	/^	cpufmSSE2    = 1 << cpufSSE2,   \/\/!< Streaming SIMD Extensions 2 (SSE2)$/;"	e	enum:ogdf::CPUFeatureMask
cpufmSSE3	ogdf/basic/System.h	/^	cpufmSSE3    = 1 << cpufSSE3,   \/\/!< Streaming SIMD Extensions 3 (SSE3)$/;"	e	enum:ogdf::CPUFeatureMask
cpufmSSE4_1	ogdf/basic/System.h	/^	cpufmSSE4_1  = 1 << cpufSSE4_1, \/\/!< Streaming SIMD Extensions 4.1 (SSE4.1)$/;"	e	enum:ogdf::CPUFeatureMask
cpufmSSE4_2	ogdf/basic/System.h	/^	cpufmSSE4_2  = 1 << cpufSSE4_2, \/\/!< Streaming SIMD Extensions 4.2 (SSE4.2)$/;"	e	enum:ogdf::CPUFeatureMask
cpufmSSSE3	ogdf/basic/System.h	/^	cpufmSSSE3   = 1 << cpufSSSE3,  \/\/!< Supplemental Streaming SIMD Extensions 3 (SSSE3)$/;"	e	enum:ogdf::CPUFeatureMask
cpufmVMX	ogdf/basic/System.h	/^	cpufmVMX     = 1 << cpufVMX,    \/\/!< Virtual Machine Extensions$/;"	e	enum:ogdf::CPUFeatureMask
crBegin	ogdf/cluster/ClusterGraph.h	/^	ListConstIterator<ClusterElement*> crBegin() const{ return m_children.rbegin();}$/;"	f	class:ogdf::ClusterElement
createBlastTempDirectory	command_line/commoncommandlinefunctions.cpp	/^bool createBlastTempDirectory()$/;"	f
createBlastTempDirectory	tests/bandagetests.cpp	/^bool BandageTests::createBlastTempDirectory()$/;"	f	class:BandageTests
createCluster	ogdf/cluster/ClusterGraph.cpp	/^cluster ClusterGraph::createCluster(SList<node>& nodes, const cluster parent)$/;"	f	class:ogdf::ClusterGraph
createDeBruijnEdge	graph/assemblygraph.cpp	/^void AssemblyGraph::createDeBruijnEdge(QString node1Name, QString node2Name,$/;"	f	class:AssemblyGraph
createEdgeElement	ogdf/basic/Graph.cpp	/^edge Graph::createEdgeElement(node v, node w, adjEntry adjSrc, adjEntry adjTgt)$/;"	f	class:ogdf::Graph
createEmpty	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::createEmpty(const Graph &G)$/;"	f	class:ogdf::GraphCopy
createEmptyCluster	ogdf/cluster/ClusterGraph.cpp	/^cluster ClusterGraph::createEmptyCluster(const cluster parent, int clusterId)$/;"	f	class:ogdf::ClusterGraph
createFaceElement	ogdf/basic/CombinatorialEmbedding.cpp	/^face ConstCombinatorialEmbedding::createFaceElement(adjEntry adjFirst)$/;"	f	class:ogdf::ConstCombinatorialEmbedding
createGlobals	tests/bandagetests.cpp	/^void BandageTests::createGlobals()$/;"	f	class:BandageTests
createObjectTree	ogdf/fileformats/GmlParser.cpp	/^void GmlParser::createObjectTree(istream &is, bool doCheck)$/;"	f	class:ogdf::GmlParser
createObjectTree	ogdf/fileformats/XmlParser.cpp	/^void XmlParser::createObjectTree(istream &is, bool doCheck)$/;"	f	class:ogdf::XmlParser
createParseTree	ogdf/fileformats/DinoXmlParser.cpp	/^	void DinoXmlParser::createParseTree()$/;"	f	class:ogdf::DinoXmlParser
createTempQueryFiles	blast/blastqueries.cpp	/^void BlastQueries::createTempQueryFiles()$/;"	f	class:BlastQueries
create_all_placement_sectors	ogdf/energybased/Multilevel.cpp	/^void Multilevel::create_all_placement_sectors($/;"	f	class:ogdf::Multilevel
create_edges_edgedistances_and_lambda_Lists	ogdf/energybased/Multilevel.cpp	/^void Multilevel::create_edges_edgedistances_and_lambda_Lists($/;"	f	class:ogdf::Multilevel
create_initial_placement	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::create_initial_placement (Graph& G, NodeArray<NodeAttributes>& A)$/;"	f	class:ogdf::FMMMLayout
create_maximum_connected_subGraphs	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::create_maximum_connected_subGraphs($/;"	f	class:ogdf::FMMMLayout
create_moon_nodes_and_pm_nodes	ogdf/energybased/Multilevel.cpp	/^void Multilevel::create_moon_nodes_and_pm_nodes($/;"	f	class:ogdf::Multilevel
create_multilevel_representations	ogdf/energybased/Multilevel.cpp	/^void Multilevel::create_multilevel_representations($/;"	f	class:ogdf::Multilevel
create_new_lb_child	ogdf/internal/energybased/QuadTreeNM.cpp	/^void QuadTreeNM::create_new_lb_child($/;"	f	class:ogdf::QuadTreeNM
create_new_lb_child	ogdf/internal/energybased/QuadTreeNM.cpp	/^void QuadTreeNM::create_new_lb_child()$/;"	f	class:ogdf::QuadTreeNM
create_new_lt_child	ogdf/internal/energybased/QuadTreeNM.cpp	/^void QuadTreeNM::create_new_lt_child($/;"	f	class:ogdf::QuadTreeNM
create_new_lt_child	ogdf/internal/energybased/QuadTreeNM.cpp	/^void QuadTreeNM::create_new_lt_child()$/;"	f	class:ogdf::QuadTreeNM
create_new_rb_child	ogdf/internal/energybased/QuadTreeNM.cpp	/^void QuadTreeNM::create_new_rb_child($/;"	f	class:ogdf::QuadTreeNM
create_new_rb_child	ogdf/internal/energybased/QuadTreeNM.cpp	/^void QuadTreeNM::create_new_rb_child()$/;"	f	class:ogdf::QuadTreeNM
create_new_rt_child	ogdf/internal/energybased/QuadTreeNM.cpp	/^void QuadTreeNM::create_new_rt_child($/;"	f	class:ogdf::QuadTreeNM
create_new_rt_child	ogdf/internal/energybased/QuadTreeNM.cpp	/^void QuadTreeNM::create_new_rt_child()$/;"	f	class:ogdf::QuadTreeNM
create_postscript_drawing	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::create_postscript_drawing(GraphAttributes& AG, char* ps_file)$/;"	f	class:ogdf::FMMMLayout
create_random_pos	ogdf/energybased/Multilevel.cpp	/^inline DPoint Multilevel::create_random_pos(DPoint center,double radius,double angle_1,$/;"	f	class:ogdf::Multilevel
create_sorted_coordinate_Lists	ogdf/internal/energybased/NMM.cpp	/^void NMM::create_sorted_coordinate_Lists($/;"	f	class:ogdf::NMM
create_suns_and_planets	ogdf/energybased/Multilevel.cpp	/^void Multilevel::create_suns_and_planets($/;"	f	class:ogdf::Multilevel
cross_ref_item	ogdf/internal/energybased/ParticleInfo.h	/^	ListIterator<ParticleInfo> cross_ref_item;	\/\/the Listiterator of the$/;"	m	class:ogdf::ParticleInfo
cstr	ogdf/basic/String.h	/^	const char *cstr() const { return m_pChar; }$/;"	f	class:ogdf::String
cut_vertex	ogdf/energybased/Edge.h	/^	node cut_vertex;$/;"	m	class:ogdf::Edge
cyclicPred	ogdf/basic/Graph_d.h	/^inline adjEntry AdjElement::cyclicPred() const$/;"	f	class:ogdf::AdjElement
cyclicPred	ogdf/basic/List.h	/^	ListConstIterator<E> cyclicPred(ListConstIterator<E> it) const {$/;"	f	class:ogdf::List
cyclicPred	ogdf/basic/List.h	/^	ListConstIterator<E> cyclicPred(ListConstIterator<E> it) const {$/;"	f	class:ogdf::ListPure
cyclicPred	ogdf/basic/List.h	/^	ListIterator<E> cyclicPred(ListIterator<E> it) {$/;"	f	class:ogdf::List
cyclicPred	ogdf/basic/List.h	/^	ListIterator<E> cyclicPred(ListIterator<E> it) {$/;"	f	class:ogdf::ListPure
cyclicSucc	ogdf/basic/Graph_d.h	/^inline adjEntry AdjElement::cyclicSucc() const$/;"	f	class:ogdf::AdjElement
cyclicSucc	ogdf/basic/List.h	/^	ListConstIterator<E> cyclicSucc(ListConstIterator<E> it) const {$/;"	f	class:ogdf::List
cyclicSucc	ogdf/basic/List.h	/^	ListConstIterator<E> cyclicSucc(ListConstIterator<E> it) const {$/;"	f	class:ogdf::ListPure
cyclicSucc	ogdf/basic/List.h	/^	ListIterator<E> cyclicSucc(ListIterator<E> it) {$/;"	f	class:ogdf::List
cyclicSucc	ogdf/basic/List.h	/^	ListIterator<E> cyclicSucc(ListIterator<E> it) {$/;"	f	class:ogdf::ListPure
cyclicSucc	ogdf/basic/SList.h	/^	SListConstIterator<E> cyclicSucc(SListConstIterator<E> it) const {$/;"	f	class:ogdf::SList
cyclicSucc	ogdf/basic/SList.h	/^	SListConstIterator<E> cyclicSucc(SListConstIterator<E> it) const {$/;"	f	class:ogdf::SListPure
cyclicSucc	ogdf/basic/SList.h	/^	SListIterator<E> cyclicSucc(SListIterator<E> it) {$/;"	f	class:ogdf::SList
cyclicSucc	ogdf/basic/SList.h	/^	SListIterator<E> cyclicSucc(SListIterator<E> it) {$/;"	f	class:ogdf::SListPure
deallocate	ogdf/internal/basic/MallocMemoryAllocator.h	/^	static void deallocate(size_t \/* nBytes *\/, void *p) { free(p); }$/;"	f	class:ogdf::MallocMemoryAllocator
deallocate	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^void PoolMemoryAllocator::deallocate(size_t nBytes, void *p) {$/;"	f	class:ogdf::PoolMemoryAllocator
deallocateList	ogdf/internal/basic/MallocMemoryAllocator.h	/^	static void deallocateList(size_t \/* nBytes *\/, void *pHead, void *pTail)$/;"	f	class:ogdf::MallocMemoryAllocator
deallocateList	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^void PoolMemoryAllocator::deallocateList(size_t nBytes, void *pHead, void *pTail) {$/;"	f	class:ogdf::PoolMemoryAllocator
deallocate_memory	ogdf/internal/energybased/NMM.cpp	/^void NMM::deallocate_memory()$/;"	f	class:ogdf::NMM
deallocate_memory_for_rep_calc_classes	ogdf/energybased/FMMMLayout.h	/^	void deallocate_memory_for_rep_calc_classes()$/;"	f	class:ogdf::FMMMLayout
debugLevel	ogdf/basic/basic.cpp	/^	DebugLevel debugLevel;$/;"	m	namespace:ogdf	file:
decompose_subtreenode	ogdf/internal/energybased/NMM.cpp	/^void NMM::decompose_subtreenode($/;"	f	class:ogdf::NMM
deconstruct	ogdf/basic/Array.h	/^void Array<E,INDEX>::deconstruct()$/;"	f	class:ogdf::Array
deconstruct	ogdf/basic/Array2D.h	/^void Array2D<E>::deconstruct()$/;"	f	class:ogdf::Array2D
dedicated_pm_node	ogdf/internal/energybased/NodeAttributes.h	/^	node dedicated_pm_node;\/\/if type == 4 the dedicated_pm_node is saved here$/;"	m	class:ogdf::NodeAttributes
dedicated_sun_distance	ogdf/internal/energybased/NodeAttributes.h	/^	double dedicated_sun_distance;\/\/the distance to the dedicated sun node of the galaxy$/;"	m	class:ogdf::NodeAttributes
dedicated_sun_node	ogdf/internal/energybased/NodeAttributes.h	/^	node dedicated_sun_node; \/\/the dedicates s_node of the solar system of this node$/;"	m	class:ogdf::NodeAttributes
deepCopy	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::deepCopy(const ClusterGraph &C,Graph &G)$/;"	f	class:ogdf::ClusterGraph
deepCopy	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::deepCopy(const ClusterGraph &C,Graph &G,$/;"	f	class:ogdf::ClusterGraph
defaultCustomNodeColour	program/settings.h	/^    QColor defaultCustomNodeColour;$/;"	m	class:Settings
degree	ogdf/basic/Graph_d.h	/^	int degree() const { return m_indeg + m_outdeg; }$/;"	f	class:ogdf::NodeElement
del	ogdf/basic/Graph_d.h	/^	void del(GraphElement *pX) {$/;"	f	class:ogdf::GraphListBase
del	ogdf/basic/Graph_d.h	/^	void del(T *pX) {$/;"	f	class:ogdf::GraphList
del	ogdf/basic/Hashing.cpp	/^void HashingBase::del(HashElementBase *pElement)$/;"	f	class:ogdf::HashingBase
del	ogdf/basic/Hashing.h	/^	void del(const K &key) {$/;"	f	class:ogdf::Hashing
del	ogdf/basic/List.h	/^	void del(ListIterator<E> it) {$/;"	f	class:ogdf::List
del	ogdf/basic/List.h	/^	void del(ListIterator<E> it) {$/;"	f	class:ogdf::ListPure
delCluster	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::delCluster(cluster c)$/;"	f	class:ogdf::ClusterGraph
delCopy	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::delCopy(edge e)$/;"	f	class:ogdf::GraphCopy
delCopy	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::delCopy(node v)$/;"	f	class:ogdf::GraphCopy
delEdge	ogdf/basic/Graph.cpp	/^void Graph::delEdge(edge e)$/;"	f	class:ogdf::Graph
delNode	ogdf/basic/Graph.cpp	/^void Graph::delNode(node v)$/;"	f	class:ogdf::Graph
delPure	ogdf/basic/Graph_d.h	/^	void delPure(T *pX) {$/;"	f	class:ogdf::GraphList
delSucc	ogdf/basic/SList.h	/^	void delSucc(SListIterator<E> itBefore) {$/;"	f	class:ogdf::SList
delSucc	ogdf/basic/SList.h	/^	void delSucc(SListIterator<E> itBefore) {$/;"	f	class:ogdf::SListPure
del_min	ogdf/energybased/PQueue.h	/^	void del_min()$/;"	f	class:ogdf::PQueue
deleteBlastTempDirectory	command_line/commoncommandlinefunctions.cpp	/^void deleteBlastTempDirectory()$/;"	f
deleteBlastTempDirectory	tests/bandagetests.cpp	/^void BandageTests::deleteBlastTempDirectory()$/;"	f	class:BandageTests
deleteEdge	ogdf/internal/energybased/MultilevelGraph.cpp	/^bool MultilevelGraph::deleteEdge(NodeMerge * NM, edge theEdge)$/;"	f	class:ogdf::MultilevelGraph
deleteEdges	graph/assemblygraph.cpp	/^void AssemblyGraph::deleteEdges(std::vector<DeBruijnEdge *> * edges)$/;"	f	class:AssemblyGraph
deleteNodes	graph/assemblygraph.cpp	/^void AssemblyGraph::deleteNodes(std::vector<DeBruijnNode *> * nodes)$/;"	f	class:AssemblyGraph
deleteQueryPathsDialog	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::deleteQueryPathsDialog()$/;"	f	class:BlastSearchDialog
deleteTempFiles	blast/blastqueries.cpp	/^void BlastQueries::deleteTempFiles()$/;"	f	class:BlastQueries
delete_all_subGraphs	ogdf/energybased/FMMMLayout.h	/^	void delete_all_subGraphs($/;"	f	class:ogdf::FMMMLayout
delete_empty_subtrees	ogdf/internal/energybased/NMM.cpp	/^void NMM::delete_empty_subtrees(QuadTreeNM& T)$/;"	f	class:ogdf::NMM
delete_multilevel_representations	ogdf/energybased/Multilevel.cpp	/^void Multilevel::delete_multilevel_representations($/;"	f	class:ogdf::Multilevel
delete_node	ogdf/energybased/Set.cpp	/^void Set::delete_node(node del_node)$/;"	f	class:ogdf::Set
delete_parallel_edges	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::delete_parallel_edges($/;"	f	class:ogdf::FMMMLayout
delete_parallel_edges_and_update_edgelength	ogdf/energybased/Multilevel.cpp	/^void Multilevel::delete_parallel_edges_and_update_edgelength($/;"	f	class:ogdf::Multilevel
delete_red_quad_tree_and_count_treenodes	ogdf/internal/energybased/NMM.cpp	/^inline void NMM::delete_red_quad_tree_and_count_treenodes(QuadTreeNM& T)$/;"	f	class:ogdf::NMM
delete_sparse_subtree	ogdf/internal/energybased/NMM.cpp	/^void NMM::delete_sparse_subtree(QuadTreeNM& T, QuadTreeNodeNM* new_leaf_ptr)$/;"	f	class:ogdf::NMM
delete_tree	ogdf/internal/energybased/QuadTreeNM.cpp	/^void QuadTreeNM::delete_tree(QuadTreeNodeNM* node_ptr)$/;"	f	class:ogdf::QuadTreeNM
delete_tree_and_count_nodes	ogdf/internal/energybased/QuadTreeNM.cpp	/^void QuadTreeNM::delete_tree_and_count_nodes(QuadTreeNodeNM* node_ptr, int& nodecounter)$/;"	f	class:ogdf::QuadTreeNM
dependency	ogdf/basic/Graph_d.h	/^		dependency = 2$/;"	e	enum:ogdf::Graph::EdgeType
depth	ogdf/cluster/ClusterGraph.h	/^	int depth() const { return m_depth; }$/;"	f	class:ogdf::ClusterElement
depth	ogdf/cluster/ClusterGraph.h	/^	int& depth()	  { return m_depth; }$/;"	f	class:ogdf::ClusterElement
depthEffectOnWidth	program/settings.h	/^    FloatSetting depthEffectOnWidth;$/;"	m	class:Settings
depthPower	program/settings.h	/^    FloatSetting depthPower;$/;"	m	class:Settings
depthRangeChanged	ui/mainwindow.cpp	/^void MainWindow::depthRangeChanged()$/;"	f	class:MainWindow
destroy	ogdf/basic/Hashing.h	/^	virtual void destroy(HashElementBase *pElement) {$/;"	f	class:ogdf::Hashing
destroyAll	ogdf/basic/Hashing.cpp	/^void HashingBase::destroyAll()$/;"	f	class:ogdf::HashingBase
destroyAttributes	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::destroyAttributes(long attr)$/;"	f	class:ogdf::GraphAttributes
destroyObjectList	ogdf/fileformats/GmlParser.cpp	/^void GmlParser::destroyObjectList(GmlObject *object)$/;"	f	class:ogdf::GmlParser
destroyObjectList	ogdf/fileformats/XmlParser.cpp	/^void XmlParser::destroyObjectList(XmlObject *object)$/;"	f	class:ogdf::XmlParser
destroyParseTree	ogdf/fileformats/DinoXmlParser.cpp	/^	void DinoXmlParser::destroyParseTree(XmlTagObject *root)$/;"	f	class:ogdf::DinoXmlParser
det	ogdf/basic/Array2D.h	/^float Array2D<E>::det() const$/;"	f	class:ogdf::Array2D
det	ogdf/basic/geometry.h	/^	double det(const DSegment &segment) const {$/;"	f	class:ogdf::DSegment
determineContiguity	graph/debruijnnode.cpp	/^void DeBruijnNode::determineContiguity()$/;"	f	class:DeBruijnNode
determineContiguityFromSelectedNode	ui/mainwindow.cpp	/^void MainWindow::determineContiguityFromSelectedNode()$/;"	f	class:MainWindow
determineGraphInfo	graph/assemblygraph.cpp	/^void AssemblyGraph::determineGraphInfo()$/;"	f	class:AssemblyGraph
determineIfDrawn	graph/debruijnedge.h	/^    void determineIfDrawn() {m_drawn = edgeIsVisible();}$/;"	f	class:DeBruijnEdge
dfsBiconComp	ogdf/basic/simple_graph_alg.cpp	/^static void dfsBiconComp (const Graph &G,$/;"	f	namespace:ogdf
dfsIsAcyclic	ogdf/basic/simple_graph_alg.cpp	/^void dfsIsAcyclic(const Graph &G,$/;"	f	namespace:ogdf
dfsIsAcyclicUndirected	ogdf/basic/simple_graph_alg.cpp	/^void dfsIsAcyclicUndirected(const Graph &G,$/;"	f	namespace:ogdf
dfsIsBicon	ogdf/basic/simple_graph_alg.cpp	/^static node dfsIsBicon (const Graph &G, node v, node father,$/;"	f	namespace:ogdf
dfsIsForest	ogdf/basic/simple_graph_alg.cpp	/^static bool dfsIsForest (node v,$/;"	f	namespace:ogdf
dfsMakeBicon	ogdf/basic/simple_graph_alg.cpp	/^static void dfsMakeBicon (Graph &G,$/;"	f	namespace:ogdf
dfsStrongComponents	ogdf/basic/simple_graph_alg.cpp	/^void dfsStrongComponents($/;"	f	namespace:ogdf
differentSidesOfLine	ui/mygraphicsview.cpp	/^bool MyGraphicsView::differentSidesOfLine(QPointF p1, QPointF p2, QLineF line)$/;"	f	class:MyGraphicsView
differentSidesOfLine	ui/mygraphicsview.cpp	/^bool MyGraphicsView::differentSidesOfLine(QPointF p1, QPointF p2, QPointF p3, QPointF p4, QLineF line)$/;"	f	class:MyGraphicsView
directed	ogdf/basic/GraphAttributes.h	/^	bool directed() {$/;"	f	class:ogdf::GraphAttributes
directed	ogdf/basic/GraphAttributes.h	/^	void directed(bool directed) {$/;"	f	class:ogdf::GraphAttributes
directedPredefKey	ogdf/fileformats/GmlParser.h	/^		namePredefKey, graphPredefKey, versionPredefKey, directedPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
directedPredefKey	ogdf/fileformats/XmlParser.h	/^		namePredefKey, graphPredefKey, versionPredefKey, directedPredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
disconnect	ogdf/basic/AdjEntryArray.h	/^	virtual void disconnect() {$/;"	f	class:ogdf::AdjEntryArray
disconnect	ogdf/basic/EdgeArray.h	/^	virtual void disconnect() {$/;"	f	class:ogdf::EdgeArray
disconnect	ogdf/basic/NodeArray.h	/^	virtual void disconnect() {$/;"	f	class:ogdf::NodeArray
disconnect	ogdf/cluster/ClusterArray.h	/^	virtual void disconnect() {$/;"	f	class:ogdf::ClusterArray
displayBlastHits	program/settings.h	/^    bool displayBlastHits;$/;"	m	class:Settings
displayGraphDetails	ui/mainwindow.cpp	/^void MainWindow::displayGraphDetails()$/;"	f	class:MainWindow
displayNodeCsvData	program/settings.h	/^    bool displayNodeCsvData;$/;"	m	class:Settings
displayNodeCsvDataCol	program/settings.h	/^    int  displayNodeCsvDataCol;$/;"	m	class:Settings
displayNodeCustomLabels	program/settings.h	/^    bool displayNodeCustomLabels;$/;"	m	class:Settings
displayNodeDepth	program/settings.h	/^    bool displayNodeDepth;$/;"	m	class:Settings
displayNodeLengths	program/settings.h	/^    bool displayNodeLengths;$/;"	m	class:Settings
displayNodeNames	program/settings.h	/^    bool displayNodeNames;$/;"	m	class:Settings
distance	graph/graphicsitemnode.cpp	/^double GraphicsItemNode::distance(QPointF p1, QPointF p2) const$/;"	f	class:GraphicsItemNode
distance	ogdf/basic/geometry.cpp	/^double DPoint::distance(const DPoint &p) const$/;"	f	class:ogdf::DPoint
distance	ogdf/basic/geometry.cpp	/^double IPoint::distance(const IPoint &p) const$/;"	f	class:ogdf::IPoint
distance	ui/mygraphicsview.cpp	/^double MyGraphicsView::distance(double x1, double y1, double x2, double y2)$/;"	f	class:MyGraphicsView
distancePathSearchQuery1	program/memory.h	/^    QString distancePathSearchQuery1;$/;"	m	class:Memory
distancePathSearchQuery1Path	program/memory.h	/^    QString distancePathSearchQuery1Path;$/;"	m	class:Memory
distancePathSearchQuery2	program/memory.h	/^    QString distancePathSearchQuery2;$/;"	m	class:Memory
distancePathSearchQuery2Path	program/memory.h	/^    QString distancePathSearchQuery2Path;$/;"	m	class:Memory
distanceSearchResults	program/memory.h	/^    QList<QueryDistance> distanceSearchResults;$/;"	m	class:Memory
dlConsistencyChecks	ogdf/basic/basic.h	/^		dlMinimal, dlExtendedChecking, dlConsistencyChecks, dlHeavyChecks$/;"	e	enum:ogdf::DebugLevel
dlExtendedChecking	ogdf/basic/basic.h	/^		dlMinimal, dlExtendedChecking, dlConsistencyChecks, dlHeavyChecks$/;"	e	enum:ogdf::DebugLevel
dlHeavyChecks	ogdf/basic/basic.h	/^		dlMinimal, dlExtendedChecking, dlConsistencyChecks, dlHeavyChecks$/;"	e	enum:ogdf::DebugLevel
dlMinimal	ogdf/basic/basic.h	/^		dlMinimal, dlExtendedChecking, dlConsistencyChecks, dlHeavyChecks$/;"	e	enum:ogdf::DebugLevel
doAutoBlastSearch	blast/blastsearch.cpp	/^QString BlastSearch::doAutoBlastSearch()$/;"	f	class:BlastSearch
doCircularSequencesMatch	tests/bandagetests.cpp	/^bool BandageTests::doCircularSequencesMatch(QByteArray s1, QByteArray s2)$/;"	f	class:BandageTests
doCreateCluster	ogdf/cluster/ClusterGraph.cpp	/^cluster ClusterGraph::doCreateCluster(SList<node>& nodes,$/;"	f	class:ogdf::ClusterGraph
doDestruction	ogdf/basic/Graph_d.h	/^template<>inline bool doDestruction<adjEntry>(const adjEntry *) { return false; }$/;"	f	namespace:ogdf
doDestruction	ogdf/basic/Graph_d.h	/^template<>inline bool doDestruction<edge>(const edge *) { return false; }$/;"	f	namespace:ogdf
doDestruction	ogdf/basic/Graph_d.h	/^template<>inline bool doDestruction<node>(const node *) { return false; }$/;"	f	namespace:ogdf
doDestruction	ogdf/basic/basic.h	/^	template<>inline bool doDestruction(const char *) { return false; }$/;"	f	namespace:ogdf
doDestruction	ogdf/basic/basic.h	/^	template<>inline bool doDestruction<double>(const double *) { return false; }$/;"	f	namespace:ogdf
doDestruction	ogdf/basic/basic.h	/^	template<>inline bool doDestruction<int>(const int *) { return false; }$/;"	f	namespace:ogdf
doDestruction	ogdf/basic/basic.h	/^	template<class E>inline bool doDestruction(const E *) { return true; }$/;"	f	namespace:ogdf
doInit	ogdf/fileformats/GmlParser.cpp	/^void GmlParser::doInit(istream &is, bool doCheck)$/;"	f	class:ogdf::GmlParser
doesNodeLeadAway	graph/debruijnnode.cpp	/^DeBruijnEdge * DeBruijnNode::doesNodeLeadAway(DeBruijnNode * node) const$/;"	f	class:DeBruijnNode
doesNodeLeadIn	graph/debruijnnode.cpp	/^DeBruijnEdge * DeBruijnNode::doesNodeLeadIn(DeBruijnNode * node) const$/;"	f	class:DeBruijnNode
doesPathLeadOnlyToNode	graph/debruijnnode.cpp	/^bool DeBruijnNode::doesPathLeadOnlyToNode(DeBruijnNode * node, bool includeReverseComplement)$/;"	f	class:DeBruijnNode
doubleMode	program/settings.h	/^    bool doubleMode;$/;"	m	class:Settings
doubleModeNodeSeparation	program/settings.h	/^    FloatSetting doubleModeNodeSeparation;$/;"	m	class:Settings
doubleWeight	ogdf/basic/GraphAttributes.h	/^	const double &doubleWeight(edge e) const {$/;"	f	class:ogdf::GraphAttributes
doubleWeight	ogdf/basic/GraphAttributes.h	/^	double &doubleWeight(edge e) {$/;"	f	class:ogdf::GraphAttributes
down_left_corner	ogdf/energybased/FMMMLayout.h	/^	DPoint down_left_corner; \/\/!< Holds down left corner of the comput. box.$/;"	m	class:ogdf::FMMMLayout
down_left_corner	ogdf/internal/energybased/FruchtermanReingold.h	/^	DPoint down_left_corner;\/\/down left corner of drawing box$/;"	m	class:ogdf::FruchtermanReingold
down_left_corner	ogdf/internal/energybased/NMM.h	/^	DPoint down_left_corner;\/\/down left corner of drawing box$/;"	m	class:ogdf::NMM
dragStrength	program/settings.h	/^    double dragStrength;$/;"	m	class:Settings
drawGraph	ui/mainwindow.cpp	/^void MainWindow::drawGraph()$/;"	f	class:MainWindow
drawTextPathAtLocation	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::drawTextPathAtLocation(QPainter * painter, QPainterPath textPath, QPointF centre)$/;"	f	class:GraphicsItemNode
dummy	ogdf/basic/Graph_d.h	/^		dummy,$/;"	e	enum:ogdf::Graph::NodeType
duplicateGraphicsNode	graph/assemblygraph.cpp	/^void AssemblyGraph::duplicateGraphicsNode(DeBruijnNode * originalNode, DeBruijnNode * newNode, MyGraphicsScene * scene)$/;"	f	class:AssemblyGraph
duplicateNodePair	graph/assemblygraph.cpp	/^void AssemblyGraph::duplicateNodePair(DeBruijnNode * node, MyGraphicsScene * scene)$/;"	f	class:AssemblyGraph
duplicateSelectedNodes	ui/mainwindow.cpp	/^void MainWindow::duplicateSelectedNodes()$/;"	f	class:MainWindow
dx	ogdf/basic/geometry.h	/^	double dx() const { return m_end.m_x - m_start.m_x; }$/;"	f	class:ogdf::DLine
dy	ogdf/basic/geometry.h	/^	double dy() const { return m_end.m_y - m_start.m_y; }$/;"	f	class:ogdf::DLine
e	ogdf/basic/Math.cpp	/^	const double Math::e    = 2.71828182845904523536;$/;"	m	class:ogdf::Math	file:
e	ogdf/basic/Math.h	/^	static const double e;$/;"	m	class:ogdf::Math
e	ogdf/energybased/Edge.h	/^	edge e;$/;"	m	class:ogdf::Edge
eBlockSize	ogdf/internal/basic/PoolMemoryAllocator.h	/^		eBlockSize = 8192,$/;"	e	enum:ogdf::PoolMemoryAllocator::__anon3
eMinBytes	ogdf/internal/basic/PoolMemoryAllocator.h	/^		eMinBytes = sizeof(MemElemPtr),$/;"	e	enum:ogdf::PoolMemoryAllocator::__anon3
ePoolVectorLength	ogdf/internal/basic/PoolMemoryAllocator.h	/^		ePoolVectorLength = 15$/;"	e	enum:ogdf::PoolMemoryAllocator::__anon3
eTableSize	ogdf/internal/basic/PoolMemoryAllocator.h	/^		eTableSize = 256,$/;"	e	enum:ogdf::PoolMemoryAllocator::__anon3
e_original	ogdf/internal/energybased/EdgeAttributes.h	/^	edge e_original;$/;"	m	class:ogdf::EdgeAttributes
e_subgraph	ogdf/internal/energybased/EdgeAttributes.h	/^	edge e_subgraph;$/;"	m	class:ogdf::EdgeAttributes
edge	ogdf/basic/Graph_d.h	/^typedef EdgeElement *edge; \/\/!< The type of edges.$/;"	t	namespace:ogdf
edgeAdded	ogdf/basic/Constraints.h	/^        virtual void edgeAdded(edge \/*e*\/)    { }$/;"	f	class:ogdf::GraphConstraints
edgeAdded	ogdf/cluster/ClusterGraph.h	/^	virtual void edgeAdded(edge \/* e *\/)   { }$/;"	f	class:ogdf::ClusterGraph
edgeArrayTableSize	ogdf/basic/Graph_d.h	/^	int edgeArrayTableSize() const { return m_edgeArrayTableSize; }$/;"	f	class:ogdf::Graph
edgeArrow	ogdf/basic/GraphAttributes.h	/^		edgeArrow = 0x00800, \/\/!< edge attribute m_edgeArrow$/;"	e	enum:ogdf::GraphAttributes::__anon5
edgeColor	ogdf/basic/GraphAttributes.h	/^		edgeColor = 0x01000, \/\/!< edge attribute m_edgeColor$/;"	e	enum:ogdf::GraphAttributes::__anon5
edgeColour	program/settings.h	/^    QColor edgeColour;$/;"	m	class:Settings
edgeDeleted	ogdf/basic/Constraints.h	/^        virtual void edgeDeleted(edge \/*e*\/)  { }$/;"	f	class:ogdf::GraphConstraints
edgeDeleted	ogdf/cluster/ClusterGraph.h	/^	virtual void edgeDeleted(edge \/* e *\/) { }$/;"	f	class:ogdf::ClusterGraph
edgeDoubleWeight	ogdf/basic/GraphAttributes.h	/^		edgeDoubleWeight = 0x00010, \/\/!< edge attribute m_doubleWeight$/;"	e	enum:ogdf::GraphAttributes::__anon5
edgeGraphics	ogdf/basic/GraphAttributes.h	/^		edgeGraphics = 0x00002, \/\/!< edge attribute m_bends$/;"	e	enum:ogdf::GraphAttributes::__anon5
edgeIntWeight	ogdf/basic/GraphAttributes.h	/^		edgeIntWeight = 0x00008, \/\/!< edge attribute m_intWeight$/;"	e	enum:ogdf::GraphAttributes::__anon5
edgeIsVisible	graph/debruijnedge.cpp	/^bool DeBruijnEdge::edgeIsVisible() const$/;"	f	class:DeBruijnEdge
edgeLabel	ogdf/basic/GraphAttributes.h	/^		edgeLabel = 0x00020, \/\/!< edge attribute m_edgeLabel$/;"	e	enum:ogdf::GraphAttributes::__anon5
edgeLength	program/settings.h	/^    FloatSetting edgeLength;$/;"	m	class:Settings
edgeLengthMeasurement	ogdf/energybased/FMMMLayout.h	/^	EdgeLengthMeasurement edgeLengthMeasurement() const {$/;"	f	class:ogdf::FMMMLayout
edgeLengthMeasurement	ogdf/energybased/FMMMLayout.h	/^	void edgeLengthMeasurement(EdgeLengthMeasurement elm) { m_edgeLengthMeasurement = elm; }$/;"	f	class:ogdf::FMMMLayout
edgePredefKey	ogdf/fileformats/GmlParser.h	/^		nodePredefKey, edgePredefKey, graphicsPredefKey, xPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
edgePredefKey	ogdf/fileformats/XmlParser.h	/^		nodePredefKey, edgePredefKey, graphicsPredefKey, xPredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
edgeStyle	ogdf/basic/GraphAttributes.h	/^		edgeStyle = 0x02000, \/\/!< edge attribute m_edgeStyle, m_edgeWidth$/;"	e	enum:ogdf::GraphAttributes::__anon5
edgeStyleToOGML	ogdf/basic/GraphAttributes.cpp	/^const char * GraphAttributes::edgeStyleToOGML(const GraphAttributes::EdgeStyle & edgeStyle)$/;"	f	class:ogdf::GraphAttributes
edgeSubGraph	ogdf/basic/GraphAttributes.h	/^		edgeSubGraph = 0x10000, \/\/!< edge attribute m_subGraph$/;"	e	enum:ogdf::GraphAttributes::__anon5
edgeType	ogdf/basic/GraphAttributes.h	/^		edgeType = 0x00080, \/\/!< edge attribute m_eType$/;"	e	enum:ogdf::GraphAttributes::__anon5
edgeWeightPredefKey	ogdf/fileformats/GmlParser.h	/^		edgeWeightPredefKey, NEXTPREDEFKEY };$/;"	e	enum:ogdf::GmlParser::PredefinedKey
edgeWidth	ogdf/basic/GraphAttributes.h	/^	const double &edgeWidth(edge e) const {$/;"	f	class:ogdf::GraphAttributes
edgeWidth	ogdf/basic/GraphAttributes.h	/^	double &edgeWidth(edge e) {$/;"	f	class:ogdf::GraphAttributes
edgeWidth	program/settings.h	/^    FloatSetting edgeWidth;$/;"	m	class:Settings
edgenumbersum_of_all_levels_is_linear	ogdf/energybased/Multilevel.cpp	/^bool Multilevel::edgenumbersum_of_all_levels_is_linear($/;"	f	class:ogdf::Multilevel
edgetypePredefKey	ogdf/fileformats/XmlParser.h	/^		yPredefKey, wPredefKey, hPredefKey, nodetypePredefKey, edgetypePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
elapsedSeconds	ogdf/basic/System.cpp	/^double System::elapsedSeconds($/;"	f	class:ogdf::System
element_type	ogdf/basic/List.h	/^	typedef ListElement<E> element_type;$/;"	t	class:ogdf::List
element_type	ogdf/basic/List.h	/^	typedef ListElement<E> element_type;$/;"	t	class:ogdf::ListPure
element_type	ogdf/basic/SList.h	/^	typedef SListElement<E> element_type;$/;"	t	class:ogdf::SList
element_type	ogdf/basic/SList.h	/^	typedef SListElement<E> element_type;$/;"	t	class:ogdf::SListPure
elmBoundingCircle	ogdf/energybased/FMMMLayout.h	/^		elmBoundingCircle \/\/!< Measure from border of circle s surrounding edge end points.$/;"	e	enum:ogdf::FMMMLayout::EdgeLengthMeasurement
elmMidpoint	ogdf/energybased/FMMMLayout.h	/^		elmMidpoint,      \/\/!< Measure from center point of edge end points.$/;"	e	enum:ogdf::FMMMLayout::EdgeLengthMeasurement
embeddingOf	ogdf/basic/CombinatorialEmbedding.h	/^	const ConstCombinatorialEmbedding *embeddingOf() const { return m_pEmbedding; }$/;"	f	class:ogdf::FaceElement
embeddingOf	ogdf/basic/FaceArray.h	/^	const ConstCombinatorialEmbedding *embeddingOf() const {$/;"	f	class:ogdf::FaceArray
empty	ogdf/basic/BoundedStack.h	/^	bool empty() { return m_pTop == (m_pStart-1); }$/;"	f	class:ogdf::BoundedStack
empty	ogdf/basic/Graph_d.h	/^	bool empty() const { return m_nNodes == 0; }$/;"	f	class:ogdf::Graph
empty	ogdf/basic/Graph_d.h	/^	bool empty() { return m_head; }$/;"	f	class:ogdf::GraphList
empty	ogdf/basic/HashArray.h	/^	int empty() const { return Hashing<I,E,H>::empty(); }$/;"	f	class:ogdf::HashArray
empty	ogdf/basic/Hashing.h	/^	bool empty() const { return (HashingBase::size() == 0); }$/;"	f	class:ogdf::Hashing
empty	ogdf/basic/Hashing.h	/^	int empty() const { return (m_count==0); }$/;"	f	class:ogdf::HashingBase
empty	ogdf/basic/List.h	/^	bool empty() const { return ListPure<E>::empty(); }$/;"	f	class:ogdf::List
empty	ogdf/basic/List.h	/^	bool empty() const { return m_head == 0; }$/;"	f	class:ogdf::ListPure
empty	ogdf/basic/SList.h	/^	bool empty() const { return SListPure<E>::empty(); }$/;"	f	class:ogdf::SList
empty	ogdf/basic/SList.h	/^	bool empty() const { return m_head == 0; }$/;"	f	class:ogdf::SListPure
empty	ogdf/basic/Stack.h	/^	bool empty() const { return StackPure<E>::empty(); }$/;"	f	class:ogdf::Stack
empty	ogdf/basic/Stack.h	/^	bool empty() const { return m_head == 0; }$/;"	f	class:ogdf::StackPure
emptyClusters	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::emptyClusters(SList<cluster>& emptyCluster,$/;"	f	class:ogdf::ClusterGraph
emptyOnClusterDelete	ogdf/cluster/ClusterGraph.h	/^	inline bool emptyOnClusterDelete(cluster c) \/\/virtual?$/;"	f	class:ogdf::ClusterGraph
emptyOnNodeDelete	ogdf/cluster/ClusterGraph.h	/^	inline bool emptyOnNodeDelete(cluster c) \/\/virtual?$/;"	f	class:ogdf::ClusterGraph
emptyTempDirectory	blast/blastsearch.cpp	/^void BlastSearch::emptyTempDirectory()$/;"	f	class:BlastSearch
empty_node_set	ogdf/energybased/Set.cpp	/^bool Set::empty_node_set()$/;"	f	class:ogdf::Set
enableDisableDepthWidgets	ui/settingsdialog.cpp	/^void SettingsDialog::enableDisableDepthWidgets()$/;"	f	class:SettingsDialog
end	ogdf/basic/Array.h	/^	E *end() { return m_pStop; }$/;"	f	class:ogdf::Array
end	ogdf/basic/Array.h	/^	const E *end() const { return m_pStop; }$/;"	f	class:ogdf::Array
end	ogdf/basic/List.h	/^	ListConstIterator<E> end() const { return ListConstIterator<E>(); }$/;"	f	class:ogdf::List
end	ogdf/basic/List.h	/^	ListConstIterator<E> end() const { return ListConstIterator<E>(); }$/;"	f	class:ogdf::ListPure
end	ogdf/basic/List.h	/^	ListIterator<E> end() { return ListIterator<E>(); }$/;"	f	class:ogdf::List
end	ogdf/basic/List.h	/^	ListIterator<E> end() { return ListIterator<E>(); }$/;"	f	class:ogdf::ListPure
end	ogdf/basic/SList.h	/^	SListConstIterator<E> end() const { return SListConstIterator<E>(); }$/;"	f	class:ogdf::SList
end	ogdf/basic/SList.h	/^	SListConstIterator<E> end() const { return SListConstIterator<E>(); }$/;"	f	class:ogdf::SListPure
end	ogdf/basic/SList.h	/^	SListIterator<E> end() { return SListIterator<E>(); }$/;"	f	class:ogdf::SList
end	ogdf/basic/SList.h	/^	SListIterator<E> end() { return SListIterator<E>(); }$/;"	f	class:ogdf::SListPure
end	ogdf/basic/geometry.h	/^	const DPoint &end() const { return m_end; }$/;"	f	class:ogdf::DLine
endOfFile	ogdf/fileformats/DinoXmlScanner.h	/^		endOfFile,			\/\/\/< End of file detected$/;"	e	enum:ogdf::XmlToken
endOfNode	graph/graphlocation.cpp	/^GraphLocation GraphLocation::endOfNode(DeBruijnNode * node)$/;"	f	class:GraphLocation
enlargeTable	ogdf/basic/AdjEntryArray.h	/^	virtual void enlargeTable(int newTableSize) {$/;"	f	class:ogdf::AdjEntryArray
enlargeTable	ogdf/basic/EdgeArray.h	/^	virtual void enlargeTable(int newTableSize) {$/;"	f	class:ogdf::EdgeArray
enlargeTable	ogdf/basic/FaceArray.h	/^	virtual void enlargeTable(int newTableSize) {$/;"	f	class:ogdf::FaceArray
enlargeTable	ogdf/basic/NodeArray.h	/^	virtual void enlargeTable(int newTableSize) {$/;"	f	class:ogdf::NodeArray
enlargeTable	ogdf/cluster/ClusterArray.h	/^	virtual void enlargeTable(int newTableSize) {$/;"	f	class:ogdf::ClusterArray
enter	ogdf/basic/CriticalSection.h	/^	void enter() {$/;"	f	class:ogdf::CriticalSection
enterQueryManually	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::enterQueryManually()$/;"	f	class:BlastSearchDialog
epsilon	ogdf/energybased/numexcept.cpp	/^#define epsilon /;"	d	file:
equal	ogdf/basic/comparer.h	/^	static bool equal  (const CONTENTPOINTER &x, const CONTENTPOINTER &y) { return STATICCONTENTCOMPARER::equal  (*x,*y); }$/;"	f	class:ogdf::TargetComparer
equal	ogdf/basic/comparer.h	/^	static bool equal  (const bool &x, const bool &y) { return  x ==  y; }$/;"	f	class:ogdf::StdComparer
equal	ogdf/basic/comparer.h	/^	virtual bool equal(const E &x, const E &y) const {$/;"	f	class:ogdf::VComparer
equal	ogdf/basic/comparer.h	/^    static bool equal(const E &\/*x*\/, const E &\/*y*\/) { OGDF_THROW(NoStdComparerException); }$/;"	f	class:ogdf::StdComparer
equal	ogdf/energybased/Rectangle.h	/^		bool equal(const Rectangle& A,const Rectangle & B) const$/;"	f	class:ogdf::RectangleComparerHeight
equal	ogdf/energybased/Rectangle.h	/^		bool equal(const Rectangle& A,const Rectangle & B) const$/;"	f	class:ogdf::RectangleComparerWidth
equal	ogdf/energybased/Rectangle.h	/^        bool equal(const Rectangle& A,const Rectangle & B) const$/;"	f	class:ogdf::RectangleComparerArea
equalSign	ogdf/fileformats/DinoXmlScanner.h	/^		equalSign,			\/\/\/< =$/;"	e	enum:ogdf::XmlToken
error	ogdf/fileformats/GmlParser.h	/^	bool error() const { return m_error; }$/;"	f	class:ogdf::GmlParser
error	ogdf/fileformats/XmlParser.h	/^	bool error() const { return m_error; }$/;"	f	class:ogdf::XmlParser
errorString	ogdf/fileformats/GmlParser.h	/^	const String &errorString() const { return m_errorString; }$/;"	f	class:ogdf::GmlParser
errorString	ogdf/fileformats/XmlParser.h	/^	const String &errorString() const { return m_errorString; }$/;"	f	class:ogdf::XmlParser
esDash	ogdf/basic/GraphAttributes.h	/^		esDash = 2, \/\/!< dashed line$/;"	e	enum:ogdf::GraphAttributes::EdgeStyle
esDashdot	ogdf/basic/GraphAttributes.h	/^		esDashdot = 4, \/\/!< line style "dash dot dash dot ..."$/;"	e	enum:ogdf::GraphAttributes::EdgeStyle
esDashdotdot	ogdf/basic/GraphAttributes.h	/^		esDashdotdot = 5$/;"	e	enum:ogdf::GraphAttributes::EdgeStyle
esDot	ogdf/basic/GraphAttributes.h	/^		esDot = 3, \/\/!< dotted line$/;"	e	enum:ogdf::GraphAttributes::EdgeStyle
esNoPen	ogdf/basic/GraphAttributes.h	/^		esNoPen = 0, \/\/!< no line$/;"	e	enum:ogdf::GraphAttributes::EdgeStyle
esSolid	ogdf/basic/GraphAttributes.h	/^		esSolid = 1, \/\/!< solid line$/;"	e	enum:ogdf::GraphAttributes::EdgeStyle
eventFilter	ui/graphicsviewzoom.cpp	/^bool GraphicsViewZoom::eventFilter(QObject *object, QEvent *event)$/;"	f	class:GraphicsViewZoom
eventFilter	ui/verticalscrollarea.cpp	/^bool VerticalScrollArea::eventFilter(QObject *o, QEvent *e)$/;"	f	class:VerticalScrollArea
exactPathHighlightNode	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::exactPathHighlightNode(QPainter * painter)$/;"	f	class:GraphicsItemNode
exceptionCode	ogdf/basic/exceptions.h	/^		AlgorithmFailureCode exceptionCode() const { return m_exceptionCode; }$/;"	f	class:ogdf::AlgorithmFailureException
exceptionCode	ogdf/basic/exceptions.h	/^		LibraryNotSupportedCode exceptionCode() const { return m_exceptionCode; }$/;"	f	class:ogdf::LibraryNotSupportedException
exceptionCode	ogdf/basic/exceptions.h	/^		PreconditionViolatedCode exceptionCode() const { return m_exceptionCode; }$/;"	f	class:ogdf::PreconditionViolatedException
exchange	ogdf/basic/List.h	/^	void exchange(List<E>& L2) {$/;"	f	class:ogdf::List
exchange	ogdf/basic/List.h	/^	void exchange(ListIterator<E> it1, ListIterator<E> it2) {$/;"	f	class:ogdf::List
exchange	ogdf/basic/List.h	/^	void exchange(ListIterator<E> it1, ListIterator<E> it2) {$/;"	f	class:ogdf::ListPure
exchange	ogdf/basic/List.h	/^	void exchange(ListPure<E>& L2) {$/;"	f	class:ogdf::ListPure
exchange	ogdf/energybased/PQueue.h	/^	void exchange(int i, int j)$/;"	f	class:ogdf::PQueue
exclamationMark	ogdf/fileformats/DinoXmlScanner.h	/^		exclamationMark,	\/\/\/< !$/;"	e	enum:ogdf::XmlToken
exportAttributes	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::exportAttributes(GraphAttributes &GA) const$/;"	f	class:ogdf::MultilevelGraph
exportAttributesSimple	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::exportAttributesSimple(GraphAttributes &GA) const$/;"	f	class:ogdf::MultilevelGraph
export_NodeAttributes	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::export_NodeAttributes($/;"	f	class:ogdf::FMMMLayout
export_new_rectangle_positions	ogdf/energybased/MAARPacking.cpp	/^void MAARPacking::export_new_rectangle_positions($/;"	f	class:ogdf::MAARPacking
export_node_positions	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::export_node_positions($/;"	f	class:ogdf::FMMMLayout
extendLine	graph/graphicsitemedge.cpp	/^QPointF GraphicsItemEdge::extendLine(QPointF start, QPointF end, double extensionLength)$/;"	f	class:GraphicsItemEdge
extendPathInAllPossibleWays	graph/path.cpp	/^QList<Path> Path::extendPathInAllPossibleWays() const$/;"	f	class:Path
extendPathToIncludeEntirityOfNodes	graph/path.cpp	/^void Path::extendPathToIncludeEntirityOfNodes()$/;"	f	class:Path
externalFace	ogdf/basic/CombinatorialEmbedding.h	/^	face externalFace() const {$/;"	f	class:ogdf::ConstCombinatorialEmbedding
extra_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	bool extra_edge;\/\/indicates if this edge is an extra edge that is added to$/;"	m	class:ogdf::EdgeAttributes
extractString	ogdf/fileformats/DinoLineBuffer.cpp	/^	bool DinoLineBuffer::extractString($/;"	f	class:ogdf::DinoLineBuffer
f_attr_scalar	ogdf/energybased/FMMMLayout.cpp	/^double FMMMLayout::f_attr_scalar(double d, double ind_ideal_edge_length)$/;"	f	class:ogdf::FMMMLayout
f_near_machine_precision	ogdf/energybased/numexcept.cpp	/^bool numexcept::f_near_machine_precision(double distance,DPoint& force )$/;"	f	class:ogdf::numexcept
f_rep_near_machine_precision	ogdf/energybased/numexcept.cpp	/^bool numexcept::f_rep_near_machine_precision(double distance,DPoint& force )$/;"	f	class:ogdf::numexcept
f_rep_scalar	ogdf/internal/energybased/FruchtermanReingold.cpp	/^inline double FruchtermanReingold::f_rep_scalar(double d)$/;"	f	class:ogdf::FruchtermanReingold
f_rep_scalar	ogdf/internal/energybased/NMM.cpp	/^inline double NMM::f_rep_scalar(double d)$/;"	f	class:ogdf::NMM
face	ogdf/basic/CombinatorialEmbedding.h	/^typedef FaceElement *face;$/;"	t	namespace:ogdf
faceArrayTableSize	ogdf/basic/CombinatorialEmbedding.h	/^	int faceArrayTableSize() const { return m_faceArrayTableSize; }$/;"	f	class:ogdf::ConstCombinatorialEmbedding
faceCyclePred	ogdf/basic/Graph_d.h	/^	adjEntry faceCyclePred() const { return clockwiseFacePred(); }$/;"	f	class:ogdf::AdjElement
faceCycleSucc	ogdf/basic/Graph_d.h	/^	adjEntry faceCycleSucc() const { return clockwiseFaceSucc(); }$/;"	f	class:ogdf::AdjElement
faces	ogdf/basic/FaceSet.h	/^	const List<face> &faces() const {$/;"	f	class:ogdf::FaceSet
faces	ogdf/basic/FaceSet.h	/^	const ListPure<face> &faces() const {$/;"	f	class:ogdf::FaceSetPure
faces	ogdf/basic/FaceSet.h	/^	const SListPure<face> &faces() const {$/;"	f	class:ogdf::FaceSetSimple
factorial	ogdf/basic/Math.cpp	/^	int Math::factorial(int n)$/;"	f	class:ogdf::Math
factorial_d	ogdf/basic/Math.cpp	/^	double Math::factorial_d(int n)$/;"	f	class:ogdf::Math
factorials	ogdf/basic/Math.cpp	/^	int factorials[13] = {$/;"	m	namespace:ogdf	file:
factorials_d	ogdf/basic/Math.cpp	/^	double factorials_d[20] = {$/;"	m	namespace:ogdf	file:
fastInsert	ogdf/basic/Hashing.h	/^	HashElement<K,I> *fastInsert(const K &key, const I &info) {$/;"	f	class:ogdf::Hashing
father_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	QuadTreeNodeNM*  father_ptr;   \/\/points to the father node$/;"	m	class:ogdf::QuadTreeNodeNM
file	ogdf/basic/exceptions.h	/^		const char *file() { return m_file; }$/;"	f	class:ogdf::Exception
fill	ogdf/basic/AdjEntryArray.h	/^	void fill(const T &x) {$/;"	f	class:ogdf::AdjEntryArray
fill	ogdf/basic/Array.h	/^	void fill(INDEX i, INDEX j, const E &x) {$/;"	f	class:ogdf::Array
fill	ogdf/basic/Array.h	/^	void fill(const E &x) {$/;"	f	class:ogdf::Array
fill	ogdf/basic/Array2D.h	/^	void fill(const E &x) {$/;"	f	class:ogdf::Array2D
fill	ogdf/basic/EdgeArray.h	/^	void fill(const T &x) {$/;"	f	class:ogdf::EdgeArray
fill	ogdf/basic/FaceArray.h	/^	void fill(const T &x) {$/;"	f	class:ogdf::FaceArray
fill	ogdf/basic/NodeArray.h	/^	void fill(const T &x) {$/;"	f	class:ogdf::NodeArray
fill	ogdf/cluster/ClusterArray.h	/^	void fill(const T &x) {$/;"	f	class:ogdf::ClusterArray
fillHitsTable	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::fillHitsTable()$/;"	f	class:BlastSearchDialog
fillPool	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^void *PoolMemoryAllocator::fillPool(MemElemPtr &pFreeBytes, __uint16 nBytes)$/;"	f	class:ogdf::PoolMemoryAllocator
fillPredefKey	ogdf/fileformats/GmlParser.h	/^		pointPredefKey, generalizationPredefKey, subGraphPredefKey, fillPredefKey, clusterPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
fillQueriesTable	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::fillQueriesTable()$/;"	f	class:BlastSearchDialog
fillTablesAfterBlastSearch	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::fillTablesAfterBlastSearch()$/;"	f	class:BlastSearchDialog
findBrotherXmlTagObject	ogdf/fileformats/DinoXmlParser.cpp	/^	bool DinoXmlParser::findBrotherXmlTagObject(const XmlTagObject &currentTag,$/;"	f	class:ogdf::DinoXmlParser
findDepthAtIndex	graph/assemblygraph.cpp	/^double AssemblyGraph::findDepthAtIndex(QList<DeBruijnNode *> * nodeList, long long targetIndex) const$/;"	f	class:AssemblyGraph
findIntermediatePoint	graph/graphicsitemnode.cpp	/^QPointF GraphicsItemNode::findIntermediatePoint(QPointF p1, QPointF p2, double p1Value, double p2Value, double targetValue)$/;"	f	class:GraphicsItemNode
findIntersectionWithViewportBoundary	ui/mygraphicsview.cpp	/^QPointF MyGraphicsView::findIntersectionWithViewportBoundary(QLineF line)$/;"	f	class:MyGraphicsView
findLocationOnPath	graph/graphicsitemnode.cpp	/^QPointF GraphicsItemNode::findLocationOnPath(double fraction)$/;"	f	class:GraphicsItemNode
findNextEdgesInPath	graph/debruijnedge.cpp	/^std::vector<DeBruijnEdge *> DeBruijnEdge::findNextEdgesInPath(DeBruijnNode * nextNode,$/;"	f	class:DeBruijnEdge
findProgram	blast/blastsearch.cpp	/^bool BlastSearch::findProgram(QString programName, QString * command)$/;"	f	class:BlastSearch
findQueryPaths	blast/blastqueries.cpp	/^void BlastQueries::findQueryPaths()$/;"	f	class:BlastQueries
findQueryPaths	blast/blastquery.cpp	/^void BlastQuery::findQueryPaths()$/;"	f	class:BlastQuery
findQueryPaths	blast/blastsearch.cpp	/^void BlastSearch::findQueryPaths()$/;"	f	class:BlastSearch
findSonXmlTagObject	ogdf/fileformats/DinoXmlParser.cpp	/^	bool DinoXmlParser::findSonXmlTagObject(const XmlTagObject &father,$/;"	f	class:ogdf::DinoXmlParser
findSonXmlTagObjectByName	ogdf/fileformats/DinoXmlParser.cpp	/^	bool XmlTagObject::findSonXmlTagObjectByName($/;"	f	class:ogdf::XmlTagObject
findVisiblePartOfLine	ui/mygraphicsview.cpp	/^QLineF MyGraphicsView::findVisiblePartOfLine(QLineF line, bool * success)$/;"	f	class:MyGraphicsView
findXmlAttributeObject	ogdf/fileformats/DinoXmlParser.cpp	/^	bool DinoXmlParser::findXmlAttributeObject($/;"	f	class:ogdf::DinoXmlParser
findXmlAttributeObjectByName	ogdf/fileformats/DinoXmlParser.cpp	/^	bool XmlTagObject::findXmlAttributeObjectByName($/;"	f	class:ogdf::XmlTagObject
find_Best_Fit_insert_position	ogdf/energybased/MAARPacking.cpp	/^ListIterator<PackingRowInfo> MAARPacking::find_Best_Fit_insert_position($/;"	f	class:ogdf::MAARPacking
find_initial_placement_for_level	ogdf/energybased/Multilevel.cpp	/^void Multilevel::find_initial_placement_for_level($/;"	f	class:ogdf::Multilevel
find_min	ogdf/energybased/PQueue.h	/^	ListIterator<PackingRowInfo> find_min()$/;"	f	class:ogdf::PQueue
find_sm_cell	ogdf/internal/energybased/NMM.h	/^	int find_sm_cell() const { return _find_small_cell; }$/;"	f	class:ogdf::NMM
find_sm_cell	ogdf/internal/energybased/NMM.h	/^	void find_sm_cell(int a) {$/;"	f	class:ogdf::NMM
find_small_cell_by_formula	ogdf/internal/energybased/NMM.cpp	/^void NMM::find_small_cell_by_formula($/;"	f	class:ogdf::NMM
find_small_cell_iteratively	ogdf/internal/energybased/NMM.cpp	/^void NMM::find_small_cell_iteratively($/;"	f	class:ogdf::NMM
find_smallest_quad	ogdf/internal/energybased/NMM.cpp	/^bool NMM::find_smallest_quad(NodeArray<NodeAttributes>& A, QuadTreeNM& T)$/;"	f	class:ogdf::NMM
fineTuneScalar	ogdf/energybased/FMMMLayout.h	/^	double fineTuneScalar() const { return m_fineTuneScalar; }$/;"	f	class:ogdf::FMMMLayout
fineTuneScalar	ogdf/energybased/FMMMLayout.h	/^	void fineTuneScalar(double s) { m_fineTuneScalar = ((s >= 0) ? s : 1);}$/;"	f	class:ogdf::FMMMLayout
fineTuningIterations	ogdf/energybased/FMMMLayout.h	/^	int fineTuningIterations() const { return m_fineTuningIterations; }$/;"	f	class:ogdf::FMMMLayout
fineTuningIterations	ogdf/energybased/FMMMLayout.h	/^	void fineTuningIterations(int n) { m_fineTuningIterations =((n >= 0) ? n : 0);}$/;"	f	class:ogdf::FMMMLayout
first	ogdf/basic/GraphAttributes.h	/^		first, \/\/!< edge arrow at source node of the edge$/;"	e	enum:ogdf::GraphAttributes::EdgeArrow
firstAdj	ogdf/basic/CombinatorialEmbedding.h	/^	adjEntry firstAdj() const { return m_adjFirst; }$/;"	f	class:ogdf::FaceElement
firstAdj	ogdf/basic/Graph_d.h	/^	adjEntry firstAdj() const { return m_adjEdges.begin();  }$/;"	f	class:ogdf::NodeElement
firstAdj	ogdf/cluster/ClusterGraph.h	/^	ListConstIterator<adjEntry> firstAdj() const { return m_adjEntries.begin();  }$/;"	f	class:ogdf::ClusterElement
firstAdj	ogdf/cluster/ClusterGraph.h	/^	ListIterator<adjEntry> firstAdj() { return m_adjEntries.begin();  }$/;"	f	class:ogdf::ClusterElement
firstCluster	ogdf/cluster/ClusterGraph.h	/^	cluster firstCluster() const { return m_clusters.begin (); }$/;"	f	class:ogdf::ClusterGraph
firstEdge	ogdf/basic/Graph_d.h	/^	edge firstEdge() const { return m_edges.begin (); }$/;"	f	class:ogdf::Graph
firstElement	ogdf/basic/Hashing.cpp	/^HashElementBase *HashingBase::firstElement(HashElementBase ***pList) const$/;"	f	class:ogdf::HashingBase
firstElement	ogdf/basic/Hashing.h	/^	HashElement<K,I> *firstElement(HashElement<K,I> ***pList) const {$/;"	f	class:ogdf::Hashing
firstFace	ogdf/basic/CombinatorialEmbedding.h	/^	face firstFace() const { return m_faces.begin(); }$/;"	f	class:ogdf::ConstCombinatorialEmbedding
firstListElement	ogdf/basic/Hashing.h	/^	HashElementBase *firstListElement(size_t hashValue) const {$/;"	f	class:ogdf::HashingBase
firstNode	ogdf/basic/Graph_d.h	/^	node firstNode() const { return m_nodes.begin (); }$/;"	f	class:ogdf::Graph
firstPostOrderCluster	ogdf/cluster/ClusterGraph.h	/^	cluster firstPostOrderCluster() const {$/;"	f	class:ogdf::ClusterGraph
fixEdgePaths	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::fixEdgePaths(std::vector<GraphicsItemNode *> * nodes)$/;"	f	class:GraphicsItemNode
fixTwistedSplits	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::fixTwistedSplits(Graph &G, NodeArray<NodeAttributes>& A) {$/;"	f	class:ogdf::FMMMLayout
fixedIterations	ogdf/energybased/FMMMLayout.h	/^	int fixedIterations() const { return m_fixedIterations; }$/;"	f	class:ogdf::FMMMLayout
fixedIterations	ogdf/energybased/FMMMLayout.h	/^	void fixedIterations(int n) { m_fixedIterations = ((n >= 1) ? n : 1);}$/;"	f	class:ogdf::FMMMLayout
floorLog2	ogdf/basic/Math.h	/^	static int floorLog2(int v) {$/;"	f	class:ogdf::Math
flushPool	ogdf/internal/basic/MallocMemoryAllocator.h	/^	static void flushPool() { }$/;"	f	class:ogdf::MallocMemoryAllocator
flushPool	ogdf/internal/basic/MallocMemoryAllocator.h	/^	static void flushPool(__uint16 \/* nBytes *\/) { }$/;"	f	class:ogdf::MallocMemoryAllocator
flushPool	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^void PoolMemoryAllocator::flushPool()$/;"	f	class:ogdf::PoolMemoryAllocator
flushPool	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^void PoolMemoryAllocator::flushPool(__uint16 nBytes)$/;"	f	class:ogdf::PoolMemoryAllocator
flushPoolSmall	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^void PoolMemoryAllocator::flushPoolSmall(__uint16 nBytes)$/;"	f	class:ogdf::PoolMemoryAllocator
fmEades	ogdf/energybased/FMMMLayout.h	/^		fmEades,               \/\/!< The force-model by Eades.$/;"	e	enum:ogdf::FMMMLayout::ForceModel
fmFruchtermanReingold	ogdf/energybased/FMMMLayout.h	/^		fmFruchtermanReingold, \/\/!< The force-model by Fruchterman, Reingold.$/;"	e	enum:ogdf::FMMMLayout::ForceModel
fmNew	ogdf/energybased/FMMMLayout.h	/^		fmNew                  \/\/!< The new force-model.$/;"	e	enum:ogdf::FMMMLayout::ForceModel
followNodesUntilBranch	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::followNodesUntilBranch(node start, node first,$/;"	f	class:ogdf::FMMMLayout
fontButtonPressed	ui/mainwindow.cpp	/^void MainWindow::fontButtonPressed()$/;"	f	class:MainWindow
fopen	ogdf/basic/basic.h	/^inline FILE *fopen(const char *filename, const char *mode)$/;"	f	namespace:ogdf
forall_adj	ogdf/basic/Graph_d.h	/^#define forall_adj(/;"	d
forall_adj_edges	ogdf/basic/Graph_d.h	/^#define forall_adj_edges(/;"	d
forall_arrayindices	ogdf/basic/Array.h	/^#define forall_arrayindices(/;"	d
forall_cluster_adj	ogdf/cluster/ClusterGraph.h	/^#define forall_cluster_adj(/;"	d
forall_cluster_adj_edges	ogdf/cluster/ClusterGraph.h	/^#define forall_cluster_adj_edges(/;"	d
forall_cluster_rev_adj	ogdf/cluster/ClusterGraph.h	/^#define forall_cluster_rev_adj(/;"	d
forall_clusters	ogdf/cluster/ClusterGraph.h	/^#define forall_clusters(/;"	d
forall_edges	ogdf/basic/Graph_d.h	/^#define forall_edges(/;"	d
forall_face_adj	ogdf/basic/CombinatorialEmbedding.h	/^#define forall_face_adj(/;"	d
forall_faces	ogdf/basic/CombinatorialEmbedding.h	/^#define forall_faces(/;"	d
forall_listiterators	ogdf/basic/List.h	/^#define forall_listiterators(/;"	d
forall_nodes	ogdf/basic/Graph_d.h	/^#define forall_nodes(/;"	d
forall_nonconst_listiterators	ogdf/basic/List.h	/^#define forall_nonconst_listiterators(/;"	d
forall_nonconst_slistiterators	ogdf/basic/List.h	/^#define forall_nonconst_slistiterators(/;"	d
forall_postOrderClusters	ogdf/cluster/ClusterGraph.h	/^#define forall_postOrderClusters(/;"	d
forall_rev_adj	ogdf/basic/Graph_d.h	/^#define forall_rev_adj(/;"	d
forall_rev_arrayindices	ogdf/basic/Array.h	/^#define forall_rev_arrayindices(/;"	d
forall_rev_edges	ogdf/basic/Graph_d.h	/^#define forall_rev_edges(/;"	d
forall_rev_faces	ogdf/basic/CombinatorialEmbedding.h	/^#define forall_rev_faces(/;"	d
forall_rev_listiterators	ogdf/basic/List.h	/^#define forall_rev_listiterators(/;"	d
forall_rev_nodes	ogdf/basic/Graph_d.h	/^#define forall_rev_nodes(/;"	d
forall_rev_nonconst_listiterators	ogdf/basic/List.h	/^#define forall_rev_nonconst_listiterators(/;"	d
forall_slistiterators	ogdf/basic/List.h	/^#define forall_slistiterators(/;"	d
forceModel	ogdf/energybased/FMMMLayout.h	/^	ForceModel forceModel() const { return m_forceModel; }$/;"	f	class:ogdf::FMMMLayout
forceModel	ogdf/energybased/FMMMLayout.h	/^	void forceModel(ForceModel fm) { m_forceModel = fm; }$/;"	f	class:ogdf::FMMMLayout
forceScalingFactor	ogdf/energybased/FMMMLayout.h	/^	double forceScalingFactor() const { return m_forceScalingFactor; }$/;"	f	class:ogdf::FMMMLayout
forceScalingFactor	ogdf/energybased/FMMMLayout.h	/^	void forceScalingFactor(double f) { m_forceScalingFactor = ((f > 0) ? f : 1);}$/;"	f	class:ogdf::FMMMLayout
form_multipole_expansion_of_leaf_node	ogdf/internal/energybased/NMM.cpp	/^void NMM::form_multipole_expansion_of_leaf_node($/;"	f	class:ogdf::NMM
form_multipole_expansion_of_subtree	ogdf/internal/energybased/NMM.cpp	/^void NMM::form_multipole_expansion_of_subtree($/;"	f	class:ogdf::NMM
form_multipole_expansions	ogdf/internal/energybased/NMM.cpp	/^inline void NMM::form_multipole_expansions($/;"	f	class:ogdf::NMM
formatDepthForDisplay	program/globals.cpp	/^QString formatDepthForDisplay(double depth)$/;"	f
formatDoubleForDisplay	program/globals.cpp	/^QString formatDoubleForDisplay(double num, int decimalPlacesToDisplay)$/;"	f
formatIntForDisplay	program/globals.cpp	/^QString formatIntForDisplay(int num)$/;"	f
formatIntForDisplay	program/globals.cpp	/^QString formatIntForDisplay(long long num)$/;"	f
formatLabel	ogdf/basic/GraphAttributes.cpp	/^String GraphAttributes::formatLabel(const String& labelText)$/;"	f	class:ogdf::GraphAttributes
frGridQuotient	ogdf/energybased/FMMMLayout.h	/^	int  frGridQuotient() const {return m_frGridQuotient;}$/;"	f	class:ogdf::FMMMLayout
frGridQuotient	ogdf/energybased/FMMMLayout.h	/^	void frGridQuotient(int p) { m_frGridQuotient = ((0<=p) ? p : 2);}$/;"	f	class:ogdf::FMMMLayout
fractionCoveredByHits	blast/blastquery.cpp	/^double BlastQuery::fractionCoveredByHits(const QList<BlastHit *> * hitsToCheck) const$/;"	f	class:BlastQuery
free_binko	ogdf/internal/energybased/NMM.cpp	/^inline void NMM::free_binko()$/;"	f	class:ogdf::NMM
free_power_of_2_array	ogdf/internal/energybased/NMM.cpp	/^inline void NMM::free_power_of_2_array()$/;"	f	class:ogdf::NMM
from	ogdf/basic/geometry.h	/^	const DRect &from() const { return *m_from; }$/;"	f	class:ogdf::DScaler
front	ogdf/basic/List.h	/^	E &front() { return ListPure<E>::front(); }$/;"	f	class:ogdf::List
front	ogdf/basic/List.h	/^	E &front() {$/;"	f	class:ogdf::ListPure
front	ogdf/basic/List.h	/^	const E &front() const { return ListPure<E>::front(); }$/;"	f	class:ogdf::List
front	ogdf/basic/List.h	/^	const E &front() const {$/;"	f	class:ogdf::ListPure
front	ogdf/basic/SList.h	/^	E &front() { return SListPure<E>::front(); }$/;"	f	class:ogdf::SList
front	ogdf/basic/SList.h	/^	E &front() {$/;"	f	class:ogdf::SListPure
front	ogdf/basic/SList.h	/^	const E &front() const { return SListPure<E>::front(); }$/;"	f	class:ogdf::SList
front	ogdf/basic/SList.h	/^	const E &front() const {$/;"	f	class:ogdf::SListPure
fscanf	ogdf/basic/basic.h	/^#define fscanf /;"	d
ftDirectory	ogdf/basic/basic.h	/^		ftDirectory  \/**< directory *\/$/;"	e	enum:ogdf::FileType
ftEntry	ogdf/basic/basic.h	/^		ftEntry,     \/**< file or directory *\/$/;"	e	enum:ogdf::FileType
ftFile	ogdf/basic/basic.h	/^		ftFile,      \/**< file *\/$/;"	e	enum:ogdf::FileType
full	ogdf/basic/BoundedStack.h	/^	bool full() { return m_pTop == (m_pStop-1); }$/;"	f	class:ogdf::BoundedStack
g_absoluteZoom	program/globals.cpp	/^double g_absoluteZoom;$/;"	v
g_assemblyGraph	program/globals.cpp	/^QSharedPointer<AssemblyGraph> g_assemblyGraph;$/;"	v
g_blastSearch	program/globals.cpp	/^QSharedPointer<BlastSearch> g_blastSearch;$/;"	v
g_graphicsView	program/globals.cpp	/^MyGraphicsView * g_graphicsView;$/;"	v
g_memory	program/globals.cpp	/^QSharedPointer<Memory> g_memory;$/;"	v
g_settings	program/globals.cpp	/^QSharedPointer<Settings> g_settings;$/;"	v
galaxyChoice	ogdf/energybased/FMMMLayout.h	/^	GalaxyChoice galaxyChoice() const { return m_galaxyChoice; }$/;"	f	class:ogdf::FMMMLayout
galaxyChoice	ogdf/energybased/FMMMLayout.h	/^	void galaxyChoice(GalaxyChoice gc) { m_galaxyChoice = gc; }$/;"	f	class:ogdf::FMMMLayout
gcNonUniformProbHigherMass	ogdf/energybased/FMMMLayout.h	/^		gcNonUniformProbHigherMass$/;"	e	enum:ogdf::FMMMLayout::GalaxyChoice
gcNonUniformProbLowerMass	ogdf/energybased/FMMMLayout.h	/^		gcNonUniformProbLowerMass,$/;"	e	enum:ogdf::FMMMLayout::GalaxyChoice
gcUniformProb	ogdf/energybased/FMMMLayout.h	/^		gcUniformProb,$/;"	e	enum:ogdf::FMMMLayout::GalaxyChoice
generalization	ogdf/basic/Graph_d.h	/^		generalization = 1,$/;"	e	enum:ogdf::Graph::EdgeType
generalizationExpander	ogdf/basic/Graph_d.h	/^		generalizationExpander,$/;"	e	enum:ogdf::Graph::NodeType
generalizationMerger	ogdf/basic/Graph_d.h	/^		generalizationMerger,$/;"	e	enum:ogdf::Graph::NodeType
generalizationPredefKey	ogdf/fileformats/GmlParser.h	/^		pointPredefKey, generalizationPredefKey, subGraphPredefKey, fillPredefKey, clusterPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
generateNodesNotFoundErrorMessage	graph/assemblygraph.cpp	/^QString AssemblyGraph::generateNodesNotFoundErrorMessage(std::vector<QString> nodesNotInGraph, bool exact)$/;"	f	class:AssemblyGraph
gentleZoom	ui/graphicsviewzoom.cpp	/^void GraphicsViewZoom::gentleZoom(double factor, ZoomSource zoomSource)$/;"	f	class:GraphicsViewZoom
genus	ogdf/basic/Graph.cpp	/^int Graph::genus() const$/;"	f	class:ogdf::Graph
geq	ogdf/basic/comparer.h	/^	static bool geq    (const CONTENTPOINTER &x, const CONTENTPOINTER &y) { return STATICCONTENTCOMPARER::geq    (*x,*y); }$/;"	f	class:ogdf::TargetComparer
geq	ogdf/basic/comparer.h	/^	static bool geq    (const bool &x, const bool &y) { return  x || !y; }$/;"	f	class:ogdf::StdComparer
geq	ogdf/basic/comparer.h	/^	virtual bool geq(const E &x, const E &y) const {$/;"	f	class:ogdf::VComparer
geq	ogdf/basic/comparer.h	/^    static bool geq(const E &\/*x*\/, const E &\/*y*\/) { OGDF_THROW(NoStdComparerException); }$/;"	f	class:ogdf::StdComparer
get	ogdf/basic/List.h	/^	ListConstIterator<E> get(int pos) const {$/;"	f	class:ogdf::List
get	ogdf/basic/List.h	/^	ListConstIterator<E> get(int pos) const {$/;"	f	class:ogdf::ListPure
get	ogdf/basic/List.h	/^	ListIterator<E> get(int pos) {$/;"	f	class:ogdf::List
get	ogdf/basic/List.h	/^	ListIterator<E> get(int pos) {$/;"	f	class:ogdf::ListPure
get	ogdf/basic/SList.h	/^	SListConstIterator<E> get(int pos) const {$/;"	f	class:ogdf::SList
get	ogdf/basic/SList.h	/^	SListConstIterator<E> get(int pos) const {$/;"	f	class:ogdf::SListPure
get	ogdf/basic/SList.h	/^	SListIterator<E> get(int pos) {$/;"	f	class:ogdf::SList
get	ogdf/basic/SList.h	/^	SListIterator<E> get(int pos) {$/;"	f	class:ogdf::SListPure
getAbsolutePathLengthDifference	blast/blastquerypath.cpp	/^int BlastQueryPath::getAbsolutePathLengthDifference() const$/;"	f	class:BlastQueryPath
getAbsolutePathLengthDifferenceString	blast/blastquerypath.cpp	/^QString BlastQueryPath::getAbsolutePathLengthDifferenceString(bool commas) const$/;"	f	class:BlastQueryPath
getAdjacentNodes	ogdf/energybased/FMMMLayout.cpp	/^std::vector<node> FMMMLayout::getAdjacentNodes(node v) {$/;"	f	class:ogdf::FMMMLayout
getAdjacentNodesExcluding	ogdf/energybased/FMMMLayout.cpp	/^std::vector<node> FMMMLayout::getAdjacentNodesExcluding(node v, node ex) {$/;"	f	class:ogdf::FMMMLayout
getAllConnectedPositiveNodes	graph/debruijnnode.cpp	/^std::vector<DeBruijnNode *> DeBruijnNode::getAllConnectedPositiveNodes() const$/;"	f	class:DeBruijnNode
getAllCsvData	graph/debruijnnode.h	/^    QStringList getAllCsvData() const {return m_csvData;}$/;"	f	class:DeBruijnNode
getAllPossiblePaths	graph/path.cpp	/^QList<Path> Path::getAllPossiblePaths(GraphLocation startLocation,$/;"	f	class:Path
getArgumentList	command_line/commoncommandlinefunctions.cpp	/^QStringList getArgumentList(int argc, char *argv[])$/;"	f
getArrowStyle	ogdf/fileformats/OgmlParser.cpp	/^GraphAttributes::EdgeArrow OgmlParser::getArrowStyle(int i)$/;"	f	class:ogdf::OgmlParser
getArrowStyleAsInt	ogdf/fileformats/OgmlParser.cpp	/^int OgmlParser::getArrowStyleAsInt(String s, String \/*sot*\/)$/;"	f	class:ogdf::OgmlParser
getAspectRatio	ogdf/energybased/MAARPacking.cpp	/^double MAARPacking::getAspectRatio(List<Rectangle>& R, double wrappingWidth) {$/;"	f	class:ogdf::MAARPacking
getAspectRatioAgreement	ogdf/energybased/MAARPacking.cpp	/^double MAARPacking::getAspectRatioAgreement(double ar1, double ar2) {$/;"	f	class:ogdf::MAARPacking
getBandageTitleAsciiArt	command_line/commoncommandlinefunctions.cpp	/^QString getBandageTitleAsciiArt()$/;"	f
getBase	graph/graphlocation.cpp	/^char GraphLocation::getBase() const$/;"	f	class:GraphLocation
getBaseAt	graph/debruijnnode.h	/^    char getBaseAt(int i) const {if (i >= 0 && i < m_sequence.length()) return m_sequence.at(i); else return '\\0';}$/;"	f	class:DeBruijnNode
getBlastHitParts	blast/blasthit.cpp	/^std::vector<BlastHitPart> BlastHit::getBlastHitParts(bool reverse, double scaledNodeLength)$/;"	f	class:BlastHit
getBlastHitPartsForThisNode	graph/debruijnnode.cpp	/^std::vector<BlastHitPart> DeBruijnNode::getBlastHitPartsForThisNode(double scaledNodeLength) const$/;"	f	class:DeBruijnNode
getBlastHitPartsForThisNodeOrReverseComplement	graph/debruijnnode.cpp	/^std::vector<BlastHitPart> DeBruijnNode::getBlastHitPartsForThisNodeOrReverseComplement(double scaledNodeLength) const$/;"	f	class:DeBruijnNode
getBlastHitsPointer	graph/debruijnnode.h	/^    const std::vector<BlastHit *> * getBlastHitsPointer() const {return &m_blastHits;}$/;"	f	class:DeBruijnNode
getBlastHitsTextAndLocationThisNode	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::getBlastHitsTextAndLocationThisNode(std::vector<QString> * blastHitText,$/;"	f	class:GraphicsItemNode
getBlastHitsTextAndLocationThisNodeOrReverseComplement	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::getBlastHitsTextAndLocationThisNodeOrReverseComplement(std::vector<QString> * blastHitText,$/;"	f	class:GraphicsItemNode
getBrushPatternAsInt	ogdf/fileformats/OgmlParser.cpp	/^int OgmlParser::getBrushPatternAsInt(String s)$/;"	f	class:ogdf::OgmlParser
getBucket	ogdf/basic/EdgeArray.h	/^	int getBucket(const edge &e) { return (*m_pEdgeArray)[e]; }$/;"	f	class:ogdf::BucketEdgeArray
getBucket	ogdf/basic/Graph_d.h	/^	int getBucket(const edge &e) { return e->source()->index(); }$/;"	f	class:ogdf::BucketSourceIndex
getBucket	ogdf/basic/Graph_d.h	/^	int getBucket(const edge &e) { return e->target()->index(); }$/;"	f	class:ogdf::BucketTargetIndex
getBucket	ogdf/energybased/Edge.h	/^	int getBucket(const Edge& E) { return get_max_index(E); }$/;"	f	class:ogdf::EdgeMaxBucketFunc
getBucket	ogdf/energybased/Edge.h	/^	int getBucket(const Edge& E) { return get_min_index(E); }$/;"	f	class:ogdf::EdgeMinBucketFunc
getCentre	graph/graphicsitemnode.cpp	/^QPointF GraphicsItemNode::getCentre(std::vector<QPointF> linePoints) const$/;"	f	class:GraphicsItemNode
getCentres	graph/graphicsitemnode.cpp	/^std::vector<QPointF> GraphicsItemNode::getCentres() const$/;"	f	class:GraphicsItemNode
getChildren	ogdf/cluster/ClusterGraph.h	/^	List<ClusterElement*> &getChildren(){$/;"	f	class:ogdf::ClusterElement
getChoiceTags	ogdf/fileformats/OgmlParser.cpp	/^	const List<OgmlTag*>& getChoiceTags() const { return choiceTags; }$/;"	f	class:ogdf::OgmlParser::OgmlTag
getCigarCount	graph/assemblygraph.cpp	/^int AssemblyGraph::getCigarCount(QString cigarCode, QString cigar)$/;"	f	class:AssemblyGraph
getClusterInducedNodes	ogdf/cluster/ClusterGraph.cpp	/^void ClusterElement::getClusterInducedNodes(List<node> &clusterNodes) {$/;"	f	class:ogdf::ClusterElement
getClusterInducedNodes	ogdf/cluster/ClusterGraph.cpp	/^void ClusterElement::getClusterInducedNodes(NodeArray<bool> &clusterNode, int& num) {$/;"	f	class:ogdf::ClusterElement
getClusterNodes	ogdf/cluster/ClusterGraph.cpp	/^int ClusterElement::getClusterNodes(NodeArray<bool> &clusterNode)$/;"	f	class:ogdf::ClusterElement
getClusterNodes	ogdf/cluster/ClusterGraph.cpp	/^void ClusterElement::getClusterNodes(List<node> &clusterNodes) {$/;"	f	class:ogdf::ClusterElement
getCoefficient	program/scinot.h	/^    double getCoefficient() const {return m_coefficient;}$/;"	f	class:SciNot
getColour	blast/blastquery.h	/^    QColor getColour() const {return m_colour;}$/;"	f	class:BlastQuery
getColourName	program/globals.cpp	/^QString getColourName(QColor colour)$/;"	f
getColourOption	command_line/commoncommandlinefunctions.cpp	/^QColor getColourOption(QString option, QStringList * arguments)$/;"	f
getColourSchemeOption	command_line/commoncommandlinefunctions.cpp	/^NodeColourScheme getColourSchemeOption(QString option, QStringList * arguments)$/;"	f
getCommonHelp	command_line/commoncommandlinefunctions.cpp	/^void getCommonHelp(QStringList * text)$/;"	f
getCompulsiveTags	ogdf/fileformats/OgmlParser.cpp	/^	const List<OgmlTag*>& getCompulsiveTags() const { return compulsiveTags; }$/;"	f	class:ogdf::OgmlParser::OgmlTag
getConstraints	ogdf/basic/Constraints.h	/^	List<Constraint *> *getConstraints() { return &m_List; }$/;"	f	class:ogdf::GraphConstraints
getConstraintsOfType	ogdf/basic/Constraints.h	/^	template<class TYP> void getConstraintsOfType(List<TYP *> *res) {$/;"	f	class:ogdf::GraphConstraints
getContiguityStatus	graph/debruijnnode.h	/^    ContiguityStatus getContiguityStatus() const {return m_contiguityStatus;}$/;"	f	class:DeBruijnNode
getCpuTime	ogdf/energybased/FMMMLayout.h	/^	double getCpuTime() {$/;"	f	class:ogdf::FMMMLayout
getCrossPoints	ogdf/basic/geometry.cpp	/^int DPolygon::getCrossPoints(const DPolygon &p, List<DPoint> &crossPoints) const$/;"	f	class:ogdf::DPolygon
getCsvLine	graph/debruijnnode.h	/^    QString getCsvLine(int i) const {if (i < m_csvData.length()) return m_csvData[i]; else return "";}$/;"	f	class:DeBruijnNode
getCurrentCharacter	ogdf/fileformats/DinoLineBuffer.h	/^		inline char getCurrentCharacter() const {$/;"	f	class:ogdf::DinoLineBuffer
getCurrentCharacterPointer	ogdf/fileformats/DinoLineBuffer.h	/^		inline char *getCurrentCharacterPointer() {$/;"	f	class:ogdf::DinoLineBuffer
getCurrentPosition	ogdf/fileformats/DinoLineBuffer.h	/^		DinoLineBufferPosition getCurrentPosition() const{$/;"	f	class:ogdf::DinoLineBuffer
getCurrentTokenString	ogdf/fileformats/DinoXmlScanner.h	/^		inline const char *getCurrentTokenString(){$/;"	f	class:ogdf::DinoXmlScanner
getCustomColour	graph/debruijnnode.h	/^    QColor getCustomColour() const {return m_customColour;}$/;"	f	class:DeBruijnNode
getCustomColourForDisplay	graph/debruijnnode.cpp	/^QColor DeBruijnNode::getCustomColourForDisplay() const$/;"	f	class:DeBruijnNode
getCustomLabel	graph/debruijnnode.h	/^    QString getCustomLabel() const {return m_customLabel;}$/;"	f	class:DeBruijnNode
getCustomLabelForDisplay	graph/debruijnnode.cpp	/^QStringList DeBruijnNode::getCustomLabelForDisplay() const$/;"	f	class:DeBruijnNode
getDeadEndCount	graph/assemblygraph.cpp	/^int AssemblyGraph::getDeadEndCount() const$/;"	f	class:AssemblyGraph
getDeadEndCount	graph/debruijnnode.cpp	/^int DeBruijnNode::getDeadEndCount() const$/;"	f	class:DeBruijnNode
getDefaultColour	command_line/commoncommandlinefunctions.cpp	/^QString getDefaultColour(QColor colour)$/;"	f
getDefaultImageFileName	ui/mainwindow.cpp	/^QString MainWindow::getDefaultImageFileName()$/;"	f	class:MainWindow
getDepth	graph/debruijnnode.h	/^    double getDepth() const {return m_depth;}$/;"	f	class:DeBruijnNode
getDepth	ogdf/fileformats/DinoXmlParser.h	/^		const int& getDepth() const {$/;"	f	struct:ogdf::XmlTagObject
getDepthColour	graph/graphicsitemnode.cpp	/^QColor GraphicsItemNode::getDepthColour()$/;"	f	class:GraphicsItemNode
getDepthRelativeToMeanDrawnDepth	graph/debruijnnode.h	/^    double getDepthRelativeToMeanDrawnDepth() const {return m_depthRelativeToMeanDrawnDepth;}$/;"	f	class:DeBruijnNode
getDownstreamNodes	graph/debruijnnode.cpp	/^std::vector<DeBruijnNode *> DeBruijnNode::getDownstreamNodes() const$/;"	f	class:DeBruijnNode
getDrawnNodeCount	graph/assemblygraph.cpp	/^int AssemblyGraph::getDrawnNodeCount() const$/;"	f	class:AssemblyGraph
getDrawnNodeLength	graph/debruijnnode.cpp	/^double DeBruijnNode::getDrawnNodeLength() const$/;"	f	class:DeBruijnNode
getEdge	ogdf/internal/energybased/MultilevelGraph.cpp	/^edge MultilevelGraph::getEdge(unsigned int index)$/;"	f	class:ogdf::MultilevelGraph
getEdgeFromNodeNames	tests/bandagetests.cpp	/^DeBruijnEdge * BandageTests::getEdgeFromNodeNames(QString startingNodeName,$/;"	f	class:BandageTests
getEdgePath	graph/debruijnedge.cpp	/^QString DeBruijnEdge::getEdgePath()$/;"	f	class:DeBruijnEdge
getEdges	graph/path.h	/^    QList<DeBruijnEdge *> getEdges() const {return m_edges;}$/;"	f	class:Path
getEdgesPointer	graph/debruijnnode.h	/^    const std::vector<DeBruijnEdge *> * getEdgesPointer() const {return &m_edges;}$/;"	f	class:DeBruijnNode
getElapsedTime	command_line/commoncommandlinefunctions.cpp	/^QString getElapsedTime(QDateTime start, QDateTime end)$/;"	f
getEndFraction	graph/path.cpp	/^double Path::getEndFraction() const$/;"	f	class:Path
getEndLocation	graph/path.h	/^    GraphLocation getEndLocation() const {return m_endLocation;}$/;"	f	class:Path
getEndingNode	graph/debruijnedge.h	/^    DeBruijnNode * getEndingNode() const {return m_endingNode;}$/;"	f	class:DeBruijnEdge
getEnteringEdges	graph/debruijnnode.cpp	/^std::vector<DeBruijnEdge *> DeBruijnNode::getEnteringEdges() const$/;"	f	class:DeBruijnNode
getEntries	ogdf/basic/basic.cpp	/^void getEntries(const char *dirName,$/;"	f	namespace:ogdf
getEntriesAppend	ogdf/basic/basic.cpp	/^void getEntriesAppend(const char *dirName,$/;"	f	namespace:ogdf
getEstimatedSequenceLength	graph/assemblygraph.cpp	/^long long AssemblyGraph::getEstimatedSequenceLength() const$/;"	f	class:AssemblyGraph
getEstimatedSequenceLength	graph/assemblygraph.cpp	/^long long AssemblyGraph::getEstimatedSequenceLength(double medianDepthByBase) const$/;"	f	class:AssemblyGraph
getEvalueProduct	blast/blastquerypath.cpp	/^SciNot BlastQueryPath::getEvalueProduct() const$/;"	f	class:BlastQueryPath
getExponent	program/scinot.h	/^    int getExponent() const {return m_exponent;}$/;"	f	class:SciNot
getFasta	graph/debruijnnode.cpp	/^QByteArray DeBruijnNode::getFasta(bool sign, bool newLines, bool evenIfEmpty) const$/;"	f	class:DeBruijnNode
getFasta	graph/path.cpp	/^QString Path::getFasta() const$/;"	f	class:Path
getFiles	ogdf/basic/basic.cpp	/^void getFiles(const char *dirName,$/;"	f	namespace:ogdf
getFilesAppend	ogdf/basic/basic.cpp	/^void getFilesAppend(const char *dirName,$/;"	f	namespace:ogdf
getFilterText	ui/blasthitfiltersdialog.cpp	/^QString BlastHitFiltersDialog::getFilterText()$/;"	f	class:BlastHitFiltersDialog
getFirst	graph/graphicsitemnode.h	/^    QPointF getFirst() const {return m_linePoints[0];}$/;"	f	class:GraphicsItemNode
getFirst	graph/ogdfnode.h	/^    ogdf::node getFirst() {if (m_ogdfNodes.size() == 0) return 0; else return m_ogdfNodes[0];}$/;"	f	class:OgdfNode
getFloatOption	command_line/commoncommandlinefunctions.cpp	/^double getFloatOption(QString option, QStringList * arguments)$/;"	f
getFourViewportCornersInSceneCoordinates	ui/mygraphicsview.cpp	/^void MyGraphicsView::getFourViewportCornersInSceneCoordinates(QPointF * c1, QPointF * c2, QPointF * c3, QPointF * c4)$/;"	f	class:MyGraphicsView
getFullLength	graph/debruijnnode.cpp	/^int DeBruijnNode::getFullLength() const$/;"	f	class:DeBruijnNode
getGfaLinkLine	graph/debruijnedge.cpp	/^QByteArray DeBruijnEdge::getGfaLinkLine() const$/;"	f	class:DeBruijnEdge
getGfaSegmentLine	graph/debruijnnode.cpp	/^QByteArray DeBruijnNode::getGfaSegmentLine(QString depthTag) const$/;"	f	class:DeBruijnNode
getGraph	ogdf/basic/CombinatorialEmbedding.h	/^	Graph &getGraph() { return *m_pGraph; }$/;"	f	class:ogdf::CombinatorialEmbedding
getGraph	ogdf/basic/CombinatorialEmbedding.h	/^	const Graph &getGraph() const { return *m_cpGraph; }$/;"	f	class:ogdf::CombinatorialEmbedding
getGraph	ogdf/basic/CombinatorialEmbedding.h	/^	const Graph &getGraph() const { return *m_cpGraph; }$/;"	f	class:ogdf::ConstCombinatorialEmbedding
getGraph	ogdf/basic/GraphObserver.h	/^	const Graph*  getGraph() const { return m_pGraph; }$/;"	f	class:ogdf::GraphObserver
getGraph	ogdf/cluster/ClusterGraph.h	/^	const Graph & getGraph() const {return *m_pGraph;}$/;"	f	class:ogdf::ClusterGraph
getGraph	ogdf/cluster/ClusterGraphObserver.h	/^	const ClusterGraph*  getGraph() const {	return m_pClusterGraph;}$/;"	f	class:ogdf::ClusterGraphObserver
getGraph	ogdf/internal/energybased/MultilevelGraph.h	/^	Graph & getGraph() { return *m_G; }$/;"	f	class:ogdf::MultilevelGraph
getGraphAttributes	ogdf/internal/energybased/MultilevelGraph.h	/^	GraphAttributes & getGraphAttributes() const { return *m_GA; }$/;"	f	class:ogdf::MultilevelGraph
getGraphComponentCountAndLargestComponentSize	graph/assemblygraph.cpp	/^void AssemblyGraph::getGraphComponentCountAndLargestComponentSize(int * componentCount, int * largestComponentLength) const$/;"	f	class:AssemblyGraph
getGraphFileTypeFromFile	graph/assemblygraph.cpp	/^GraphFileType AssemblyGraph::getGraphFileTypeFromFile(QString fullFileName)$/;"	f	class:AssemblyGraph
getGraphScopeOption	command_line/commoncommandlinefunctions.cpp	/^GraphScope getGraphScopeOption(QString option, QStringList * arguments)$/;"	f
getGraphScopeOptions	command_line/commoncommandlinefunctions.cpp	/^void getGraphScopeOptions(QStringList * text)$/;"	f
getGraphType	ogdf/fileformats/OgmlParser.h	/^	Ogml::GraphType getGraphType() { return m_graphType; };$/;"	f	class:ogdf::OgmlParser
getGraphicsItemEdge	graph/debruijnedge.h	/^    GraphicsItemEdge * getGraphicsItemEdge() const {return m_graphicsItemEdge;}$/;"	f	class:DeBruijnEdge
getGraphicsItemNode	graph/debruijnnode.h	/^    GraphicsItemNode * getGraphicsItemNode() const {return m_graphicsItemNode;}$/;"	f	class:DeBruijnNode
getHPCounter	ogdf/basic/System.cpp	/^void System::getHPCounter(LARGE_INTEGER &counter)$/;"	f	class:ogdf::System
getHitEnd	blast/blasthit.cpp	/^GraphLocation BlastHit::getHitEnd() const$/;"	f	class:BlastHit
getHitOverlap	blast/blastquerypath.cpp	/^int BlastQueryPath::getHitOverlap(BlastHit * hit1, BlastHit * hit2) const$/;"	f	class:BlastQueryPath
getHitQueryLength	blast/blastquerypath.cpp	/^int BlastQueryPath::getHitQueryLength() const$/;"	f	class:BlastQueryPath
getHitStart	blast/blasthit.cpp	/^GraphLocation BlastHit::getHitStart() const$/;"	f	class:BlastHit
getHits	blast/blastquery.h	/^    QList< QSharedPointer<BlastHit> > getHits() const {return m_hits;}$/;"	f	class:BlastQuery
getHits	blast/blastquerypath.h	/^    QList<BlastHit *> getHits() const {return m_hits;}$/;"	f	class:BlastQueryPath
getHitsQueryCoverage	blast/blastquerypath.cpp	/^double BlastQueryPath::getHitsQueryCoverage() const$/;"	f	class:BlastQueryPath
getId	ogdf/fileformats/OgmlParser.cpp	/^	const int& getId() const { return id; }$/;"	f	class:ogdf::OgmlParser::OgmlAttribute
getId	ogdf/fileformats/OgmlParser.cpp	/^	const int& getId() const { return id; }$/;"	f	class:ogdf::OgmlParser::OgmlAttributeValue
getId	ogdf/fileformats/OgmlParser.cpp	/^	const int& getId() const { return id; }$/;"	f	class:ogdf::OgmlParser::OgmlTag
getId	ogdf/fileformats/XmlParser.h	/^	int getId(const String &tag) const {$/;"	f	class:ogdf::XmlParser
getIdFromString	ogdf/fileformats/OgmlParser.cpp	/^bool OgmlParser::getIdFromString(String str, int &id)$/;"	f	class:ogdf::OgmlParser
getImageAlignmentAsInt	ogdf/fileformats/OgmlParser.cpp	/^int OgmlParser::getImageAlignmentAsInt(String s)$/;"	f	class:ogdf::OgmlParser
getImageStyleAsInt	ogdf/fileformats/OgmlParser.cpp	/^int OgmlParser::getImageStyleAsInt(String s)$/;"	f	class:ogdf::OgmlParser
getInputFileLineCounter	ogdf/fileformats/DinoLineBuffer.h	/^		inline int getInputFileLineCounter() const {$/;"	f	class:ogdf::DinoLineBuffer
getInputFileLineCounter	ogdf/fileformats/DinoXmlParser.h	/^		inline int getInputFileLineCounter() const {$/;"	f	class:ogdf::DinoXmlParser
getInputFileLineCounter	ogdf/fileformats/DinoXmlScanner.h	/^		inline int getInputFileLineCounter() const {$/;"	f	class:ogdf::DinoXmlScanner
getIntOption	command_line/commoncommandlinefunctions.cpp	/^int getIntOption(QString option, QStringList * arguments)$/;"	f
getInternalStatus	ogdf/basic/Constraints.h	/^	virtual int getInternalStatus() { return m_Status; }$/;"	f	class:ogdf::Constraint
getLabelCaptionFromString	ogdf/fileformats/OgmlParser.cpp	/^String OgmlParser::getLabelCaptionFromString(String str)$/;"	f	class:ogdf::OgmlParser
getLast	graph/graphicsitemnode.h	/^    QPointF getLast() const {return m_linePoints[m_linePoints.size()-1];}$/;"	f	class:GraphicsItemNode
getLast	graph/ogdfnode.h	/^    ogdf::node getLast() {if (m_ogdfNodes.size() == 0) return 0; else return m_ogdfNodes[m_ogdfNodes.size()-1];}$/;"	f	class:OgdfNode
getLastMerge	ogdf/internal/energybased/MultilevelGraph.cpp	/^NodeMerge * MultilevelGraph::getLastMerge()$/;"	f	class:ogdf::MultilevelGraph
getLeavingEdges	graph/debruijnnode.cpp	/^std::vector<DeBruijnEdge *> DeBruijnNode::getLeavingEdges() const$/;"	f	class:DeBruijnNode
getLength	blast/blastquery.h	/^    int getLength() const {return m_sequence.length();}$/;"	f	class:BlastQuery
getLength	graph/debruijnnode.h	/^    int getLength() const {return m_length;}$/;"	f	class:DeBruijnNode
getLength	graph/path.cpp	/^int Path::getLength() const$/;"	f	class:Path
getLengthFromCigar	graph/assemblygraph.cpp	/^int AssemblyGraph::getLengthFromCigar(QString cigar)$/;"	f	class:AssemblyGraph
getLengthFromSimpleCigar	graph/assemblygraph.cpp	/^int AssemblyGraph::getLengthFromSimpleCigar(QString cigar)$/;"	f	class:AssemblyGraph
getLengthWithoutTrailingOverlap	graph/debruijnnode.cpp	/^int DeBruijnNode::getLengthWithoutTrailingOverlap() const$/;"	f	class:DeBruijnNode
getLevel	ogdf/internal/energybased/MultilevelGraph.cpp	/^int MultilevelGraph::getLevel()$/;"	f	class:ogdf::MultilevelGraph
getLine	ogdf/fileformats/DinoXmlParser.h	/^		const int& getLine() const {$/;"	f	struct:ogdf::XmlTagObject
getLine	ogdf/fileformats/GmlParser.cpp	/^bool GmlParser::getLine()$/;"	f	class:ogdf::GmlParser
getLine	ogdf/fileformats/XmlParser.cpp	/^bool XmlParser::getLine()$/;"	f	class:ogdf::XmlParser
getLineNumber	ogdf/fileformats/DinoLineBuffer.h	/^		inline int getLineNumber() const {$/;"	f	class:ogdf::DinoLineBufferPosition
getLinePosition	ogdf/fileformats/DinoLineBuffer.h	/^		inline int getLinePosition() const {$/;"	f	class:ogdf::DinoLineBufferPosition
getLineTypeAsInt	ogdf/fileformats/OgmlParser.cpp	/^int OgmlParser::getLineTypeAsInt(String s)$/;"	f	class:ogdf::OgmlParser
getLineUpdateCount	ogdf/fileformats/DinoLineBuffer.h	/^		inline int getLineUpdateCount() const {$/;"	f	class:ogdf::DinoLineBufferPosition
getListPure	ogdf/basic/List.h	/^	const ListPure<E> &getListPure() const { return *this; }$/;"	f	class:ogdf::List
getListPure	ogdf/basic/SList.h	/^	const SListPure<E> &getListPure() const { return *this; }$/;"	f	class:ogdf::SList
getListPure	ogdf/basic/SList.h	/^	const SListPure<E> &getListPure() const { return *this; }$/;"	f	class:ogdf::SListPure
getMaxOccurs	ogdf/fileformats/OgmlParser.cpp	/^	const int& getMaxOccurs() const { return maxOccurs; }$/;"	f	class:ogdf::OgmlParser::OgmlTag
getMeanDepth	graph/assemblygraph.cpp	/^double AssemblyGraph::getMeanDepth(QList<DeBruijnNode *> nodes)$/;"	f	class:AssemblyGraph
getMeanDepth	graph/assemblygraph.cpp	/^double AssemblyGraph::getMeanDepth(bool drawnNodesOnly)$/;"	f	class:AssemblyGraph
getMeanDepth	graph/assemblygraph.cpp	/^double AssemblyGraph::getMeanDepth(std::vector<DeBruijnNode *> nodes)$/;"	f	class:AssemblyGraph
getMeanDepth	graph/path.cpp	/^double Path::getMeanDepth() const$/;"	f	class:Path
getMeanHitPercIdentity	blast/blastquerypath.cpp	/^double BlastQueryPath::getMeanHitPercIdentity() const$/;"	f	class:BlastQueryPath
getMedianDepthByBase	graph/assemblygraph.cpp	/^double AssemblyGraph::getMedianDepthByBase() const$/;"	f	class:AssemblyGraph
getMinOccurs	ogdf/fileformats/OgmlParser.cpp	/^	const int& getMinOccurs() const { return minOccurs; }$/;"	f	class:ogdf::OgmlParser::OgmlTag
getName	blast/blastquery.h	/^    QString getName() const {return m_name;}$/;"	f	class:BlastQuery
getName	graph/debruijnnode.h	/^    QString getName() const {return m_name;}$/;"	f	class:DeBruijnNode
getName	ogdf/basic/Constraints.h	/^	String getName() { return m_Name; }$/;"	f	class:ogdf::Constraint
getName	ogdf/fileformats/DinoXmlParser.h	/^		const String& getName() const {$/;"	f	struct:ogdf::XmlAttributeObject
getName	ogdf/fileformats/DinoXmlParser.h	/^		const String& getName() const {$/;"	f	struct:ogdf::XmlTagObject
getName	ogdf/fileformats/OgmlParser.cpp	/^	const String& getName() const { return Ogml::s_attributeNames[id]; }$/;"	f	class:ogdf::OgmlParser::OgmlAttribute
getName	ogdf/fileformats/OgmlParser.cpp	/^	const String& getName() const { return Ogml::s_tagNames[id]; }$/;"	f	class:ogdf::OgmlParser::OgmlTag
getName	ui/enteroneblastquerydialog.cpp	/^QString EnterOneBlastQueryDialog::getName()$/;"	f	class:EnterOneBlastQueryDialog
getNameWithoutSign	graph/debruijnnode.h	/^    QString getNameWithoutSign() const {return m_name.left(m_name.length() - 1);}$/;"	f	class:DeBruijnNode
getNewDepth	ui/changenodedepthdialog.cpp	/^double ChangeNodeDepthDialog::getNewDepth() const$/;"	f	class:ChangeNodeDepthDialog
getNewName	ui/changenodenamedialog.cpp	/^QString ChangeNodeNameDialog::getNewName() const$/;"	f	class:ChangeNodeNameDialog
getNewNodeName	graph/assemblygraph.cpp	/^QString AssemblyGraph::getNewNodeName(QString oldNodeName)$/;"	f	class:AssemblyGraph
getNextSymbol	ogdf/fileformats/GmlParser.cpp	/^GmlObjectType GmlParser::getNextSymbol()$/;"	f	class:ogdf::GmlParser
getNextSymbol	ogdf/fileformats/XmlParser.cpp	/^XmlObjectType XmlParser::getNextSymbol()$/;"	f	class:ogdf::XmlParser
getNextToken	ogdf/fileformats/DinoXmlScanner.cpp	/^	XmlToken DinoXmlScanner::getNextToken(){$/;"	f	class:ogdf::DinoXmlScanner
getNode	graph/graphlocation.h	/^    DeBruijnNode * getNode() const {return m_node;}$/;"	f	class:GraphLocation
getNode	ogdf/internal/energybased/MultilevelGraph.cpp	/^node MultilevelGraph::getNode(unsigned int index)$/;"	f	class:ogdf::MultilevelGraph
getNodeCentreFraction	blast/blasthit.h	/^    double getNodeCentreFraction() {return (m_nodeStartFraction + m_nodeEndFraction) \/ 2.0;}$/;"	f	class:BlastHit
getNodeCount	graph/path.cpp	/^int Path::getNodeCount() const$/;"	f	class:Path
getNodeIdRange	ogdf/fileformats/GmlParser.cpp	/^GmlObject *GmlParser::getNodeIdRange(int &minId,int &maxId)$/;"	f	class:ogdf::GmlParser
getNodeIdRange	ogdf/fileformats/XmlParser.cpp	/^XmlObject *XmlParser::getNodeIdRange(int &minId,int &maxId,$/;"	f	class:ogdf::XmlParser
getNodeLength	blast/blasthit.h	/^    int getNodeLength() const {return m_nodeEnd - m_nodeStart + 1;}$/;"	f	class:BlastHit
getNodeLengthPerMegabase	graph/debruijnnode.cpp	/^double DeBruijnNode::getNodeLengthPerMegabase() const$/;"	f	class:DeBruijnNode
getNodeNameForFasta	graph/debruijnnode.cpp	/^QString DeBruijnNode::getNodeNameForFasta(bool sign) const$/;"	f	class:DeBruijnNode
getNodeNameFromString	blast/blastsearch.cpp	/^QString BlastSearch::getNodeNameFromString(QString nodeString)$/;"	f	class:BlastSearch
getNodeNameFromString	graph/assemblygraph.cpp	/^QString AssemblyGraph::getNodeNameFromString(QString string)$/;"	f	class:AssemblyGraph
getNodePathLength	graph/graphicsitemnode.cpp	/^double GraphicsItemNode::getNodePathLength()$/;"	f	class:GraphicsItemNode
getNodeSequence	blast/blasthit.cpp	/^QByteArray BlastHit::getNodeSequence() const$/;"	f	class:BlastHit
getNodeStats	graph/assemblygraph.cpp	/^void AssemblyGraph::getNodeStats(int * n50, int * shortestNode, int * firstQuartile, int * median, int * thirdQuartile, int * longestNode) const$/;"	f	class:AssemblyGraph
getNodeTemplateFromOgmlValue	ogdf/fileformats/OgmlParser.cpp	/^String OgmlParser::getNodeTemplateFromOgmlValue(String s)$/;"	f	class:ogdf::OgmlParser
getNodeText	graph/graphicsitemnode.cpp	/^QStringList GraphicsItemNode::getNodeText()$/;"	f	class:GraphicsItemNode
getNodeTextSize	graph/graphicsitemnode.cpp	/^QSize GraphicsItemNode::getNodeTextSize(QString text)$/;"	f	class:GraphicsItemNode
getNodeWidth	graph/graphicsitemnode.cpp	/^double GraphicsItemNode::getNodeWidth(double depthRelativeToMeanDrawnDepth, double depthPower,$/;"	f	class:GraphicsItemNode
getNodes	graph/path.h	/^    QList<DeBruijnNode *> getNodes() const {return m_nodes;}$/;"	f	class:Path
getNodes	ogdf/cluster/ClusterGraph.h	/^	List<node> &getNodes(){$/;"	f	class:ogdf::ClusterElement
getNodesCommonToAllPaths	graph/debruijnnode.cpp	/^std::vector<DeBruijnNode *> DeBruijnNode::getNodesCommonToAllPaths(std::vector< std::vector <DeBruijnNode *> > * paths,$/;"	f	class:DeBruijnNode
getNodesFromBlastHits	graph/assemblygraph.cpp	/^std::vector<DeBruijnNode *> AssemblyGraph::getNodesFromBlastHits(QString queryName)$/;"	f	class:AssemblyGraph
getNodesFromLineEdit	ui/mainwindow.cpp	/^std::vector<DeBruijnNode *> MainWindow::getNodesFromLineEdit(QLineEdit * lineEdit, bool exactMatch, std::vector<QString> * nodesNotInGraph)$/;"	f	class:MainWindow
getNodesFromLineEdit	ui/mainwindow.cpp	/^std::vector<DeBruijnNode *> MainWindow::getNodesFromLineEdit(QString  t, bool exactMatch, std::vector<QString> * nodesNotInGraph)$/;"	f	class:MainWindow
getNodesFromListExact	graph/assemblygraph.cpp	/^std::vector<DeBruijnNode *> AssemblyGraph::getNodesFromListExact(QStringList nodesList,$/;"	f	class:AssemblyGraph
getNodesFromListPartial	graph/assemblygraph.cpp	/^std::vector<DeBruijnNode *> AssemblyGraph::getNodesFromListPartial(QStringList nodesList,$/;"	f	class:AssemblyGraph
getNodesFromString	graph/assemblygraph.cpp	/^std::vector<DeBruijnNode *> AssemblyGraph::getNodesFromString(QString nodeNamesString, bool exactMatch, std::vector<QString> * nodesNotInGraph)$/;"	f	class:AssemblyGraph
getNodesInDepthRange	graph/assemblygraph.cpp	/^std::vector<DeBruijnNode *> AssemblyGraph::getNodesInDepthRange(double min,$/;"	f	class:AssemblyGraph
getNumberOfOgdfGraphEdges	graph/debruijnnode.cpp	/^int DeBruijnNode::getNumberOfOgdfGraphEdges(double drawnNodeLength) const$/;"	f	class:DeBruijnNode
getOgdfNode	graph/debruijnnode.h	/^    OgdfNode * getOgdfNode() const {return m_ogdfNode;}$/;"	f	class:DeBruijnNode
getOnePositiveSelectedNode	ui/mygraphicsscene.cpp	/^DeBruijnNode * MyGraphicsScene::getOnePositiveSelectedNode()$/;"	f	class:MyGraphicsScene
getOneSelectedEdge	ui/mygraphicsscene.cpp	/^DeBruijnEdge * MyGraphicsScene::getOneSelectedEdge()$/;"	f	class:MyGraphicsScene
getOneSelectedNode	ui/mygraphicsscene.cpp	/^DeBruijnNode * MyGraphicsScene::getOneSelectedNode()$/;"	f	class:MyGraphicsScene
getOnlineHelpMessage	command_line/commoncommandlinefunctions.cpp	/^void getOnlineHelpMessage(QStringList * text)$/;"	f
getOppositeNodeName	graph/assemblygraph.cpp	/^QString AssemblyGraph::getOppositeNodeName(QString nodeName)$/;"	f	class:AssemblyGraph
getOptionalTags	ogdf/fileformats/OgmlParser.cpp	/^	const List<OgmlTag*>& getOptionalTags() const { return optionalTags; }$/;"	f	class:ogdf::OgmlParser::OgmlTag
getOtherNode	graph/debruijnedge.cpp	/^DeBruijnNode * DeBruijnEdge::getOtherNode(const DeBruijnNode * node) const$/;"	f	class:DeBruijnEdge
getOverlap	graph/debruijnedge.h	/^    int getOverlap() const {return m_overlap;}$/;"	f	class:DeBruijnEdge
getOverlapRange	graph/assemblygraph.cpp	/^QPair<int, int> AssemblyGraph::getOverlapRange() const$/;"	f	class:AssemblyGraph
getOverlapType	graph/debruijnedge.h	/^    EdgeOverlapType getOverlapType() const {return m_overlapType;}$/;"	f	class:DeBruijnEdge
getParallelFreeUndirected	ogdf/basic/simple_graph_alg.h	/^void getParallelFreeUndirected(const Graph &G, EdgeArray<EDGELIST> &parallelEdges)$/;"	f	namespace:ogdf
getPath	blast/blastquerypath.h	/^    Path getPath() const {return m_path;}$/;"	f	class:BlastQueryPath
getPathCount	blast/blastquery.h	/^    int getPathCount() const {return m_paths.size();}$/;"	f	class:BlastQuery
getPathQueryCoverage	blast/blastquerypath.cpp	/^double BlastQueryPath::getPathQueryCoverage() const$/;"	f	class:BlastQueryPath
getPathSequence	graph/path.cpp	/^QByteArray Path::getPathSequence() const$/;"	f	class:Path
getPathString	graph/debruijnnode.cpp	/^QString DeBruijnNode::getPathString()$/;"	f	class:DeBruijnNode
getPaths	blast/blastquery.h	/^    QList<BlastQueryPath> getPaths() const {return m_paths;}$/;"	f	class:BlastQuery
getPosition	graph/graphlocation.h	/^    int getPosition() const {return m_position;}$/;"	f	class:GraphLocation
getPresetColours	program/globals.cpp	/^std::vector<QColor> getPresetColours()$/;"	f
getQuery	ui/tablewidgetitemname.h	/^    BlastQuery * getQuery() const {return m_query;}$/;"	f	class:TableWidgetItemName
getQueryCount	blast/blastqueries.cpp	/^int BlastQueries::getQueryCount()$/;"	f	class:BlastQueries
getQueryCount	blast/blastqueries.cpp	/^int BlastQueries::getQueryCount(SequenceType sequenceType)$/;"	f	class:BlastQueries
getQueryCountWithAtLeastOnePath	blast/blastqueries.cpp	/^int BlastQueries::getQueryCountWithAtLeastOnePath()$/;"	f	class:BlastQueries
getQueryCoverageFraction	blast/blasthit.cpp	/^double BlastHit::getQueryCoverageFraction()$/;"	f	class:BlastHit
getQueryFromName	blast/blastqueries.cpp	/^BlastQuery * BlastQueries::getQueryFromName(QString queryName)$/;"	f	class:BlastQueries
getQueryPathCount	blast/blastqueries.cpp	/^int BlastQueries::getQueryPathCount()$/;"	f	class:BlastQueries
getRArray	ogdf/internal/energybased/MultilevelGraph.h	/^	NodeArray<double> &getRArray() { return m_radius; }$/;"	f	class:ogdf::MultilevelGraph
getRangeAndDefault	command_line/commoncommandlinefunctions.cpp	/^QString getRangeAndDefault(FloatSetting setting) {return (setting.on) ? getRangeAndDefault(setting.min, setting.max, setting.val) : getRangeAndDefault(setting.min, setting.max, "off");}$/;"	f
getRangeAndDefault	command_line/commoncommandlinefunctions.cpp	/^QString getRangeAndDefault(FloatSetting setting, QString defaultVal) {return getRangeAndDefault(setting.min, setting.max, defaultVal);}$/;"	f
getRangeAndDefault	command_line/commoncommandlinefunctions.cpp	/^QString getRangeAndDefault(IntSetting setting) {return (setting.on) ? getRangeAndDefault(setting.min, setting.max, setting.val) : getRangeAndDefault(setting.min, setting.max, "off");}$/;"	f
getRangeAndDefault	command_line/commoncommandlinefunctions.cpp	/^QString getRangeAndDefault(IntSetting setting, QString defaultVal) {return getRangeAndDefault(setting.min, setting.max, defaultVal);}$/;"	f
getRangeAndDefault	command_line/commoncommandlinefunctions.cpp	/^QString getRangeAndDefault(QString min, QString max, QString defaultVal)$/;"	f
getRangeAndDefault	command_line/commoncommandlinefunctions.cpp	/^QString getRangeAndDefault(SciNotSetting setting) {return (setting.on) ? getRangeAndDefault(setting.min.asString(true), setting.max.asString(true), setting.val.asString(true)) : getRangeAndDefault(setting.min.asString(true), setting.max.asString(true), "off");}$/;"	f
getRangeAndDefault	command_line/commoncommandlinefunctions.cpp	/^QString getRangeAndDefault(double min, double max, QString defaultVal) {return getRangeAndDefault(QString::number(min), QString::number(max), defaultVal);}$/;"	f
getRangeAndDefault	command_line/commoncommandlinefunctions.cpp	/^QString getRangeAndDefault(double min, double max, double defaultVal) {return getRangeAndDefault(min, max, QString::number(defaultVal));}$/;"	f
getRangeAndDefault	command_line/commoncommandlinefunctions.cpp	/^QString getRangeAndDefault(int min, int max, QString defaultVal) {return getRangeAndDefault(double(min), double(max), defaultVal);}$/;"	f
getRangeAndDefault	command_line/commoncommandlinefunctions.cpp	/^QString getRangeAndDefault(int min, int max, int defaultVal) { return getRangeAndDefault(double(min), double(max), QString::number(defaultVal));}$/;"	f
getRelativeLengthDiscrepancy	blast/blastquerypath.cpp	/^double BlastQueryPath::getRelativeLengthDiscrepancy() const$/;"	f	class:BlastQueryPath
getRelativePathLength	blast/blastquerypath.cpp	/^double BlastQueryPath::getRelativePathLength() const$/;"	f	class:BlastQueryPath
getReverseComplement	graph/assemblygraph.cpp	/^QByteArray AssemblyGraph::getReverseComplement(QByteArray forwardSequence)$/;"	f	class:AssemblyGraph
getReverseComplement	graph/debruijnedge.h	/^    DeBruijnEdge * getReverseComplement() const {return m_reverseComplement;}$/;"	f	class:DeBruijnEdge
getReverseComplement	graph/debruijnnode.h	/^    DeBruijnNode * getReverseComplement() const {return m_reverseComplement;}$/;"	f	class:DeBruijnNode
getRootTag	ogdf/fileformats/DinoXmlParser.h	/^		const XmlTagObject &getRootTag() const {$/;"	f	class:ogdf::DinoXmlParser
getRotation	ui/mygraphicsview.h	/^    double getRotation() const {return m_rotation;}$/;"	f	class:MyGraphicsView
getSciNotOption	command_line/commoncommandlinefunctions.cpp	/^SciNot getSciNotOption(QString option, QStringList * arguments)$/;"	f
getSecond	graph/graphicsitemnode.h	/^    QPointF getSecond() const {return m_linePoints[1];}$/;"	f	class:GraphicsItemNode
getSecond	graph/ogdfnode.h	/^    ogdf::node getSecond() {if (m_ogdfNodes.size() < 2) return 0; else return m_ogdfNodes[1];}$/;"	f	class:OgdfNode
getSecondLast	graph/graphicsitemnode.h	/^    QPointF getSecondLast() const {return m_linePoints[m_linePoints.size()-2];}$/;"	f	class:GraphicsItemNode
getSecondLast	graph/ogdfnode.h	/^    ogdf::node getSecondLast() {if (m_ogdfNodes.size() < 2) return 0; else return m_ogdfNodes[m_ogdfNodes.size()-2];}$/;"	f	class:OgdfNode
getSelectedEdgeListText	ui/mainwindow.cpp	/^QString MainWindow::getSelectedEdgeListText()$/;"	f	class:MainWindow
getSelectedEdges	ui/mygraphicsscene.cpp	/^std::vector<DeBruijnEdge *> MyGraphicsScene::getSelectedEdges()$/;"	f	class:MyGraphicsScene
getSelectedGraphicsItemNodes	ui/mygraphicsscene.cpp	/^std::vector<GraphicsItemNode *> MyGraphicsScene::getSelectedGraphicsItemNodes()$/;"	f	class:MyGraphicsScene
getSelectedNodeInfo	ui/mainwindow.cpp	/^void MainWindow::getSelectedNodeInfo(int & selectedNodeCount, QString & selectedNodeCountText, QString & selectedNodeListText, QString & selectedNodeLengthText, QString & selectedNodeDepthText)$/;"	f	class:MainWindow
getSelectedNodes	ui/mygraphicsscene.cpp	/^std::vector<DeBruijnNode *> MyGraphicsScene::getSelectedNodes()$/;"	f	class:MyGraphicsScene
getSelectedPositiveNodes	ui/mygraphicsscene.cpp	/^std::vector<DeBruijnNode *> MyGraphicsScene::getSelectedPositiveNodes()$/;"	f	class:MyGraphicsScene
getSelfLoopingEdge	graph/debruijnnode.cpp	/^DeBruijnEdge * DeBruijnNode::getSelfLoopingEdge() const$/;"	f	class:DeBruijnNode
getSequence	blast/blastquery.h	/^    QString getSequence() const {return m_sequence;}$/;"	f	class:BlastQuery
getSequence	graph/debruijnnode.cpp	/^QByteArray DeBruijnNode::getSequence() const$/;"	f	class:DeBruijnNode
getSequence	ui/enteroneblastquerydialog.cpp	/^QString EnterOneBlastQueryDialog::getSequence()$/;"	f	class:EnterOneBlastQueryDialog
getSequenceForGfa	graph/debruijnnode.cpp	/^QByteArray DeBruijnNode::getSequenceForGfa() const$/;"	f	class:DeBruijnNode
getSequenceType	blast/blastquery.h	/^    SequenceType getSequenceType() const {return m_sequenceType;}$/;"	f	class:BlastQuery
getSettingsUsage	command_line/commoncommandlinefunctions.cpp	/^void getSettingsUsage(QStringList * text)$/;"	f
getShapeAsInt	ogdf/fileformats/OgmlParser.cpp	/^int OgmlParser::getShapeAsInt(String s)$/;"	f	class:ogdf::OgmlParser
getSign	graph/debruijnnode.h	/^    QString getSign() const {if (m_name.length() > 0) return m_name.right(1); else return "+";}$/;"	f	class:DeBruijnNode
getStartFraction	graph/path.cpp	/^double Path::getStartFraction() const$/;"	f	class:Path
getStartLocation	graph/path.h	/^    GraphLocation getStartLocation() const {return m_startLocation;}$/;"	f	class:Path
getStartingNode	graph/debruijnedge.h	/^    DeBruijnNode * getStartingNode() const {return m_startingNode;}$/;"	f	class:DeBruijnEdge
getStartingNodes	graph/assemblygraph.cpp	/^std::vector<DeBruijnNode *> AssemblyGraph::getStartingNodes(QString * errorTitle, QString * errorMessage, bool doubleMode,$/;"	f	class:AssemblyGraph
getStaticType	ogdf/basic/Constraints.h	/^	static int getStaticType() { return 0; }$/;"	f	class:ogdf::Constraint
getString	graph/path.cpp	/^QString Path::getString(bool spaces) const$/;"	f	class:Path
getStringOption	command_line/commoncommandlinefunctions.cpp	/^QString getStringOption(QString option, QStringList * arguments)$/;"	f
getSubdirs	ogdf/basic/basic.cpp	/^void getSubdirs(const char *dirName,$/;"	f	namespace:ogdf
getSubdirsAppend	ogdf/basic/basic.cpp	/^void getSubdirsAppend(const char *dirName,$/;"	f	namespace:ogdf
getTestDirectory	tests/bandagetests.cpp	/^QString BandageTests::getTestDirectory()$/;"	f	class:BandageTests
getTopZValue	ui/mygraphicsscene.cpp	/^double MyGraphicsScene::getTopZValue()$/;"	f	class:MyGraphicsScene
getTotalHitGapOpens	blast/blastquerypath.cpp	/^int BlastQueryPath::getTotalHitGapOpens() const$/;"	f	class:BlastQueryPath
getTotalHitMismatches	blast/blastquerypath.cpp	/^int BlastQueryPath::getTotalHitMismatches() const$/;"	f	class:BlastQueryPath
getTotalLengthMinusEdgeOverlaps	graph/assemblygraph.cpp	/^long long AssemblyGraph::getTotalLengthMinusEdgeOverlaps() const$/;"	f	class:AssemblyGraph
getTotalLengthOrphanedNodes	graph/assemblygraph.cpp	/^long long AssemblyGraph::getTotalLengthOrphanedNodes() const {$/;"	f	class:AssemblyGraph
getType	ogdf/basic/Constraints.h	/^	virtual int getType() { return 0; }$/;"	f	class:ogdf::Constraint
getTypeOfString	ogdf/fileformats/OgmlParser.cpp	/^	Ogml::AttributeValueId getTypeOfString(const String& input) const$/;"	f	class:ogdf::OgmlParser::OgmlAttributeValue
getTypeString	blast/blastquery.cpp	/^QString BlastQuery::getTypeString() const$/;"	f	class:BlastQuery
getUniqueName	blast/blastqueries.cpp	/^QString BlastQueries::getUniqueName(QString name)$/;"	f	class:BlastQueries
getUniqueNodeName	graph/assemblygraph.cpp	/^QString AssemblyGraph::getUniqueNodeName(QString baseName)$/;"	f	class:AssemblyGraph
getUpstreamNodes	graph/debruijnnode.cpp	/^std::vector<DeBruijnNode *> DeBruijnNode::getUpstreamNodes() const$/;"	f	class:DeBruijnNode
getUpstreamSequence	graph/debruijnnode.cpp	/^QByteArray DeBruijnNode::getUpstreamSequence(int upstreamSequenceLength) const$/;"	f	class:DeBruijnNode
getValue	ogdf/fileformats/DinoXmlParser.h	/^		const String& getValue() const {$/;"	f	struct:ogdf::XmlAttributeObject
getValue	ogdf/fileformats/DinoXmlParser.h	/^		const String& getValue() const {$/;"	f	struct:ogdf::XmlTagObject
getValue	ogdf/fileformats/OgmlParser.cpp	/^	const String& getValue() const { return Ogml::s_attributeValueNames[id]; }$/;"	f	class:ogdf::OgmlParser::OgmlAttributeValue
getValueList	ogdf/fileformats/OgmlParser.cpp	/^	const List<OgmlAttributeValue*>& getValueList() const { return values; }$/;"	f	class:ogdf::OgmlParser::OgmlAttribute
getValueUsingFractionalIndex	graph/assemblygraph.cpp	/^template<typename T> double AssemblyGraph::getValueUsingFractionalIndex(std::vector<T> * v, double index) const$/;"	f	class:AssemblyGraph
getWArray	ogdf/internal/energybased/MultilevelGraph.h	/^	EdgeArray<double> &getWArray() { return m_weight; }$/;"	f	class:ogdf::MultilevelGraph
get_D1	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void get_D1 (List <QuadTreeNodeNM*>& l){l = D1;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_D2	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void get_D2 (List <QuadTreeNodeNM*>& l){l = D2;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_Graph_ptr	ogdf/energybased/Edge.h	/^	Graph* get_Graph_ptr() const { return Graph_ptr; }$/;"	f	class:ogdf::Edge
get_I	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void get_I (List <QuadTreeNodeNM*>& l){l = I;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_ListIterator	ogdf/energybased/PQueue.h	/^	ListIterator<PackingRowInfo> get_ListIterator() const { return iterator; }$/;"	f	class:ogdf::HelpRecord
get_M	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void get_M (List <QuadTreeNodeNM*>& l){l = M;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_Sm_boxlength	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	double get_Sm_boxlength () const {return Sm_boxlength; }$/;"	f	class:ogdf::QuadTreeNodeNM
get_Sm_center	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	complex<double> get_Sm_center() const {return Sm_center;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_Sm_downleftcorner	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	DPoint get_Sm_downleftcorner () const {return Sm_downleftcorner;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_Sm_level	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	int get_Sm_level () const {return Sm_level;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_act_ptr	ogdf/internal/energybased/QuadTreeNM.h	/^	QuadTreeNodeNM*  get_act_ptr() { return act_ptr; }$/;"	f	class:ogdf::QuadTreeNM
get_angle	ogdf/energybased/Edge.h	/^	double get_angle() const { return angle; }$/;"	f	class:ogdf::Edge
get_angle_1	ogdf/internal/energybased/NodeAttributes.h	/^	double get_angle_1() const {return angle_1;}$/;"	f	class:ogdf::NodeAttributes
get_angle_2	ogdf/internal/energybased/NodeAttributes.h	/^	double get_angle_2() const {return angle_2;}$/;"	f	class:ogdf::NodeAttributes
get_average_forcevector_length	ogdf/energybased/FMMMLayout.cpp	/^double FMMMLayout::get_average_forcevector_length (Graph& G, NodeArray<DPoint>& F)$/;"	f	class:ogdf::FMMMLayout
get_barycenter_position	ogdf/energybased/Multilevel.cpp	/^inline DPoint Multilevel::get_barycenter_position(List<DPoint>& L)$/;"	f	class:ogdf::Multilevel
get_child_lb_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	QuadTreeNodeNM* get_child_lb_ptr () const {return child_lb_ptr;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_child_lt_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	QuadTreeNodeNM* get_child_lt_ptr () const {return child_lt_ptr;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_child_rb_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	QuadTreeNodeNM* get_child_rb_ptr () const {return child_rb_ptr;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_child_rt_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	QuadTreeNodeNM* get_child_rt_ptr () const {return child_rt_ptr;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_component_index	ogdf/energybased/Rectangle.h	/^		int get_component_index() const {return component_index;}$/;"	f	class:ogdf::Rectangle
get_contained_nodes	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void get_contained_nodes(List<node>& L) const {L =  contained_nodes;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_copy_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	edge get_copy_edge() const {return e_subgraph;}$/;"	f	class:ogdf::EdgeAttributes
get_copy_item	ogdf/internal/energybased/ParticleInfo.h	/^	ListIterator<ParticleInfo> get_copy_item() const{return copy_item;}$/;"	f	class:ogdf::ParticleInfo
get_copy_node	ogdf/internal/energybased/NodeAttributes.h	/^	node get_copy_node() const {return v_higher_level;}$/;"	f	class:ogdf::NodeAttributes
get_cross_ref_item	ogdf/internal/energybased/ParticleInfo.h	/^	ListIterator<ParticleInfo> get_cross_ref_item() const { return cross_ref_item; }$/;"	f	class:ogdf::ParticleInfo
get_cut_vertex	ogdf/energybased/Edge.h	/^	node get_cut_vertex() const { return cut_vertex; }$/;"	f	class:ogdf::Edge
get_dedicated_moon_node_List_ptr	ogdf/internal/energybased/NodeAttributes.h	/^	List<node>* get_dedicated_moon_node_List_ptr() {return moon_List_ptr;}$/;"	f	class:ogdf::NodeAttributes
get_dedicated_pm_node	ogdf/internal/energybased/NodeAttributes.h	/^	node get_dedicated_pm_node() const {return dedicated_pm_node;}$/;"	f	class:ogdf::NodeAttributes
get_dedicated_sun_distance	ogdf/internal/energybased/NodeAttributes.h	/^	double get_dedicated_sun_distance() const {return dedicated_sun_distance;}$/;"	f	class:ogdf::NodeAttributes
get_dedicated_sun_node	ogdf/internal/energybased/NodeAttributes.h	/^	node get_dedicated_sun_node() const {return dedicated_sun_node;}$/;"	f	class:ogdf::NodeAttributes
get_edge	ogdf/energybased/Edge.h	/^	edge get_edge() const { return e; }$/;"	f	class:ogdf::Edge
get_father_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	QuadTreeNodeNM* get_father_ptr ()   const {return father_ptr;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_height	ogdf/energybased/Rectangle.h	/^		double get_height() const {return height;}$/;"	f	class:ogdf::Rectangle
get_height	ogdf/internal/energybased/NodeAttributes.h	/^	double get_height() const {return height;}$/;"	f	class:ogdf::NodeAttributes
get_higher_level_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	edge get_higher_level_edge() const { return e_subgraph; }$/;"	f	class:ogdf::EdgeAttributes
get_higher_level_node	ogdf/internal/energybased/NodeAttributes.h	/^	node get_higher_level_node() const {return v_higher_level;}$/;"	f	class:ogdf::NodeAttributes
get_lambda_List_ptr	ogdf/internal/energybased/NodeAttributes.h	/^	List<double>* get_lambda_List_ptr() {return lambda_List_ptr;}$/;"	f	class:ogdf::NodeAttributes
get_length	ogdf/internal/energybased/EdgeAttributes.h	/^	double get_length() const { return length; }$/;"	f	class:ogdf::EdgeAttributes
get_local_exp	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	complex<double>* get_local_exp () const {return LE;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_lower_level_node	ogdf/internal/energybased/NodeAttributes.h	/^	node get_lower_level_node() const {return v_lower_level;}$/;"	f	class:ogdf::NodeAttributes
get_mass	ogdf/internal/energybased/NodeAttributes.h	/^	int get_mass() const {return mass;}$/;"	f	class:ogdf::NodeAttributes
get_max_height	ogdf/energybased/PackingRowInfo.h	/^		double get_max_height() { return max_height; }$/;"	f	class:ogdf::PackingRowInfo
get_max_index	ogdf/energybased/Edge.h	/^	int get_max_index(const Edge& E) {$/;"	f	class:ogdf::EdgeMaxBucketFunc
get_max_mult_iter	ogdf/energybased/FMMMLayout.cpp	/^inline int FMMMLayout::get_max_mult_iter(int act_level, int max_level, int node_nr)$/;"	f	class:ogdf::FMMMLayout
get_min_index	ogdf/energybased/Edge.h	/^	int get_min_index(const Edge& E)$/;"	f	class:ogdf::EdgeMinBucketFunc
get_multipole_exp	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	complex<double>* get_multipole_exp () const {return ME;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_neighbour_sun_node_List_ptr	ogdf/internal/energybased/NodeAttributes.h	/^	List<node>* get_neighbour_sun_node_List_ptr() {return neighbour_s_node_List_ptr;}$/;"	f	class:ogdf::NodeAttributes
get_new_dlc_position	ogdf/energybased/Rectangle.h	/^		DPoint get_new_dlc_position() const { return new_down_left_corner_position; }$/;"	f	class:ogdf::Rectangle
get_node	ogdf/energybased/Node.h	/^		node get_node() const { return vertex; }$/;"	f	class:ogdf::Node
get_old_dlc_position	ogdf/energybased/Rectangle.h	/^		DPoint get_old_dlc_position() const { return old_down_left_corner_position; }$/;"	f	class:ogdf::Rectangle
get_original_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	edge get_original_edge() const { return e_original; }$/;"	f	class:ogdf::EdgeAttributes
get_original_node	ogdf/internal/energybased/NodeAttributes.h	/^	node get_original_node() const {return v_lower_level;}$/;"	f	class:ogdf::NodeAttributes
get_particlenumber_in_subtree	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	int get_particlenumber_in_subtree()const { return subtreeparticlenumber;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_position	ogdf/internal/energybased/NodeAttributes.h	/^	DPoint get_position() const { return position; }$/;"	f	class:ogdf::NodeAttributes
get_post_rep_force_strength	ogdf/energybased/FMMMLayout.h	/^	double get_post_rep_force_strength(int n) {$/;"	f	class:ogdf::FMMMLayout
get_random_node	ogdf/energybased/Set.cpp	/^node Set::get_random_node()$/;"	f	class:ogdf::Set
get_random_node_with_highest_star_mass	ogdf/energybased/Set.cpp	/^node Set::get_random_node_with_highest_star_mass(int rand_tries)$/;"	f	class:ogdf::Set
get_random_node_with_lowest_star_mass	ogdf/energybased/Set.cpp	/^node Set::get_random_node_with_lowest_star_mass(int rand_tries)$/;"	f	class:ogdf::Set
get_root_ptr	ogdf/internal/energybased/QuadTreeNM.h	/^	QuadTreeNodeNM*  get_root_ptr() { return root_ptr; }$/;"	f	class:ogdf::QuadTreeNM
get_row_index	ogdf/energybased/PackingRowInfo.h	/^		int get_row_index() { return row_index; }$/;"	f	class:ogdf::PackingRowInfo
get_subList_ptr	ogdf/internal/energybased/ParticleInfo.h	/^	List<ParticleInfo>* get_subList_ptr() const { return subList_ptr; }$/;"	f	class:ogdf::ParticleInfo
get_subgraph_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	edge get_subgraph_edge() const { return e_subgraph; }$/;"	f	class:ogdf::EdgeAttributes
get_subgraph_node	ogdf/internal/energybased/NodeAttributes.h	/^	node get_subgraph_node() const {return v_higher_level;}$/;"	f	class:ogdf::NodeAttributes
get_tmp_cross_ref_item	ogdf/internal/energybased/ParticleInfo.h	/^	ListIterator<ParticleInfo> get_tmp_cross_ref_item() const { return tmp_item; }$/;"	f	class:ogdf::ParticleInfo
get_total_width	ogdf/energybased/PackingRowInfo.h	/^		double get_total_width() { return total_width; }$/;"	f	class:ogdf::PackingRowInfo
get_type	ogdf/internal/energybased/NodeAttributes.h	/^	int get_type() const {return type;}$/;"	f	class:ogdf::NodeAttributes
get_value	ogdf/energybased/Node.h	/^		int  get_value() const { return value; }$/;"	f	class:ogdf::Node
get_value	ogdf/energybased/PQueue.h	/^	double get_value() const { return value; }$/;"	f	class:ogdf::HelpRecord
get_vertex	ogdf/internal/energybased/ParticleInfo.h	/^	node get_vertex() const { return vertex; }$/;"	f	class:ogdf::ParticleInfo
get_waggled_inbetween_position	ogdf/energybased/Multilevel.cpp	/^inline DPoint Multilevel::get_waggled_inbetween_position(DPoint s, DPoint t, double lambda)$/;"	f	class:ogdf::Multilevel
get_width	ogdf/energybased/Rectangle.h	/^		double get_width() const {return width;}$/;"	f	class:ogdf::Rectangle
get_width	ogdf/internal/energybased/NodeAttributes.h	/^	double get_width() const {return width;}$/;"	f	class:ogdf::NodeAttributes
get_x	ogdf/internal/energybased/NodeAttributes.h	/^	double get_x() const {return position.m_x;}$/;"	f	class:ogdf::NodeAttributes
get_x_List_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	List<ParticleInfo>*  get_x_List_ptr()  {return L_x_ptr;}$/;"	f	class:ogdf::QuadTreeNodeNM
get_x_y_coord	ogdf/internal/energybased/ParticleInfo.h	/^	double get_x_y_coord() const { return x_y_coord; }$/;"	f	class:ogdf::ParticleInfo
get_y	ogdf/internal/energybased/NodeAttributes.h	/^	double get_y() const {return position.m_y;}$/;"	f	class:ogdf::NodeAttributes
get_y_List_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	List<ParticleInfo>*  get_y_List_ptr()  {return L_y_ptr;}$/;"	f	class:ogdf::QuadTreeNodeNM
gmlDoubleValue	ogdf/fileformats/GmlParser.h	/^enum GmlObjectType { gmlIntValue, gmlDoubleValue, gmlStringValue, gmlListBegin,$/;"	e	enum:ogdf::GmlObjectType
gmlEOF	ogdf/fileformats/GmlParser.h	/^	gmlListEnd, gmlKey, gmlEOF, gmlError };$/;"	e	enum:ogdf::GmlObjectType
gmlError	ogdf/fileformats/GmlParser.h	/^	gmlListEnd, gmlKey, gmlEOF, gmlError };$/;"	e	enum:ogdf::GmlObjectType
gmlIntValue	ogdf/fileformats/GmlParser.h	/^enum GmlObjectType { gmlIntValue, gmlDoubleValue, gmlStringValue, gmlListBegin,$/;"	e	enum:ogdf::GmlObjectType
gmlKey	ogdf/fileformats/GmlParser.h	/^	gmlListEnd, gmlKey, gmlEOF, gmlError };$/;"	e	enum:ogdf::GmlObjectType
gmlListBegin	ogdf/fileformats/GmlParser.h	/^enum GmlObjectType { gmlIntValue, gmlDoubleValue, gmlStringValue, gmlListBegin,$/;"	e	enum:ogdf::GmlObjectType
gmlListEnd	ogdf/fileformats/GmlParser.h	/^	gmlListEnd, gmlKey, gmlEOF, gmlError };$/;"	e	enum:ogdf::GmlObjectType
gmlStringValue	ogdf/fileformats/GmlParser.h	/^enum GmlObjectType { gmlIntValue, gmlDoubleValue, gmlStringValue, gmlListBegin,$/;"	e	enum:ogdf::GmlObjectType
go_to_father	ogdf/internal/energybased/QuadTreeNM.h	/^	void go_to_father()$/;"	f	class:ogdf::QuadTreeNM
go_to_lb_child	ogdf/internal/energybased/QuadTreeNM.h	/^	void go_to_lb_child()$/;"	f	class:ogdf::QuadTreeNM
go_to_lt_child	ogdf/internal/energybased/QuadTreeNM.h	/^	void go_to_lt_child()$/;"	f	class:ogdf::QuadTreeNM
go_to_rb_child	ogdf/internal/energybased/QuadTreeNM.h	/^	void go_to_rb_child()$/;"	f	class:ogdf::QuadTreeNM
go_to_rt_child	ogdf/internal/energybased/QuadTreeNM.h	/^	void go_to_rt_child()$/;"	f	class:ogdf::QuadTreeNM
graph	ogdf/fileformats/Ogml.h	/^		graph,$/;"	e	enum:ogdf::Ogml::GraphType
graphEdits	tests/bandagetests.cpp	/^void BandageTests::graphEdits()$/;"	f	class:BandageTests
graphLayoutCancelled	ui/mainwindow.cpp	/^void MainWindow::graphLayoutCancelled()$/;"	f	class:MainWindow
graphLayoutFinished	ui/mainwindow.cpp	/^void MainWindow::graphLayoutFinished()$/;"	f	class:MainWindow
graphLayoutQuality	program/settings.h	/^    IntSetting graphLayoutQuality;$/;"	m	class:Settings
graphLocationFunctions	tests/bandagetests.cpp	/^void BandageTests::graphLocationFunctions()$/;"	f	class:BandageTests
graphOf	ogdf/basic/EdgeArray.h	/^	const Graph *graphOf() const {$/;"	f	class:ogdf::EdgeArray
graphOf	ogdf/basic/Graph_d.h	/^	const Graph *graphOf() const { return m_pGraph; }$/;"	f	class:ogdf::NodeElement
graphOf	ogdf/basic/Graph_d.h	/^	const Graph *graphOf() const { return m_src->graphOf(); }$/;"	f	class:ogdf::EdgeElement
graphOf	ogdf/basic/Graph_d.h	/^inline const Graph *AdjElement::graphOf() const {$/;"	f	class:ogdf::AdjElement
graphOf	ogdf/basic/NodeArray.h	/^	const Graph *graphOf() const {$/;"	f	class:ogdf::NodeArray
graphOf	ogdf/cluster/ClusterArray.h	/^	const ClusterGraph *graphOf() const {$/;"	f	class:ogdf::ClusterArray
graphOf	ogdf/cluster/ClusterGraph.h	/^	const ClusterGraph *graphOf() const { return m_pClusterGraph; }$/;"	f	class:ogdf::ClusterElement
graphPredefKey	ogdf/fileformats/GmlParser.h	/^		namePredefKey, graphPredefKey, versionPredefKey, directedPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
graphPredefKey	ogdf/fileformats/XmlParser.h	/^		namePredefKey, graphPredefKey, versionPredefKey, directedPredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
graphScope	program/settings.h	/^    GraphScope graphScope;$/;"	m	class:Settings
graphScope	tests/bandagetests.cpp	/^void BandageTests::graphScope()$/;"	f	class:BandageTests
graphScopeChanged	ui/mainwindow.cpp	/^void MainWindow::graphScopeChanged()$/;"	f	class:MainWindow
graphicsPredefKey	ogdf/fileformats/GmlParser.h	/^		nodePredefKey, edgePredefKey, graphicsPredefKey, xPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
graphicsPredefKey	ogdf/fileformats/XmlParser.h	/^		nodePredefKey, edgePredefKey, graphicsPredefKey, xPredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
greater	ogdf/basic/comparer.h	/^	static bool greater(const CONTENTPOINTER &x, const CONTENTPOINTER &y) { return STATICCONTENTCOMPARER::greater(*x,*y); }$/;"	f	class:ogdf::TargetComparer
greater	ogdf/basic/comparer.h	/^	static bool greater(const bool &x, const bool &y) { return  x && !y; }$/;"	f	class:ogdf::StdComparer
greater	ogdf/basic/comparer.h	/^	virtual bool greater(const E &x, const E &y) const {$/;"	f	class:ogdf::VComparer
greater	ogdf/basic/comparer.h	/^    static bool greater(const E &\/*x*\/, const E &\/*y*\/) { OGDF_THROW(NoStdComparerException); }$/;"	f	class:ogdf::StdComparer
grid_quotient	ogdf/internal/energybased/FruchtermanReingold.h	/^	int grid_quotient() const {return _grid_quotient;}$/;"	f	class:ogdf::FruchtermanReingold
grid_quotient	ogdf/internal/energybased/FruchtermanReingold.h	/^	void grid_quotient(int p) { _grid_quotient = ((0<=p) ? p : 2);}$/;"	f	class:ogdf::FruchtermanReingold
grow	ogdf/basic/Array.h	/^void Array<E,INDEX>::grow(INDEX add)$/;"	f	class:ogdf::Array
grow	ogdf/basic/Array.h	/^void Array<E,INDEX>::grow(INDEX add, const E &x)$/;"	f	class:ogdf::Array
hPredefKey	ogdf/fileformats/GmlParser.h	/^		yPredefKey, wPredefKey, hPredefKey, typePredefKey, widthPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
hPredefKey	ogdf/fileformats/XmlParser.h	/^		yPredefKey, wPredefKey, hPredefKey, nodetypePredefKey, edgetypePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
hasCsvData	graph/debruijnnode.h	/^    bool hasCsvData() const {return !m_csvData.isEmpty();}$/;"	f	class:DeBruijnNode
hasCustomColour	graph/debruijnnode.h	/^    bool hasCustomColour() const {return m_customColour.isValid();}$/;"	f	class:DeBruijnNode
hasGraphicsItem	graph/debruijnnode.h	/^    bool hasGraphicsItem() const {return m_graphicsItemNode != 0;}$/;"	f	class:DeBruijnNode
hasHits	blast/blastquery.h	/^    bool hasHits() const {return m_hits.size() > 0;}$/;"	f	class:BlastQuery
hasMoreSonXmlTagObject	ogdf/fileformats/DinoXmlParser.cpp	/^	bool XmlTagObject::hasMoreSonXmlTagObject(const List<String> &sonNamesToIgnore) const {$/;"	f	class:ogdf::XmlTagObject
hasNodeSubset	graph/path.cpp	/^bool Path::hasNodeSubset(Path other) const$/;"	f	class:Path
hasSingleSink	ogdf/basic/simple_graph_alg.cpp	/^bool hasSingleSink(const Graph& G, node &t)$/;"	f	namespace:ogdf
hasSingleSink	ogdf/basic/simple_graph_alg.h	/^inline bool hasSingleSink(const Graph &G) {$/;"	f	namespace:ogdf
hasSingleSource	ogdf/basic/simple_graph_alg.cpp	/^bool hasSingleSource(const Graph& G, node &s)$/;"	f	namespace:ogdf
hasSingleSource	ogdf/basic/simple_graph_alg.h	/^inline bool hasSingleSource(const Graph &G) {$/;"	f	namespace:ogdf
hash	ogdf/basic/Hashing.h	/^	public:	size_t hash(const K &key) const { return size_t(key); }$/;"	f	class:ogdf::DefHashFunc
hash	ogdf/basic/Hashing.h	/^	public:	size_t hash(const double &key) const {$/;"	f	class:ogdf::DefHashFunc
hash	ogdf/basic/Hashing.h	/^	public:	size_t hash(const void * &key) const { return size_t(key && 0xffffffff); }$/;"	f	class:ogdf::DefHashFunc
hash	ogdf/basic/String.cpp	/^int DefHashFunc<String>::hash(const String &key) const$/;"	f	class:ogdf::DefHashFunc
hash	ogdf/basic/geometry.h	/^	int hash(const IPoint &ip) const {$/;"	f	class:ogdf::DefHashFunc
hash	ogdf/basic/tuples.h	/^	size_t hash(const Tuple2<K1_,K2_> &key) const {$/;"	f	class:ogdf::HashFuncTuple
hashString	ogdf/fileformats/DinoXmlParser.cpp	/^	HashedString *DinoXmlParser::hashString(const String &str)$/;"	f	class:ogdf::DinoXmlParser
hashString	ogdf/fileformats/GmlParser.cpp	/^GmlKey GmlParser::hashString(const String &str)$/;"	f	class:ogdf::GmlParser
hashString	ogdf/fileformats/XmlParser.cpp	/^XmlKey XmlParser::hashString(const String &str)$/;"	f	class:ogdf::XmlParser
hashValue	ogdf/basic/Hashing.h	/^	size_t hashValue() const { return m_hashValue; }$/;"	f	class:ogdf::HashElementBase
haveSameNodes	graph/path.cpp	/^bool Path::haveSameNodes(Path other) const$/;"	f	class:Path
height	ogdf/basic/GraphAttributes.h	/^	NodeArray<double> &height() {$/;"	f	class:ogdf::GraphAttributes
height	ogdf/basic/GraphAttributes.h	/^	const NodeArray<double> &height() const {$/;"	f	class:ogdf::GraphAttributes
height	ogdf/basic/GraphAttributes.h	/^	const double &height(node v) const {$/;"	f	class:ogdf::GraphAttributes
height	ogdf/basic/GraphAttributes.h	/^	double &height(node v) {$/;"	f	class:ogdf::GraphAttributes
height	ogdf/basic/geometry.h	/^	double height() const {$/;"	f	class:ogdf::DRect
height	ogdf/energybased/Rectangle.h	/^		double height;                    \/\/height of the surround. rect.$/;"	m	class:ogdf::Rectangle
height	ogdf/internal/energybased/NodeAttributes.h	/^	double height;$/;"	m	class:ogdf::NodeAttributes
heightForWidth	ui/nodewidthvisualaid.h	/^    int heightForWidth(int w ) const {return w;}$/;"	f	class:NodeWidthVisualAid
heightPredefKey	ogdf/fileformats/GmlParser.h	/^		heightPredefKey, stipplePredefKey, patternPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
heightPredefKey	ogdf/fileformats/XmlParser.h	/^		typePredefKey, widthPredefKey, heightPredefKey, sizePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
hidden	ui/querypathsdialog.cpp	/^void QueryPathsDialog::hidden()$/;"	f	class:QueryPathsDialog
hideEdge	ogdf/basic/Graph.cpp	/^void Graph::hideEdge(edge e)$/;"	f	class:ogdf::Graph
hideNodes	ui/mainwindow.cpp	/^void MainWindow::hideNodes()$/;"	f	class:MainWindow
hierarchyList	ogdf/basic/GraphAttributes.cpp	/^int GraphAttributes::hierarchyList(List<List<edge>* > &list) const$/;"	f	class:ogdf::GraphAttributes
hierarchyList	ogdf/basic/GraphAttributes.cpp	/^int GraphAttributes::hierarchyList(List<List<node>* > &list) const$/;"	f	class:ogdf::GraphAttributes
high	ogdf/basic/Array.h	/^	INDEX high() const { return m_high; }$/;"	f	class:ogdf::Array
high1	ogdf/basic/Array2D.h	/^	int high1() const { return m_b; }$/;"	f	class:ogdf::Array2D
high2	ogdf/basic/Array2D.h	/^	int high2() const { return m_d; }$/;"	f	class:ogdf::Array2D
highDegreeExpander	ogdf/basic/Graph_d.h	/^		highDegreeExpander,$/;"	e	enum:ogdf::Graph::NodeType
highDepthColour	program/settings.h	/^    QColor highDepthColour;$/;"	m	class:Settings
highDepthValue	program/settings.h	/^    FloatSetting highDepthValue;$/;"	m	class:Settings
hitCount	blast/blastquery.h	/^    int hitCount() const {return m_hits.size();}$/;"	f	class:BlastQuery
horIntersection	ogdf/basic/geometry.cpp	/^int DLine::horIntersection(const double horAxis, double &crossing) const$/;"	f	class:ogdf::DLine
id	ogdf/fileformats/GmlParser.h	/^	int id(GmlObject *object) const { return object->m_key->info(); }$/;"	f	class:ogdf::GmlParser
id	ogdf/fileformats/OgmlParser.cpp	/^	int id;  \/\/!< Integer identifier of object; for possible ids see Ogml.h.$/;"	m	class:ogdf::OgmlParser::OgmlAttribute	file:
id	ogdf/fileformats/OgmlParser.cpp	/^	int id; \/\/!< Id of the attribute value; for possible ones see Ogml.h.$/;"	m	class:ogdf::OgmlParser::OgmlAttributeValue	file:
id	ogdf/fileformats/OgmlParser.cpp	/^	int id; \/\/!< Integer identifier of object; for possible ids see Ogml.h.$/;"	m	class:ogdf::OgmlParser::OgmlTag	file:
id	ogdf/fileformats/XmlParser.h	/^	int id(XmlObject *object) const { return object->m_key->info(); }$/;"	f	class:ogdf::XmlParser
idNode	ogdf/basic/GraphAttributes.h	/^	const int &idNode(node v) const {$/;"	f	class:ogdf::GraphAttributes
idNode	ogdf/basic/GraphAttributes.h	/^	int &idNode(node v) {$/;"	f	class:ogdf::GraphAttributes
idPredefKey	ogdf/fileformats/GmlParser.h	/^	enum PredefinedKey { idPredefKey = 0, labelPredefKey, CreatorPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
idPredefKey	ogdf/fileformats/XmlParser.h	/^	enum PredefinedKey { idPredefKey = 0, labelPredefKey, CreatorPredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
identifier	ogdf/fileformats/DinoXmlScanner.h	/^		identifier,			\/\/\/< (a..z|A..Z){(a..z|A..Z|0..9|.|_|:)}$/;"	e	enum:ogdf::XmlToken
ignoreContent	ogdf/fileformats/OgmlParser.cpp	/^	bool ignoreContent;$/;"	m	class:ogdf::OgmlParser::OgmlTag	file:
ignoresContent	ogdf/fileformats/OgmlParser.cpp	/^	const bool& ignoresContent() const { return ignoreContent; }$/;"	f	class:ogdf::OgmlParser::OgmlTag
imageAlignmentNode	ogdf/basic/GraphAttributes.h	/^	ImageAlignment &imageAlignmentNode(node v) {$/;"	f	class:ogdf::GraphAttributes
imageAlignmentNode	ogdf/basic/GraphAttributes.h	/^	const ImageAlignment &imageAlignmentNode(node v) const {$/;"	f	class:ogdf::GraphAttributes
imageAlignmentToOGML	ogdf/basic/GraphAttributes.cpp	/^const char * GraphAttributes::imageAlignmentToOGML(const GraphAttributes::ImageAlignment &imgAlign)$/;"	f	class:ogdf::GraphAttributes
imageDrawLineNode	ogdf/basic/GraphAttributes.h	/^	bool &imageDrawLineNode(node v) {$/;"	f	class:ogdf::GraphAttributes
imageDrawLineNode	ogdf/basic/GraphAttributes.h	/^	const bool &imageDrawLineNode(node v) const {$/;"	f	class:ogdf::GraphAttributes
imageHeightNode	ogdf/basic/GraphAttributes.h	/^	const double &imageHeightNode(node v) const {$/;"	f	class:ogdf::GraphAttributes
imageHeightNode	ogdf/basic/GraphAttributes.h	/^	double &imageHeightNode(node v) {$/;"	f	class:ogdf::GraphAttributes
imageStyleNode	ogdf/basic/GraphAttributes.h	/^	ImageStyle &imageStyleNode(node v) {$/;"	f	class:ogdf::GraphAttributes
imageStyleNode	ogdf/basic/GraphAttributes.h	/^	const ImageStyle &imageStyleNode(node v) const {$/;"	f	class:ogdf::GraphAttributes
imageStyleToOGML	ogdf/basic/GraphAttributes.cpp	/^const char * GraphAttributes::imageStyleToOGML(const GraphAttributes::ImageStyle &imgStyle)$/;"	f	class:ogdf::GraphAttributes
imageUriNode	ogdf/basic/GraphAttributes.h	/^	String &imageUriNode(node v) {$/;"	f	class:ogdf::GraphAttributes
imageUriNode	ogdf/basic/GraphAttributes.h	/^	const String &imageUriNode(node v) const {$/;"	f	class:ogdf::GraphAttributes
imageWidthNode	ogdf/basic/GraphAttributes.h	/^	const double &imageWidthNode(node v) const {$/;"	f	class:ogdf::GraphAttributes
imageWidthNode	ogdf/basic/GraphAttributes.h	/^	double &imageWidthNode(node v) {$/;"	f	class:ogdf::GraphAttributes
importAttributes	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::importAttributes(const GraphAttributes &GA)$/;"	f	class:ogdf::MultilevelGraph
importAttributesSimple	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::importAttributesSimple(const GraphAttributes &GA)$/;"	f	class:ogdf::MultilevelGraph
import_EdgeAttributes	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::import_EdgeAttributes($/;"	f	class:ogdf::FMMMLayout
import_NodeAttributes	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::import_NodeAttributes($/;"	f	class:ogdf::FMMMLayout
inEdges	ogdf/basic/Graph_d.h	/^	void inEdges(node v, EDGELIST &edges) const {$/;"	f	class:ogdf::Graph
inOgdf	graph/debruijnnode.h	/^    bool inOgdf() const {return m_ogdfNode != 0;}$/;"	f	class:DeBruijnNode
inRange	program/settings.h	/^    bool inRange(SciNot v) const {return v >= min && v <= max;}$/;"	f	class:SciNotSetting
inRange	program/settings.h	/^    bool inRange(double v) const {return v >= min && v <= max;}$/;"	f	class:FloatSetting
inRange	program/settings.h	/^    bool inRange(int v) const {return v >= min && v <= max;}$/;"	f	class:IntSetting
inSubGraph	ogdf/basic/GraphAttributes.h	/^	bool inSubGraph(edge e, int n) const {$/;"	f	class:ogdf::GraphAttributes
in_lb_quad	ogdf/internal/energybased/NMM.cpp	/^bool NMM::in_lb_quad($/;"	f	class:ogdf::NMM
in_lt_quad	ogdf/internal/energybased/NMM.cpp	/^bool NMM::in_lt_quad($/;"	f	class:ogdf::NMM
in_rb_quad	ogdf/internal/energybased/NMM.cpp	/^bool NMM::in_rb_quad($/;"	f	class:ogdf::NMM
in_rt_quad	ogdf/internal/energybased/NMM.cpp	/^bool NMM::in_rt_quad($/;"	f	class:ogdf::NMM
incVectorSlot	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^void PoolMemoryAllocator::incVectorSlot(PoolElement &pe)$/;"	f	class:ogdf::PoolMemoryAllocator
incrementPosition	ogdf/fileformats/DinoLineBuffer.cpp	/^	void DinoLineBufferPosition::incrementPosition()$/;"	f	class:ogdf::DinoLineBufferPosition
ind	ogdf/cluster/ClusterGraphAttributes.cpp	/^omani ind(int depth)$/;"	f	namespace:ogdf
ind	ogdf/cluster/ClusterGraphAttributes.cpp	/^ostream &ind(ostream &os, int depth)$/;"	f	namespace:ogdf
indeg	ogdf/basic/Graph_d.h	/^	int indeg() const { return m_indeg; }$/;"	f	class:ogdf::NodeElement
indent	ogdf/fileformats/GmlParser.cpp	/^void GmlParser::indent(ostream &os, int d)$/;"	f	class:ogdf::GmlParser
indent	ogdf/fileformats/XmlParser.cpp	/^void XmlParser::indent(ostream &os, int d)$/;"	f	class:ogdf::XmlParser
index	ogdf/basic/CombinatorialEmbedding.h	/^	int index() const { return m_id; }$/;"	f	class:ogdf::FaceElement
index	ogdf/basic/Graph_d.h	/^	int index() const { return m_id; }$/;"	f	class:ogdf::AdjElement
index	ogdf/basic/Graph_d.h	/^	int index() const { return m_id; }$/;"	f	class:ogdf::EdgeElement
index	ogdf/basic/Graph_d.h	/^	int index() const { return m_id; }$/;"	f	class:ogdf::NodeElement
index	ogdf/cluster/ClusterGraph.h	/^	int index() const { return m_id; }$/;"	f	class:ogdf::ClusterElement
info	ogdf/basic/Hashing.h	/^	I &info() { return m_info; }$/;"	f	class:ogdf::HashElement
info	ogdf/basic/Hashing.h	/^	const I &info() const { return m_info; }$/;"	f	class:ogdf::HashElement
info	ogdf/basic/Hashing.h	/^	const I &info() const { return m_pElement->info(); }$/;"	f	class:ogdf::HashConstIterator
init	ogdf/basic/AdjEntryArray.h	/^	void init() {$/;"	f	class:ogdf::AdjEntryArray
init	ogdf/basic/AdjEntryArray.h	/^	void init(const Graph &G) {$/;"	f	class:ogdf::AdjEntryArray
init	ogdf/basic/AdjEntryArray.h	/^	void init(const Graph &G, const T &x) {$/;"	f	class:ogdf::AdjEntryArray
init	ogdf/basic/Array.h	/^	void init() {$/;"	f	class:ogdf::Array
init	ogdf/basic/Array.h	/^	void init(INDEX a, INDEX b) {$/;"	f	class:ogdf::Array
init	ogdf/basic/Array.h	/^	void init(INDEX a, INDEX b, const E &x) {$/;"	f	class:ogdf::Array
init	ogdf/basic/Array.h	/^	void init(INDEX s) { init(0,s-1); }$/;"	f	class:ogdf::Array
init	ogdf/basic/Array2D.h	/^	void init() { init(0,-1,0,-1); }$/;"	f	class:ogdf::Array2D
init	ogdf/basic/Array2D.h	/^	void init(int a, int b, int c, int d) {$/;"	f	class:ogdf::Array2D
init	ogdf/basic/Array2D.h	/^	void init(int a, int b, int c, int d, const E &x) {$/;"	f	class:ogdf::Array2D
init	ogdf/basic/BoundedStack.h	/^	void init() {$/;"	f	class:ogdf::BoundedStack
init	ogdf/basic/BoundedStack.h	/^	void init(INDEX n) {$/;"	f	class:ogdf::BoundedStack
init	ogdf/basic/CombinatorialEmbedding.cpp	/^void ConstCombinatorialEmbedding::init()$/;"	f	class:ogdf::ConstCombinatorialEmbedding
init	ogdf/basic/CombinatorialEmbedding.cpp	/^void ConstCombinatorialEmbedding::init(const Graph &G)$/;"	f	class:ogdf::ConstCombinatorialEmbedding
init	ogdf/basic/CombinatorialEmbedding.h	/^	void init(Graph &G) {$/;"	f	class:ogdf::CombinatorialEmbedding
init	ogdf/basic/EdgeArray.h	/^	void init() {$/;"	f	class:ogdf::EdgeArray
init	ogdf/basic/EdgeArray.h	/^	void init(const Graph &G) {$/;"	f	class:ogdf::EdgeArray
init	ogdf/basic/EdgeArray.h	/^	void init(const Graph &G, const T &x) {$/;"	f	class:ogdf::EdgeArray
init	ogdf/basic/FaceArray.h	/^	void init() {$/;"	f	class:ogdf::FaceArray
init	ogdf/basic/FaceArray.h	/^	void init(const ConstCombinatorialEmbedding &E) {$/;"	f	class:ogdf::FaceArray
init	ogdf/basic/FaceArray.h	/^	void init(const ConstCombinatorialEmbedding &E, const T &x) {$/;"	f	class:ogdf::FaceArray
init	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::init(const Graph &G, long initAttr)$/;"	f	class:ogdf::GraphAttributes
init	ogdf/basic/Hashing.cpp	/^void HashingBase::init(int tableSize)$/;"	f	class:ogdf::HashingBase
init	ogdf/basic/NodeArray.h	/^	void init() {$/;"	f	class:ogdf::NodeArray
init	ogdf/basic/NodeArray.h	/^	void init(const Graph &G) {$/;"	f	class:ogdf::NodeArray
init	ogdf/basic/NodeArray.h	/^	void init(const Graph &G, const T &x) {$/;"	f	class:ogdf::NodeArray
init	ogdf/basic/System.cpp	/^void System::init()$/;"	f	class:ogdf::System
init	ogdf/cluster/ClusterArray.h	/^	void init() {$/;"	f	class:ogdf::ClusterArray
init	ogdf/cluster/ClusterArray.h	/^	void init(const ClusterGraph &C) {$/;"	f	class:ogdf::ClusterArray
init	ogdf/cluster/ClusterArray.h	/^	void init(const ClusterGraph &C, const T &x) {$/;"	f	class:ogdf::ClusterArray
init	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::init(const Graph &G)$/;"	f	class:ogdf::ClusterGraph
init	ogdf/cluster/ClusterGraph.h	/^	void init(List<node> &nodes) {$/;"	f	class:ogdf::ClusterElement
init	ogdf/cluster/ClusterGraphAttributes.cpp	/^void ClusterGraphAttributes::init(ClusterGraph &cg, long initAttributes)$/;"	f	class:ogdf::ClusterGraphAttributes
init	ogdf/internal/basic/MallocMemoryAllocator.h	/^	static void init() { }$/;"	f	class:ogdf::MallocMemoryAllocator
init	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^void PoolMemoryAllocator::init()$/;"	f	class:ogdf::PoolMemoryAllocator
initAtt	ogdf/cluster/ClusterGraphAttributes.h	/^			virtual void initAtt(long initAttributes = 0) {$/;"	f	class:ogdf::ClusterGraphAttributes
initAttributes	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::initAttributes(long attr)$/;"	f	class:ogdf::GraphAttributes
initByActiveNodes	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::initByActiveNodes($/;"	f	class:ogdf::GraphCopy
initByNodes	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::initByNodes(const List<node> &nodes, EdgeArray<edge> &eCopy)$/;"	f	class:ogdf::GraphCopy
initGC	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::initGC(const GraphCopy &GC,$/;"	f	class:ogdf::GraphCopy
initGC	ogdf/basic/GraphCopy.cpp	/^void GraphCopySimple::initGC(const GraphCopySimple &GC,$/;"	f	class:ogdf::GraphCopySimple
initGraph	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::initGraph(const Graph &G)$/;"	f	class:ogdf::ClusterGraph
initInternal	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::initInternal()$/;"	f	class:ogdf::MultilevelGraph
initPredefinedKeys	ogdf/fileformats/GmlParser.cpp	/^void GmlParser::initPredefinedKeys()$/;"	f	class:ogdf::GmlParser
initPredefinedKeys	ogdf/fileformats/XmlParser.cpp	/^void XmlParser::initPredefinedKeys()$/;"	f	class:ogdf::XmlParser
initReverseIndizes	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::initReverseIndizes()$/;"	f	class:ogdf::MultilevelGraph
initThread	ogdf/internal/basic/MallocMemoryAllocator.h	/^	static void initThread() { }$/;"	f	class:ogdf::MallocMemoryAllocator
initThread	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^void PoolMemoryAllocator::initThread() {$/;"	f	class:ogdf::PoolMemoryAllocator
init_F	ogdf/energybased/FMMMLayout.cpp	/^inline void FMMMLayout::init_F(Graph& G, NodeArray<DPoint>& F)$/;"	f	class:ogdf::FMMMLayout
init_binko	ogdf/internal/energybased/NMM.cpp	/^void NMM::init_binko(int t)$/;"	f	class:ogdf::NMM
init_boxlength_and_cornercoordinate	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::init_boxlength_and_cornercoordinate ($/;"	f	class:ogdf::FMMMLayout
init_expansion_Lists	ogdf/internal/energybased/NMM.cpp	/^inline void NMM::init_expansion_Lists(QuadTreeNodeNM* act_ptr)$/;"	f	class:ogdf::NMM
init_ind_ideal_edgelength	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::init_ind_ideal_edgelength($/;"	f	class:ogdf::FMMMLayout
init_last_node_movement	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::init_last_node_movement($/;"	f	class:ogdf::FMMMLayout
init_mult_values	ogdf/internal/energybased/EdgeAttributes.h	/^	void init_mult_values() { e_subgraph = NULL; moon_edge = false; }$/;"	f	class:ogdf::EdgeAttributes
init_mult_values	ogdf/internal/energybased/NodeAttributes.cpp	/^void NodeAttributes::init_mult_values()$/;"	f	class:ogdf::NodeAttributes
init_multilevel_values	ogdf/energybased/Multilevel.cpp	/^inline void  Multilevel::init_multilevel_values($/;"	f	class:ogdf::Multilevel
init_node_set	ogdf/energybased/Set.cpp	/^void Set::init_node_set(Graph& G)$/;"	f	class:ogdf::Set
init_node_set	ogdf/energybased/Set.cpp	/^void Set::init_node_set(Graph& G,NodeArray<NodeAttributes>& A)$/;"	f	class:ogdf::Set
init_power_of_2_array	ogdf/internal/energybased/NMM.cpp	/^inline void NMM::init_power_of_2_array()$/;"	f	class:ogdf::NMM
init_time	ogdf/energybased/FMMMLayout.h	/^	void init_time() { time_total = 0; }$/;"	f	class:ogdf::FMMMLayout
init_tree	ogdf/internal/energybased/QuadTreeNM.h	/^	void init_tree() {$/;"	f	class:ogdf::QuadTreeNM
initialPlacementForces	ogdf/energybased/FMMMLayout.h	/^	InitialPlacementForces initialPlacementForces() const {$/;"	f	class:ogdf::FMMMLayout
initialPlacementForces	ogdf/energybased/FMMMLayout.h	/^	void initialPlacementForces(InitialPlacementForces ipf) {$/;"	f	class:ogdf::FMMMLayout
initialPlacementMult	ogdf/energybased/FMMMLayout.h	/^	InitialPlacementMult initialPlacementMult() const {$/;"	f	class:ogdf::FMMMLayout
initialPlacementMult	ogdf/energybased/FMMMLayout.h	/^	void initialPlacementMult(InitialPlacementMult ipm) {$/;"	f	class:ogdf::FMMMLayout
initialize	ogdf/basic/Array.h	/^void Array<E,INDEX>::initialize()$/;"	f	class:ogdf::Array
initialize	ogdf/basic/Array.h	/^void Array<E,INDEX>::initialize(const E &x)$/;"	f	class:ogdf::Array
initialize	ogdf/basic/Array2D.h	/^void Array2D<E>::initialize()$/;"	f	class:ogdf::Array2D
initialize	ogdf/basic/Array2D.h	/^void Array2D<E>::initialize(const E &x)$/;"	f	class:ogdf::Array2D
initialize_all_options	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::initialize_all_options()$/;"	f	class:ogdf::FMMMLayout
insert	ogdf/basic/FaceSet.h	/^	void insert(face f) {$/;"	f	class:ogdf::FaceSet
insert	ogdf/basic/FaceSet.h	/^	void insert(face f) {$/;"	f	class:ogdf::FaceSetPure
insert	ogdf/basic/FaceSet.h	/^	void insert(face f) {$/;"	f	class:ogdf::FaceSetSimple
insert	ogdf/basic/Hashing.cpp	/^void HashingBase::insert(HashElementBase *pElement)$/;"	f	class:ogdf::HashingBase
insert	ogdf/basic/Hashing.h	/^	HashElement<K,I> *insert(const K &key, const I &info) {$/;"	f	class:ogdf::Hashing
insert	ogdf/basic/List.h	/^	ListIterator<E> insert(const E &x, ListIterator<E> it, Direction dir = after) {$/;"	f	class:ogdf::List
insert	ogdf/basic/List.h	/^	ListIterator<E> insert(const E &x, ListIterator<E> it, Direction dir = after) {$/;"	f	class:ogdf::ListPure
insert	ogdf/energybased/PQueue.h	/^	void insert(double value, ListIterator<PackingRowInfo> iterator)$/;"	f	class:ogdf::PQueue
insertAfter	ogdf/basic/Graph_d.h	/^	void insertAfter(GraphElement *pX, GraphElement *pY) {$/;"	f	class:ogdf::GraphListBase
insertAfter	ogdf/basic/Graph_d.h	/^	void insertAfter(T *pX, T *pY) {$/;"	f	class:ogdf::GraphList
insertAfter	ogdf/basic/List.h	/^	ListIterator<E> insertAfter(const E &x, ListIterator<E> it) {$/;"	f	class:ogdf::List
insertAfter	ogdf/basic/List.h	/^	ListIterator<E> insertAfter(const E &x, ListIterator<E> it) {$/;"	f	class:ogdf::ListPure
insertAfter	ogdf/basic/SList.h	/^	SListIterator<E> insertAfter(const E &x, SListIterator<E> itBefore) {$/;"	f	class:ogdf::SList
insertAfter	ogdf/basic/SList.h	/^	SListIterator<E> insertAfter(const E &x, SListIterator<E> itBefore) {$/;"	f	class:ogdf::SListPure
insertBefore	ogdf/basic/Graph_d.h	/^	void insertBefore(GraphElement *pX, GraphElement *pY) {$/;"	f	class:ogdf::GraphListBase
insertBefore	ogdf/basic/Graph_d.h	/^	void insertBefore(T *pX, T *pY) {$/;"	f	class:ogdf::GraphList
insertBefore	ogdf/basic/List.h	/^	ListIterator<E> insertBefore(const E &x, ListIterator<E> it) {$/;"	f	class:ogdf::List
insertBefore	ogdf/basic/List.h	/^	ListIterator<E> insertBefore(const E &x, ListIterator<E> it) {$/;"	f	class:ogdf::ListPure
insertByNeed	ogdf/basic/Hashing.h	/^	HashElement<K,I> *insertByNeed(const K &key, const I &info) {$/;"	f	class:ogdf::Hashing
insertCrossPoint	ogdf/basic/geometry.cpp	/^void DPolygon::insertCrossPoint(const DPoint &p)$/;"	f	class:ogdf::DPolygon
insertCrossing	ogdf/basic/GraphCopy.cpp	/^edge GraphCopy::insertCrossing($/;"	f	class:ogdf::GraphCopy
insertEdgePath	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::insertEdgePath(edge eOrig, const SList<adjEntry> &crossedEdges)$/;"	f	class:ogdf::GraphCopy
insertEdgePath	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::insertEdgePath(node srcOrig, node tgtOrig, const SList<adjEntry> &crossedEdges)$/;"	f	class:ogdf::GraphCopy
insertEdgePathEmbedded	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::insertEdgePathEmbedded($/;"	f	class:ogdf::GraphCopy
insertPoint	ogdf/basic/geometry.cpp	/^ListIterator<DPoint> DPolygon::insertPoint($/;"	f	class:ogdf::DPolygon
insertPoint	ogdf/basic/geometry.h	/^	ListIterator<DPoint> insertPoint(const DPoint &p) {$/;"	f	class:ogdf::DPolygon
insert_path	graph/debruijnnode.h	/^	void insert_path(QString p) {m_paths.push_back(p);}$/;"	f	class:DeBruijnNode
intToImageAlignment	ogdf/basic/GraphAttributes.h	/^	static ImageAlignment intToImageAlignment(int i) {$/;"	f	class:ogdf::GraphAttributes
intToImageStyle	ogdf/basic/GraphAttributes.h	/^	static ImageStyle intToImageStyle(int i) {$/;"	f	class:ogdf::GraphAttributes
intToPattern	ogdf/basic/GraphAttributes.h	/^	static BrushPattern intToPattern(int i) {$/;"	f	class:ogdf::GraphAttributes
intToStyle	ogdf/basic/GraphAttributes.h	/^	static EdgeStyle intToStyle(int i) {$/;"	f	class:ogdf::GraphAttributes
intWeight	ogdf/basic/GraphAttributes.h	/^	const int &intWeight(edge e) const {$/;"	f	class:ogdf::GraphAttributes
intWeight	ogdf/basic/GraphAttributes.h	/^	int &intWeight(edge e) {$/;"	f	class:ogdf::GraphAttributes
intersection	ogdf/basic/geometry.cpp	/^bool DLine::intersection($/;"	f	class:ogdf::DLine
invalidToken	ogdf/fileformats/DinoXmlScanner.h	/^		invalidToken,		\/\/\/< No token identified$/;"	e	enum:ogdf::XmlToken
invertSelection	ui/mainwindow.cpp	/^void MainWindow::invertSelection()$/;"	f	class:MainWindow
ipfKeepPositions	ogdf/energybased/FMMMLayout.h	/^		ipfKeepPositions     \/\/!< No change in placement.$/;"	e	enum:ogdf::FMMMLayout::InitialPlacementForces
ipfRandomRandIterNr	ogdf/energybased/FMMMLayout.h	/^		ipfRandomRandIterNr, \/\/!< Random placement (based on randIterNr()).$/;"	e	enum:ogdf::FMMMLayout::InitialPlacementForces
ipfRandomTime	ogdf/energybased/FMMMLayout.h	/^		ipfRandomTime,       \/\/!< Random placement (based on current time).$/;"	e	enum:ogdf::FMMMLayout::InitialPlacementForces
ipfUniformGrid	ogdf/energybased/FMMMLayout.h	/^		ipfUniformGrid,      \/\/!< Uniform placement on a grid.$/;"	e	enum:ogdf::FMMMLayout::InitialPlacementForces
ipmAdvanced	ogdf/energybased/FMMMLayout.h	/^		ipmAdvanced$/;"	e	enum:ogdf::FMMMLayout::InitialPlacementMult
ipmSimple	ogdf/energybased/FMMMLayout.h	/^		ipmSimple,$/;"	e	enum:ogdf::FMMMLayout::InitialPlacementMult
isAcyclic	ogdf/basic/simple_graph_alg.cpp	/^bool isAcyclic(const Graph &G, List<edge> &backedges)$/;"	f	namespace:ogdf
isAcyclic	ogdf/basic/simple_graph_alg.h	/^inline bool isAcyclic(const Graph &G) {$/;"	f	namespace:ogdf
isAcyclicUndirected	ogdf/basic/simple_graph_alg.cpp	/^bool isAcyclicUndirected(const Graph &G, List<edge> &backedges)$/;"	f	namespace:ogdf
isAcyclicUndirected	ogdf/basic/simple_graph_alg.h	/^inline bool isAcyclicUndirected(const Graph &G) {$/;"	f	namespace:ogdf
isAssociationClass	ogdf/basic/GraphAttributes.h	/^	bool isAssociationClass(node v) const {$/;"	f	class:ogdf::GraphAttributes
isAtEndOfNode	graph/graphlocation.cpp	/^bool GraphLocation::isAtEndOfNode() const$/;"	f	class:GraphLocation
isAtStartOfNode	graph/graphlocation.cpp	/^bool GraphLocation::isAtStartOfNode() const$/;"	f	class:GraphLocation
isAttributeLess	ogdf/fileformats/DinoXmlParser.cpp	/^	bool XmlTagObject::isAttributeLess() const {$/;"	f	class:ogdf::XmlTagObject
isBiconnected	ogdf/basic/simple_graph_alg.cpp	/^bool isBiconnected(const Graph &G, node &cutVertex)$/;"	f	namespace:ogdf
isBiconnected	ogdf/basic/simple_graph_alg.h	/^inline bool isBiconnected(const Graph &G) {$/;"	f	namespace:ogdf
isBridge	ogdf/basic/CombinatorialEmbedding.h	/^	bool isBridge(edge e) const {$/;"	f	class:ogdf::ConstCombinatorialEmbedding
isCircular	graph/path.cpp	/^bool Path::isCircular() const$/;"	f	class:Path
isCommand	command_line/commoncommandlinefunctions.cpp	/^bool isCommand(QString text)$/;"	f
isConnected	ogdf/basic/simple_graph_alg.cpp	/^bool isConnected(const Graph &G)$/;"	f	namespace:ogdf
isDefined	ogdf/basic/HashArray.h	/^	bool isDefined(const I &i) const {$/;"	f	class:ogdf::HashArray
isDirectory	ogdf/basic/basic.cpp	/^bool isDirectory(const char *fileName)$/;"	f	namespace:ogdf
isDirectory	ogdf/basic/basic.cpp	/^bool isDirectory(const char *fname)$/;"	f	namespace:ogdf
isDrawn	graph/debruijnedge.h	/^    bool isDrawn() const {return m_drawn;}$/;"	f	class:DeBruijnEdge
isDrawn	graph/debruijnnode.h	/^    bool isDrawn() const {return m_drawn;}$/;"	f	class:DeBruijnNode
isDummy	ogdf/basic/GraphCopy.h	/^	bool isDummy(edge e) const { return (m_eOrig[e] == 0); }$/;"	f	class:ogdf::GraphCopy
isDummy	ogdf/basic/GraphCopy.h	/^	bool isDummy(edge e) const { return (m_eOrig[e] == 0); }$/;"	f	class:ogdf::GraphCopySimple
isDummy	ogdf/basic/GraphCopy.h	/^	bool isDummy(node v) const { return (m_vOrig[v] == 0); }$/;"	f	class:ogdf::GraphCopy
isDummy	ogdf/basic/GraphCopy.h	/^	bool isDummy(node v) const { return (m_vOrig[v] == 0); }$/;"	f	class:ogdf::GraphCopySimple
isEmpty	graph/path.h	/^    bool isEmpty() const {return m_nodes.empty();}$/;"	f	class:Path
isEndingNode	graph/path.cpp	/^bool Path::isEndingNode(DeBruijnNode * node) const$/;"	f	class:Path
isError	command_line/commoncommandlinefunctions.cpp	/^bool isError(QString text)$/;"	f
isFile	ogdf/basic/basic.cpp	/^bool isFile(const char *fileName)$/;"	f	namespace:ogdf
isFile	ogdf/basic/basic.cpp	/^bool isFile(const char *fname)$/;"	f	namespace:ogdf
isForest	ogdf/basic/simple_graph_alg.cpp	/^bool isForest(const Graph& G, List<node> &roots)$/;"	f	namespace:ogdf
isForest	ogdf/basic/simple_graph_alg.h	/^inline bool isForest(const Graph &G)$/;"	f	namespace:ogdf
isFreeForest	ogdf/basic/simple_graph_alg.cpp	/^bool isFreeForest(const Graph &G)$/;"	f	namespace:ogdf
isGraphHierarchical	ogdf/fileformats/OgmlParser.cpp	/^bool OgmlParser::isGraphHierarchical(const XmlTagObject *xmlTag) const$/;"	f	class:ogdf::OgmlParser
isHidden	blast/blastquery.h	/^    bool isHidden() const {return !m_shown;}$/;"	f	class:BlastQuery
isHorizontal	ogdf/basic/geometry.h	/^	bool isHorizontal() const { return (DIsEqual(dy(), 0.0)); }$/;"	f	class:ogdf::DLine
isInDepthRange	graph/debruijnnode.cpp	/^bool DeBruijnNode::isInDepthRange(double min, double max) const$/;"	f	class:DeBruijnNode
isInMiddleOfPath	graph/path.cpp	/^bool Path::isInMiddleOfPath(DeBruijnNode * node) const$/;"	f	class:Path
isIncident	ogdf/basic/Graph_d.h	/^	bool isIncident(node v) const { return v == m_src || v == m_tgt; }$/;"	f	class:ogdf::EdgeElement
isLeaf	ogdf/fileformats/DinoXmlParser.cpp	/^	bool XmlTagObject::isLeaf() const {$/;"	f	class:ogdf::XmlTagObject
isListItem	command_line/commoncommandlinefunctions.cpp	/^bool isListItem(QString text)$/;"	f
isLoopFree	ogdf/basic/simple_graph_alg.cpp	/^bool isLoopFree(const Graph &G)$/;"	f	namespace:ogdf
isMember	ogdf/basic/FaceSet.h	/^	bool isMember(face f) const {$/;"	f	class:ogdf::FaceSet
isMember	ogdf/basic/FaceSet.h	/^	bool isMember(face f) const {$/;"	f	class:ogdf::FaceSetPure
isMember	ogdf/basic/FaceSet.h	/^	bool isMember(face f) const {$/;"	f	class:ogdf::FaceSetSimple
isNegative	program/scinot.h	/^    bool isNegative() const {return m_coefficient < 0.0;}$/;"	f	class:SciNot
isNegativeEdge	graph/debruijnedge.h	/^    bool isNegativeEdge() const {return !isPositiveEdge();}$/;"	f	class:DeBruijnEdge
isNegativeNode	graph/debruijnnode.cpp	/^bool DeBruijnNode::isNegativeNode() const$/;"	f	class:DeBruijnNode
isNodeConnected	graph/debruijnnode.cpp	/^bool DeBruijnNode::isNodeConnected(DeBruijnNode * node) const$/;"	f	class:DeBruijnNode
isNodeHierarchical	ogdf/fileformats/OgmlParser.cpp	/^bool OgmlParser::isNodeHierarchical(const XmlTagObject *xmlTag) const$/;"	f	class:ogdf::OgmlParser
isNotDrawn	graph/debruijnnode.h	/^    bool isNotDrawn() const {return !m_drawn;}$/;"	f	class:DeBruijnNode
isNotOnlyPathInItsDirection	graph/debruijnnode.cpp	/^bool DeBruijnNode::isNotOnlyPathInItsDirection(DeBruijnNode * connectedNode,$/;"	f	class:DeBruijnNode
isNull	graph/graphlocation.cpp	/^bool GraphLocation::isNull() const$/;"	f	class:GraphLocation
isOnlyPathInItsDirection	graph/debruijnnode.cpp	/^bool DeBruijnNode::isOnlyPathInItsDirection(DeBruijnNode * connectedNode,$/;"	f	class:DeBruijnNode
isOption	command_line/commoncommandlinefunctions.cpp	/^bool isOption(QString text)$/;"	f
isOptionAndValuePresent	command_line/commoncommandlinefunctions.cpp	/^bool isOptionAndValuePresent(QString option, QString value, QStringList * arguments)$/;"	f
isOptionPresent	command_line/commoncommandlinefunctions.cpp	/^bool isOptionPresent(QString option, QStringList * arguments)$/;"	f
isOwnReverseComplement	graph/debruijnedge.h	/^    bool isOwnReverseComplement() const {return this == getReverseComplement();}$/;"	f	class:DeBruijnEdge
isParallelFree	ogdf/basic/simple_graph_alg.cpp	/^bool isParallelFree(const Graph &G)$/;"	f	namespace:ogdf
isParallelFreeUndirected	ogdf/basic/simple_graph_alg.cpp	/^bool isParallelFreeUndirected(const Graph &G)$/;"	f	namespace:ogdf
isPointVisible	ui/mygraphicsview.cpp	/^bool MyGraphicsView::isPointVisible(QPointF p)$/;"	f	class:MyGraphicsView
isPositive	program/scinot.h	/^    bool isPositive() const {return m_coefficient > 0.0;}$/;"	f	class:SciNot
isPositiveEdge	graph/debruijnedge.cpp	/^bool DeBruijnEdge::isPositiveEdge() const$/;"	f	class:DeBruijnEdge
isPositiveNode	graph/debruijnnode.cpp	/^bool DeBruijnNode::isPositiveNode() const$/;"	f	class:DeBruijnNode
isQueryPresent	blast/blastqueries.cpp	/^bool BlastQueries::isQueryPresent(BlastQuery * query)$/;"	f	class:BlastQueries
isReversed	ogdf/basic/GraphCopy.h	/^	bool isReversed (edge e) const {$/;"	f	class:ogdf::GraphCopy
isSectionHeader	command_line/commoncommandlinefunctions.cpp	/^bool isSectionHeader(QString text)$/;"	f
isSelfLoop	ogdf/basic/Graph_d.h	/^	bool isSelfLoop() const { return m_src == m_tgt; }$/;"	f	class:ogdf::EdgeElement
isShown	blast/blastquery.h	/^    bool isShown() const {return m_shown;}$/;"	f	class:BlastQuery
isSimple	ogdf/basic/simple_graph_alg.h	/^inline bool isSimple(const Graph &G) {$/;"	f	namespace:ogdf
isSimpleUndirected	ogdf/basic/simple_graph_alg.h	/^inline bool isSimpleUndirected(const Graph &G) {$/;"	f	namespace:ogdf
isSpecialNode	graph/debruijnnode.h	/^    bool isSpecialNode() const {return m_specialNode;}$/;"	f	class:DeBruijnNode
isStGraph	ogdf/basic/simple_graph_alg.cpp	/^bool isStGraph(const Graph &G, node &s, node &t, edge &st)$/;"	f	namespace:ogdf
isStGraph	ogdf/basic/simple_graph_alg.h	/^inline bool isStGraph(const Graph &G) {$/;"	f	namespace:ogdf
isStartingNode	graph/debruijnedge.h	/^    bool isStartingNode(DeBruijnNode * node) const {return node == m_startingNode;}$/;"	f	class:DeBruijnEdge
isStartingNode	graph/path.cpp	/^bool Path::isStartingNode(DeBruijnNode * node) const$/;"	f	class:Path
isTree	ogdf/basic/simple_graph_alg.cpp	/^bool isTree (const Graph& G, node &root)$/;"	f	namespace:ogdf
isTree	ogdf/basic/simple_graph_alg.h	/^inline bool isTree(const Graph &G) {$/;"	f	namespace:ogdf
isTriconnected	ogdf/basic/simple_graph_alg.h	/^inline bool isTriconnected(const Graph &G) {$/;"	f	namespace:ogdf
isTriconnectedPrimitive	ogdf/basic/simple_graph_alg.cpp	/^bool isTriconnectedPrimitive(const Graph &G, node &s1, node &s2)$/;"	f	namespace:ogdf
isTriconnectedPrimitive	ogdf/basic/simple_graph_alg.h	/^inline bool isTriconnectedPrimitive(const Graph &G) {$/;"	f	namespace:ogdf
isUserDisabled	ogdf/basic/Constraints.h	/^	bool isUserDisabled() { return m_UserDisabled; }$/;"	f	class:ogdf::Constraint
isValid	graph/graphlocation.cpp	/^bool GraphLocation::isValid() const$/;"	f	class:GraphLocation
isValid	ogdf/basic/Constraints.h	/^	virtual bool isValid() { return (!m_UserDisabled && (m_Status==0)); }$/;"	f	class:ogdf::Constraint
isValidPosition	ogdf/fileformats/DinoLineBuffer.cpp	/^	bool DinoLineBuffer::isValidPosition(const DinoLineBufferPosition &position) const$/;"	f	class:ogdf::DinoLineBuffer
isValidSciNotString	program/scinot.cpp	/^bool SciNot::isValidSciNotString(QString sciNotString)$/;"	f	class:SciNot
isVertical	ogdf/basic/geometry.h	/^	bool isVertical()   const { return (DIsEqual(dx(), 0.0)); }$/;"	f	class:ogdf::DLine
isZero	program/scinot.h	/^    bool isZero() const {return m_coefficient == 0.0;}$/;"	f	class:SciNot
is_deleted	ogdf/energybased/Set.cpp	/^bool Set::is_deleted(node v)$/;"	f	class:ogdf::Set
is_extra_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	bool is_extra_edge() const { return extra_edge; }$/;"	f	class:ogdf::EdgeAttributes
is_leaf	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	bool is_leaf(){if ((child_lt_ptr == NULL) &&(child_rt_ptr == NULL) &&(child_lb_ptr$/;"	f	class:ogdf::QuadTreeNodeNM
is_marked	ogdf/internal/energybased/ParticleInfo.h	/^	bool is_marked() const { return marked; }$/;"	f	class:ogdf::ParticleInfo
is_moon_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	bool is_moon_edge() const { return moon_edge; }$/;"	f	class:ogdf::EdgeAttributes
is_placed	ogdf/internal/energybased/NodeAttributes.h	/^	bool is_placed() const {return placed;}$/;"	f	class:ogdf::NodeAttributes
is_root	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	bool is_root() {if(father_ptr == NULL) return true; else return false;}$/;"	f	class:ogdf::QuadTreeNodeNM
is_tipped_over	ogdf/energybased/Rectangle.h	/^		bool is_tipped_over() const {return tipped_over;}$/;"	f	class:ogdf::Rectangle
iterator	ogdf/basic/List.h	/^	typedef ListIterator<E> iterator;$/;"	t	class:ogdf::List
iterator	ogdf/basic/List.h	/^	typedef ListIterator<E> iterator;$/;"	t	class:ogdf::ListPure
iterator	ogdf/basic/SList.h	/^	typedef SListIterator<E> iterator;$/;"	t	class:ogdf::SList
iterator	ogdf/basic/SList.h	/^	typedef SListIterator<E> iterator;$/;"	t	class:ogdf::SListPure
iterator	ogdf/energybased/PQueue.h	/^	ListIterator<PackingRowInfo> iterator;$/;"	m	class:ogdf::HelpRecord
joinFaces	ogdf/basic/CombinatorialEmbedding.cpp	/^face CombinatorialEmbedding::joinFaces(edge e)$/;"	f	class:ogdf::CombinatorialEmbedding
key	ogdf/basic/Hashing.h	/^	const K &key() const { return m_key; }$/;"	f	class:ogdf::HashElement
key	ogdf/basic/Hashing.h	/^	const K &key() const { return m_pElement->key(); }$/;"	f	class:ogdf::HashConstIterator
keyPressEvent	ui/mygraphicsview.cpp	/^void MyGraphicsView::keyPressEvent(QKeyEvent * event)$/;"	f	class:MyGraphicsView
keyPressEvent	ui/mytablewidget.cpp	/^void MyTableWidget::keyPressEvent(QKeyEvent* event)$/;"	f	class:MyTableWidget
labelEdge	ogdf/basic/GraphAttributes.h	/^	String &labelEdge(edge e) {$/;"	f	class:ogdf::GraphAttributes
labelEdge	ogdf/basic/GraphAttributes.h	/^	const String &labelEdge(edge e) const {$/;"	f	class:ogdf::GraphAttributes
labelFont	program/settings.h	/^    QFont labelFont;$/;"	m	class:Settings
labelNeighbouringNodesAsDrawn	graph/debruijnnode.cpp	/^void DeBruijnNode::labelNeighbouringNodesAsDrawn(int nodeDistance, DeBruijnNode * callingNode)$/;"	f	class:DeBruijnNode
labelNode	ogdf/basic/GraphAttributes.h	/^	String &labelNode(node v) {$/;"	f	class:ogdf::GraphAttributes
labelNode	ogdf/basic/GraphAttributes.h	/^	const String &labelNode(node v) const {$/;"	f	class:ogdf::GraphAttributes
labelPredefKey	ogdf/fileformats/GmlParser.h	/^	enum PredefinedKey { idPredefKey = 0, labelPredefKey, CreatorPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
labelPredefKey	ogdf/fileformats/XmlParser.h	/^	enum PredefinedKey { idPredefKey = 0, labelPredefKey, CreatorPredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
lambda	ogdf/internal/energybased/NodeAttributes.h	/^	List<double> lambda; \/\/the factors lambda for scaling the length of this edge$/;"	m	class:ogdf::NodeAttributes
lambda_List_ptr	ogdf/internal/energybased/NodeAttributes.h	/^	List<double>* lambda_List_ptr; \/\/a pointer to the lambda list$/;"	m	class:ogdf::NodeAttributes
last	ogdf/basic/GraphAttributes.h	/^		last, \/\/!< edge arrow at target node of the edge$/;"	e	enum:ogdf::GraphAttributes::EdgeArrow
lastAdj	ogdf/basic/Graph_d.h	/^	adjEntry lastAdj () const { return m_adjEdges.rbegin(); }$/;"	f	class:ogdf::NodeElement
lastAdj	ogdf/cluster/ClusterGraph.h	/^	ListConstIterator<adjEntry> lastAdj () const { return m_adjEntries.rbegin(); }$/;"	f	class:ogdf::ClusterElement
lastAdj	ogdf/cluster/ClusterGraph.h	/^	ListIterator<adjEntry> lastAdj () { return m_adjEntries.rbegin(); }$/;"	f	class:ogdf::ClusterElement
lastCluster	ogdf/cluster/ClusterGraph.h	/^	cluster lastCluster () const { return m_clusters.rbegin(); }$/;"	f	class:ogdf::ClusterGraph
lastEdge	ogdf/basic/Graph_d.h	/^	edge lastEdge () const { return m_edges.rbegin(); }$/;"	f	class:ogdf::Graph
lastFace	ogdf/basic/CombinatorialEmbedding.h	/^	face lastFace() const { return m_faces.rbegin(); }$/;"	f	class:ogdf::ConstCombinatorialEmbedding
lastNode	ogdf/basic/Graph_d.h	/^	node lastNode () const { return m_nodes.rbegin(); }$/;"	f	class:ogdf::Graph
last_selectable_index_of_S_node	ogdf/energybased/Set.h	/^		int last_selectable_index_of_S_node;\/\/index of the last randomly choosable element$/;"	m	class:ogdf::Set
layoutGraph	graph/assemblygraph.cpp	/^void AssemblyGraph::layoutGraph()$/;"	f	class:AssemblyGraph
layoutGraph	program/graphlayoutworker.cpp	/^void GraphLayoutWorker::layoutGraph()$/;"	f	class:GraphLayoutWorker
layoutGraph	ui/mainwindow.cpp	/^void MainWindow::layoutGraph()$/;"	f	class:MainWindow
leadsOnlyToNode	graph/debruijnedge.cpp	/^bool DeBruijnEdge::leadsOnlyToNode(bool forward,$/;"	f	class:DeBruijnEdge
leave	ogdf/basic/CriticalSection.h	/^	void leave() {$/;"	f	class:ogdf::CriticalSection
leftFace	ogdf/basic/CombinatorialEmbedding.h	/^	face leftFace(adjEntry adj) const { return m_rightFace[adj->twin()]; }$/;"	f	class:ogdf::ConstCombinatorialEmbedding
leftLine	ogdf/basic/geometry.h	/^	const DLine leftLine() const {$/;"	f	class:ogdf::DRect
leftMostCluster	ogdf/cluster/ClusterGraph.cpp	/^cluster ClusterGraph::leftMostCluster(cluster c) const$/;"	f	class:ogdf::ClusterGraph
leftToRight	ogdf/basic/geometry.h	/^	leftToRight, \/\/!< Edges are oriented from left to right.$/;"	e	enum:ogdf::Orientation
length	ogdf/basic/String.h	/^	size_t length() const { return m_length; }$/;"	f	class:ogdf::String
length	ogdf/basic/geometry.cpp	/^double DPolyline::length() const$/;"	f	class:ogdf::DPolyline
length	ogdf/basic/geometry.cpp	/^double DVector::length() const$/;"	f	class:ogdf::DVector
length	ogdf/basic/geometry.cpp	/^double IPolyline::length() const$/;"	f	class:ogdf::IPolyline
length	ogdf/basic/geometry.h	/^	double length() const {$/;"	f	class:ogdf::DLine
length	ogdf/internal/energybased/EdgeAttributes.h	/^	double length;$/;"	m	class:ogdf::EdgeAttributes
lengthDiscrepancySpinBoxChanged	ui/settingsdialog.cpp	/^void SettingsDialog::lengthDiscrepancySpinBoxChanged()$/;"	f	class:SettingsDialog
leq	ogdf/basic/comparer.h	/^	static bool leq    (const CONTENTPOINTER &x, const CONTENTPOINTER &y) { return STATICCONTENTCOMPARER::leq    (*x,*y); }$/;"	f	class:ogdf::TargetComparer
leq	ogdf/basic/comparer.h	/^	static bool leq    (const bool &x, const bool &y) { return !x ||  y; }$/;"	f	class:ogdf::StdComparer
leq	ogdf/basic/comparer.h	/^	virtual bool leq(const E &x, const E &y) const {$/;"	f	class:ogdf::VComparer
leq	ogdf/basic/comparer.h	/^    static bool leq(const E &\/*x*\/, const E &\/*y*\/) { OGDF_THROW(NoStdComparerException); }$/;"	f	class:ogdf::StdComparer
leq	ogdf/energybased/Rectangle.h	/^		bool leq(const Rectangle& A,const Rectangle & B) const$/;"	f	class:ogdf::RectangleComparerHeight
leq	ogdf/energybased/Rectangle.h	/^		bool leq(const Rectangle& A,const Rectangle & B) const$/;"	f	class:ogdf::RectangleComparerWidth
leq	ogdf/energybased/Rectangle.h	/^        bool leq(const Rectangle& A,const Rectangle & B) const$/;"	f	class:ogdf::RectangleComparerArea
less	ogdf/basic/comparer.h	/^	static bool less   (const CONTENTPOINTER &x, const CONTENTPOINTER &y) { return STATICCONTENTCOMPARER::less   (*x,*y); }$/;"	f	class:ogdf::TargetComparer
less	ogdf/basic/comparer.h	/^	static bool less   (const bool &x, const bool &y) { return !x &&  y; }$/;"	f	class:ogdf::StdComparer
less	ogdf/basic/comparer.h	/^	virtual bool less(const E &x, const E &y) const {$/;"	f	class:ogdf::VComparer
less	ogdf/basic/comparer.h	/^    static bool less(const E &\/*x*\/, const E &\/*y*\/) { OGDF_THROW(NoStdComparerException); }$/;"	f	class:ogdf::StdComparer
less	ogdf/energybased/Rectangle.h	/^		bool less(const Rectangle& A,const Rectangle & B) const$/;"	f	class:ogdf::RectangleComparerHeight
less	ogdf/energybased/Rectangle.h	/^		bool less(const Rectangle& A,const Rectangle & B) const$/;"	f	class:ogdf::RectangleComparerWidth
less	ogdf/energybased/Rectangle.h	/^        bool less(const Rectangle& A,const Rectangle & B) const$/;"	f	class:ogdf::RectangleComparerArea
level	ogdf/basic/GraphAttributes.h	/^	const int &level(node v) const {$/;"	f	class:ogdf::GraphAttributes
level	ogdf/basic/GraphAttributes.h	/^	int &level(node v) {$/;"	f	class:ogdf::GraphAttributes
line	ogdf/basic/exceptions.h	/^		int line() { return m_line; }$/;"	f	class:ogdf::Exception
linePredefKey	ogdf/fileformats/GmlParser.h	/^		linePredefKey, lineWidthPredefKey, templatePredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
lineWidthNode	ogdf/basic/GraphAttributes.h	/^	const double &lineWidthNode(node v) const {$/;"	f	class:ogdf::GraphAttributes
lineWidthNode	ogdf/basic/GraphAttributes.h	/^	double &lineWidthNode(node v) {$/;"	f	class:ogdf::GraphAttributes
lineWidthPredefKey	ogdf/fileformats/GmlParser.h	/^		linePredefKey, lineWidthPredefKey, templatePredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
linearLayout	program/settings.h	/^    bool linearLayout;$/;"	m	class:Settings
linearSearch	ogdf/basic/Array.h	/^	inline int linearSearch (const E& e) const {$/;"	f	class:ogdf::Array
linearSearch	ogdf/basic/Array.h	/^	int linearSearch(const E& e, const COMPARER &comp) const {$/;"	f	class:ogdf::Array
listIt	ogdf/basic/Constraints.h	/^	ListIterator<Constraint *> listIt;$/;"	m	class:ogdf::Constraint
lnscAbacus	ogdf/basic/exceptions.h	/^		lnscAbacus,                        \/\/!< ABACUS not supported$/;"	e	enum:ogdf::LibraryNotSupportedCode
lnscCoin	ogdf/basic/exceptions.h	/^		lnscCoin,                          \/\/!< COIN not supported$/;"	e	enum:ogdf::LibraryNotSupportedCode
lnscFunctionNotImplemented	ogdf/basic/exceptions.h	/^		lnscFunctionNotImplemented,        \/\/!< the used library doesn't support that function$/;"	e	enum:ogdf::LibraryNotSupportedCode
lnscMissingCallbackImplementation	ogdf/basic/exceptions.h	/^		lnscMissingCallbackImplementation, \/\/$/;"	e	enum:ogdf::LibraryNotSupportedCode
lnscSTOP	ogdf/basic/exceptions.h	/^		lnscSTOP                           \/\/ INSERT NEW CODES BEFORE nscSTOP!$/;"	e	enum:ogdf::LibraryNotSupportedCode
lnscUnknown	ogdf/basic/exceptions.h	/^		lnscUnknown,$/;"	e	enum:ogdf::LibraryNotSupportedCode
loadBlastQueriesFromFastaFile	blast/blastsearch.cpp	/^int BlastSearch::loadBlastQueriesFromFastaFile(QString fullFileName)$/;"	f	class:BlastSearch
loadBlastQueriesFromFastaFile	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::loadBlastQueriesFromFastaFile(QString fullFileName)$/;"	f	class:BlastSearchDialog
loadBlastQueriesFromFastaFileButtonClicked	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::loadBlastQueriesFromFastaFileButtonClicked()$/;"	f	class:BlastSearchDialog
loadCSV	graph/assemblygraph.cpp	/^bool AssemblyGraph::loadCSV(QString filename, QStringList * columns, QString * errormsg, bool * coloursLoaded)$/;"	f	class:AssemblyGraph
loadCSV	ui/mainwindow.cpp	/^void MainWindow::loadCSV(QString fullFileName)$/;"	f	class:MainWindow
loadCsvData	tests/bandagetests.cpp	/^void BandageTests::loadCsvData()$/;"	f	class:BandageTests
loadCsvDataTrinity	tests/bandagetests.cpp	/^void BandageTests::loadCsvDataTrinity()$/;"	f	class:BandageTests
loadFastg	tests/bandagetests.cpp	/^void BandageTests::loadFastg()$/;"	f	class:BandageTests
loadGraph	ui/mainwindow.cpp	/^void MainWindow::loadGraph(QString fullFileName)$/;"	f	class:MainWindow
loadGraph2	ui/mainwindow.cpp	/^void MainWindow::loadGraph2(GraphFileType graphFileType, QString fullFileName)$/;"	f	class:MainWindow
loadGraphFromFile	graph/assemblygraph.cpp	/^bool AssemblyGraph::loadGraphFromFile(QString filename)$/;"	f	class:AssemblyGraph
loadLastGraph	tests/bandagetests.cpp	/^void BandageTests::loadLastGraph()$/;"	f	class:BandageTests
loadOrSaveSettingsToOrFromWidgets	ui/settingsdialog.cpp	/^void SettingsDialog::loadOrSaveSettingsToOrFromWidgets(bool setWidgets, Settings * settings)$/;"	f	class:SettingsDialog
loadTrinity	tests/bandagetests.cpp	/^void BandageTests::loadTrinity()$/;"	f	class:BandageTests
localtime	ogdf/basic/basic.h	/^inline int localtime(struct tm *ptm, const time_t *timer)$/;"	f	namespace:ogdf
log2	ogdf/basic/Math.h	/^	static double log2(double x) {$/;"	f	class:ogdf::Math
log4	ogdf/basic/Math.h	/^	static double log4(double x) {$/;"	f	class:ogdf::Math
log_of_2	ogdf/basic/Math.cpp	/^	const double Math::log_of_2 = log(2.0);$/;"	m	class:ogdf::Math	file:
log_of_2	ogdf/basic/Math.h	/^	static const double log_of_2;$/;"	m	class:ogdf::Math
log_of_4	ogdf/basic/Math.cpp	/^	const double Math::log_of_4 = log(4.0);$/;"	m	class:ogdf::Math	file:
log_of_4	ogdf/basic/Math.h	/^	static const double log_of_4;$/;"	m	class:ogdf::Math
lookup	ogdf/basic/Hashing.h	/^	HashElement<K,I> *lookup(const K &key) const {$/;"	f	class:ogdf::Hashing
low	ogdf/basic/Array.h	/^	INDEX low() const { return m_low; }$/;"	f	class:ogdf::Array
low1	ogdf/basic/Array2D.h	/^	int low1() const { return m_a; }$/;"	f	class:ogdf::Array2D
low2	ogdf/basic/Array2D.h	/^	int low2() const { return m_c; }$/;"	f	class:ogdf::Array2D
lowDegreeExpander	ogdf/basic/Graph_d.h	/^		lowDegreeExpander,$/;"	e	enum:ogdf::Graph::NodeType
lowDepthColour	program/settings.h	/^    QColor lowDepthColour;$/;"	m	class:Settings
lowDepthValue	program/settings.h	/^    FloatSetting lowDepthValue;$/;"	m	class:Settings
m_G	ogdf/internal/energybased/MultilevelGraph.h	/^	Graph * m_G;$/;"	m	class:ogdf::MultilevelGraph
m_GA	ogdf/internal/energybased/MultilevelGraph.h	/^	GraphAttributes * m_GA; \/\/<! Keeps layout info in replacement of information below (todo: remove them)$/;"	m	class:ogdf::MultilevelGraph
m_List	ogdf/basic/Constraints.h	/^	List<Constraint *> m_List;$/;"	m	class:ogdf::GraphConstraints
m_NMParticlesInLeaves	ogdf/energybased/FMMMLayout.h	/^	int                   m_NMParticlesInLeaves; \/\/!< The maximal number of particles in a leaf.$/;"	m	class:ogdf::FMMMLayout
m_NMPrecision	ogdf/energybased/FMMMLayout.h	/^	int                   m_NMPrecision; \/\/!< The precision for multipole expansions.$/;"	m	class:ogdf::FMMMLayout
m_NMSmallCell	ogdf/energybased/FMMMLayout.h	/^	SmallestCellFinding   m_NMSmallCell; \/\/!< The option for how to calculate smallest quadtratic cells.$/;"	m	class:ogdf::FMMMLayout
m_NMTreeConstruction	ogdf/energybased/FMMMLayout.h	/^	ReducedTreeConstruction m_NMTreeConstruction; \/\/!< The option for how to construct reduced bucket quadtree.$/;"	m	class:ogdf::FMMMLayout
m_Name	ogdf/basic/Constraints.h	/^	String m_Name;$/;"	m	class:ogdf::Constraint
m_Status	ogdf/basic/Constraints.h	/^	int m_Status; \/\/ OK, Suspended, notOk$/;"	m	class:ogdf::Constraint
m_UserDisabled	ogdf/basic/Constraints.h	/^	bool m_UserDisabled;$/;"	m	class:ogdf::Constraint
m_a	ogdf/basic/Array2D.h	/^	int  m_a; \/\/!< The lowest index in dimension 1.$/;"	m	class:ogdf::Array2D
m_adjAvailable	ogdf/cluster/ClusterGraph.h	/^	bool    m_adjAvailable;		  \/\/! True if the adjacency list for each cluster is available.$/;"	m	class:ogdf::ClusterGraph
m_adjEdges	ogdf/basic/Graph_d.h	/^	GraphList<AdjElement> m_adjEdges; \/\/!< The adjacency list of the node.$/;"	m	class:ogdf::NodeElement
m_adjEntries	ogdf/cluster/ClusterGraph.h	/^	List<adjEntry>			m_adjEntries;	\/\/!< The adjacency list.$/;"	m	class:ogdf::ClusterElement
m_adjFirst	ogdf/basic/CombinatorialEmbedding.h	/^	adjEntry m_adjFirst; \/\/!< The first adjacency element in the face.$/;"	m	class:ogdf::FaceElement
m_adjSrc	ogdf/basic/Graph_d.h	/^	AdjElement *m_adjSrc; \/\/!< Corresponding adjacancy entry at source node.$/;"	m	class:ogdf::EdgeElement
m_adjTgt	ogdf/basic/Graph_d.h	/^	AdjElement *m_adjTgt; \/\/!< Corresponding adjacancy entry at target node.$/;"	m	class:ogdf::EdgeElement
m_adjustPostRepStrengthDynamically	ogdf/energybased/FMMMLayout.h	/^	bool                  m_adjustPostRepStrengthDynamically; \/\/!< The option adjustPostRepStrengthDynamically.$/;"	m	class:ogdf::FMMMLayout
m_afterEndingLocation	graph/graphicsitemedge.h	/^    QPointF m_afterEndingLocation;$/;"	m	class:GraphicsItemEdge
m_alignmentLength	blast/blasthit.h	/^    int m_alignmentLength;$/;"	m	class:BlastHit
m_allHits	blast/blastsearch.h	/^    QList< QSharedPointer<BlastHit> > m_allHits;$/;"	m	class:BlastSearch
m_allowEmptyClusters	ogdf/cluster/ClusterGraph.h	/^	bool    m_allowEmptyClusters; \/\/! Defines if empty clusters are deleted immediately if generated by operations.$/;"	m	class:ogdf::ClusterGraph
m_allowedPositions	ogdf/energybased/FMMMLayout.h	/^	AllowedPositions      m_allowedPositions; \/\/!< The option for allowed positions.$/;"	m	class:ogdf::FMMMLayout
m_alreadyShown	ui/mainwindow.h	/^    bool m_alreadyShown;$/;"	m	class:MainWindow
m_aspectRatio	program/graphlayoutworker.h	/^    double m_aspectRatio;$/;"	m	class:GraphLayoutWorker
m_attributes	ogdf/basic/GraphAttributes.h	/^	long m_attributes; \/\/!< bit vector of currently used attributes$/;"	m	class:ogdf::GraphAttributes
m_avgRadius	ogdf/internal/energybased/MultilevelGraph.h	/^	double m_avgRadius; \/\/stores average node radius for scaling and random layout purposes$/;"	m	class:ogdf::MultilevelGraph
m_b	ogdf/basic/Array2D.h	/^	int  m_b; \/\/!< The highest index in dimension 1.$/;"	m	class:ogdf::Array2D
m_backColor	ogdf/cluster/ClusterGraphAttributes.h	/^			String m_backColor;  \/\/background color$/;"	m	class:ogdf::ClusterInfo
m_beforeStartingLocation	graph/graphicsitemedge.h	/^    QPointF m_beforeStartingLocation;$/;"	m	class:GraphicsItemEdge
m_bends	ogdf/basic/GraphAttributes.h	/^	EdgeArray<DPolyline> m_bends; \/\/!< list of bend points of an edge$/;"	m	class:ogdf::GraphAttributes
m_bitScore	blast/blasthit.h	/^    double m_bitScore;$/;"	m	class:BlastHit
m_blast	blast/blastsearch.h	/^    QProcess * m_blast;$/;"	m	class:BlastSearch
m_blastHits	graph/debruijnnode.h	/^    std::vector<BlastHit *> m_blastHits;$/;"	m	class:DeBruijnNode
m_blastOutput	blast/blastsearch.h	/^    QString m_blastOutput;$/;"	m	class:BlastSearch
m_blastQueries	blast/blastsearch.h	/^    BlastQueries m_blastQueries;$/;"	m	class:BlastSearch
m_blastSearchDialog	ui/mainwindow.h	/^    BlastSearchDialog * m_blastSearchDialog;$/;"	m	class:MainWindow
m_blastSearchThread	ui/blastsearchdialog.h	/^    QThread * m_blastSearchThread;$/;"	m	class:BlastSearchDialog
m_blastnCommand	blast/runblastsearchworker.h	/^    QString m_blastnCommand;$/;"	m	class:RunBlastSearchWorker
m_blastnCommand	ui/blastsearchdialog.h	/^    QString m_blastnCommand;$/;"	m	class:BlastSearchDialog
m_buildBlastDatabaseThread	ui/blastsearchdialog.h	/^    QThread * m_buildBlastDatabaseThread;$/;"	m	class:BlastSearchDialog
m_c	ogdf/basic/Array2D.h	/^	int  m_c; \/\/!< The lowest index in dimension 2.$/;"	m	class:ogdf::Array2D
m_cStore	ogdf/fileformats/GmlParser.h	/^	char *m_rLineBuffer, *m_lineBuffer, *m_pCurrent, *m_pStore, m_cStore;$/;"	m	class:ogdf::GmlParser
m_cStore	ogdf/fileformats/XmlParser.h	/^	char *m_rLineBuffer, *m_lineBuffer, *m_pCurrent, *m_pStore, m_cStore;$/;"	m	class:ogdf::XmlParser
m_cancelBuildBlastDatabase	blast/blastsearch.h	/^    bool m_cancelBuildBlastDatabase;$/;"	m	class:BlastSearch
m_cancelMessage	ui/myprogressdialog.h	/^    QString m_cancelMessage;$/;"	m	class:MyProgressDialog
m_cancelRunBlastSearch	blast/blastsearch.h	/^    bool m_cancelRunBlastSearch;$/;"	m	class:BlastSearch
m_cancelled	ui/myprogressdialog.h	/^    bool m_cancelled;$/;"	m	class:MyProgressDialog
m_changedEdges	ogdf/internal/energybased/MultilevelGraph.h	/^	std::vector<int> m_changedEdges;$/;"	m	struct:ogdf::NodeMerge
m_changedNodes	ogdf/internal/energybased/MultilevelGraph.h	/^	std::vector<int> m_changedNodes; \/\/ there may be placement strategies that use more than one reference-node.$/;"	m	struct:ogdf::NodeMerge
m_changes	ogdf/internal/energybased/MultilevelGraph.h	/^	std::vector<NodeMerge *> m_changes;$/;"	m	class:ogdf::MultilevelGraph
m_children	ogdf/cluster/ClusterGraph.h	/^	List<ClusterElement*>	m_children;   \/\/!< The child clusters of this cluster.$/;"	m	class:ogdf::ClusterElement
m_clusterArrayTableSize	ogdf/cluster/ClusterGraph.h	/^	int		m_clusterArrayTableSize;  \/\/!< The current table size of cluster arrays.$/;"	m	class:ogdf::ClusterGraph
m_clusterID	ogdf/cluster/ClusterGraphAttributes.h	/^			int m_clusterID; \/\/the ID of the cluster of which the info is stored$/;"	m	class:ogdf::ClusterInfo
m_clusterIdCount	ogdf/cluster/ClusterGraph.h	/^	int		m_clusterIdCount;		  \/\/!< The index assigned to the next created cluster.$/;"	m	class:ogdf::ClusterGraph
m_clusterIds	ogdf/fileformats/OgmlParser.h	/^	Hashing<int, String> m_clusterIds;$/;"	m	class:ogdf::OgmlParser
m_clusterInfo	ogdf/cluster/ClusterGraphAttributes.h	/^			HashArray<int, ClusterInfo> m_clusterInfo;$/;"	m	class:ogdf::ClusterGraphAttributes
m_clusterTemplate	ogdf/cluster/ClusterGraphAttributes.h	/^			ClusterArray<String> m_clusterTemplate; \/\/!< Name of cluster template.$/;"	m	class:ogdf::ClusterGraphAttributes
m_clusters	ogdf/cluster/ClusterGraph.h	/^	GraphList<ClusterElement> m_clusters; \/\/!< The list of all clusters.$/;"	m	class:ogdf::ClusterGraph
m_clusters	ogdf/fileformats/OgmlParser.h	/^	Hashing<String, cluster> m_clusters;$/;"	m	class:ogdf::OgmlParser
m_coefficient	program/scinot.h	/^    double m_coefficient;$/;"	m	class:SciNot
m_color	ogdf/cluster/ClusterGraphAttributes.h	/^			String m_color;  \/\/color of rectangle$/;"	m	class:ogdf::ClusterInfo
m_color	ogdf/fileformats/OgmlParser.cpp	/^	String  m_color;$/;"	m	struct:ogdf::OgmlParser::OgmlNodeTemplate	file:
m_color	ogdf/fileformats/OgmlParser.cpp	/^	String m_color;$/;"	m	struct:ogdf::OgmlParser::OgmlEdgeTemplate	file:
m_colour	blast/blasthitpart.h	/^    QColor m_colour;$/;"	m	class:BlastHitPart
m_colour	blast/blastquery.h	/^    QColor m_colour;$/;"	m	class:BlastQuery
m_colour	graph/graphicsitemnode.h	/^    QColor m_colour;$/;"	m	class:GraphicsItemNode
m_colour	ui/colourbutton.h	/^    QColor m_colour;$/;"	m	class:ColourButton
m_constraintsTag	ogdf/fileformats/OgmlParser.h	/^	XmlTagObject* m_constraintsTag;$/;"	m	class:ogdf::OgmlParser
m_contiguitySearchDone	graph/assemblygraph.h	/^    bool m_contiguitySearchDone;$/;"	m	class:AssemblyGraph
m_contiguityStatus	graph/debruijnnode.h	/^    ContiguityStatus m_contiguityStatus;$/;"	m	class:DeBruijnNode
m_controlPoint1	graph/graphicsitemedge.h	/^    QPointF m_controlPoint1;$/;"	m	class:GraphicsItemEdge
m_controlPoint2	graph/graphicsitemedge.h	/^    QPointF m_controlPoint2;$/;"	m	class:GraphicsItemEdge
m_coolTemperature	ogdf/energybased/FMMMLayout.h	/^	bool                  m_coolTemperature; \/\/!< The option for how to scale forces.$/;"	m	class:ogdf::FMMMLayout
m_coolValue	ogdf/energybased/FMMMLayout.h	/^	double                m_coolValue; \/\/!< The value by which forces are decreased.$/;"	m	class:ogdf::FMMMLayout
m_count	ogdf/basic/Hashing.h	/^	int m_count;         \/\/!< The current number of elements.$/;"	m	class:ogdf::HashingBase
m_count	ogdf/basic/List.h	/^	int m_count; \/\/!< The length of the list.$/;"	m	class:ogdf::List
m_count	ogdf/basic/SList.h	/^	int m_count; \/\/!< The length of the list.$/;"	m	class:ogdf::SList
m_count	ogdf/basic/Stack.h	/^	int m_count; \/\/! The number of elements in the list.$/;"	m	class:ogdf::Stack
m_counterclock	ogdf/basic/geometry.h	/^	bool m_counterclock; \/\/!< If true points are given in conter-clockwise order.$/;"	m	class:ogdf::DPolygon
m_cpGraph	ogdf/basic/CombinatorialEmbedding.h	/^	const Graph *m_cpGraph; \/\/!< The associated graph.$/;"	m	class:ogdf::ConstCombinatorialEmbedding
m_createdGraph	ogdf/internal/energybased/MultilevelGraph.h	/^	bool m_createdGraph; \/\/used in destructor, TODO: check if it is needed$/;"	m	class:ogdf::MultilevelGraph
m_cs	ogdf/basic/CriticalSection.h	/^	CRITICAL_SECTION m_cs; \/\/!< The Windows critical section object.$/;"	m	class:ogdf::CriticalSection
m_csvData	graph/debruijnnode.h	/^    QStringList m_csvData;$/;"	m	class:DeBruijnNode
m_currentPosition	ogdf/fileformats/DinoLineBuffer.h	/^		DinoLineBufferPosition m_currentPosition;$/;"	m	class:ogdf::DinoLineBuffer
m_currentVector	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^	PoolVector *m_currentVector;$/;"	m	struct:ogdf::PoolMemoryAllocator::PoolElement	file:
m_customColour	graph/debruijnnode.h	/^    QColor m_customColour;$/;"	m	class:DeBruijnNode
m_customLabel	graph/debruijnnode.h	/^    QString m_customLabel;$/;"	m	class:DeBruijnNode
m_d	ogdf/basic/Array2D.h	/^	int  m_d; \/\/!< The highest index in dimension 2.$/;"	m	class:ogdf::Array2D
m_deBruijnEdge	graph/graphicsitemedge.h	/^    DeBruijnEdge * m_deBruijnEdge;$/;"	m	class:GraphicsItemEdge
m_deBruijnGraphEdges	graph/assemblygraph.h	/^    QMap<QPair<DeBruijnNode*, DeBruijnNode*>, DeBruijnEdge*> m_deBruijnGraphEdges;$/;"	m	class:AssemblyGraph
m_deBruijnGraphNodes	graph/assemblygraph.h	/^    QMap<QString, DeBruijnNode*> m_deBruijnGraphNodes;$/;"	m	class:AssemblyGraph
m_deBruijnGraphNodes	ui/blastsearchdialog.h	/^    QMap<long long, DeBruijnNode*> * m_deBruijnGraphNodes;$/;"	m	class:BlastSearchDialog
m_deBruijnNode	graph/graphicsitemnode.h	/^    DeBruijnNode * m_deBruijnNode;$/;"	m	class:GraphicsItemNode
m_defaultValue	ogdf/basic/HashArray.h	/^	E m_defaultValue; \/\/! The default value for elements.$/;"	m	class:ogdf::HashArray
m_deletedEdges	ogdf/internal/energybased/MultilevelGraph.h	/^	std::vector<int> m_deletedEdges;$/;"	m	struct:ogdf::NodeMerge
m_depth	graph/debruijnnode.h	/^    double m_depth;$/;"	m	class:DeBruijnNode
m_depth	ogdf/cluster/ClusterGraph.h	/^	int						m_depth;      \/\/!< The depth of this cluster in the cluster tree.$/;"	m	class:ogdf::ClusterElement
m_depth	ogdf/fileformats/DinoXmlParser.h	/^		int m_depth;$/;"	m	struct:ogdf::XmlTagObject
m_depthEffectOnWidth	ui/nodewidthvisualaid.h	/^    double m_depthEffectOnWidth;$/;"	m	class:NodeWidthVisualAid
m_depthPower	ui/nodewidthvisualaid.h	/^    double m_depthPower;$/;"	m	class:NodeWidthVisualAid
m_depthRelativeToMeanDrawnDepth	graph/debruijnnode.h	/^    double m_depthRelativeToMeanDrawnDepth;$/;"	m	class:DeBruijnNode
m_depthTag	graph/assemblygraph.h	/^    QString m_depthTag;$/;"	m	class:AssemblyGraph
m_depthUpToDate	ogdf/cluster/ClusterGraph.h	/^	mutable bool m_depthUpToDate; \/\/!< Status of cluster depth information.$/;"	m	class:ogdf::ClusterGraph
m_directed	ogdf/basic/GraphAttributes.h	/^	bool m_directed; \/\/!< whether or not the graph is directed$/;"	m	class:ogdf::GraphAttributes
m_distance	graph/querydistance.h	/^    int m_distance;$/;"	m	class:QueryDistance
m_doCheck	ogdf/fileformats/GmlParser.h	/^	bool m_doCheck;$/;"	m	class:ogdf::GmlParser
m_doCheck	ogdf/fileformats/XmlParser.h	/^	bool m_doCheck;$/;"	m	class:ogdf::XmlParser
m_double	ui/tablewidgetitemdouble.h	/^    double m_double;$/;"	m	class:TableWidgetItemDouble
m_doubleSymbol	ogdf/fileformats/GmlParser.h	/^	double m_doubleSymbol;$/;"	m	class:ogdf::GmlParser
m_doubleSymbol	ogdf/fileformats/XmlParser.h	/^	double      m_doubleSymbol; \/\/ double attribute$/;"	m	class:ogdf::XmlParser
m_doubleValue	ogdf/fileformats/GmlParser.h	/^		double m_doubleValue;$/;"	m	union:ogdf::GmlObject::__anon1
m_doubleValue	ogdf/fileformats/XmlObject.h	/^		double m_doubleValue;$/;"	m	union:ogdf::XmlObject::__anon2
m_doubleWeight	ogdf/basic/GraphAttributes.h	/^	EdgeArray<double> m_doubleWeight; \/\/!< (real number) weight of an edge$/;"	m	class:ogdf::GraphAttributes
m_doubleWeight	ogdf/internal/energybased/MultilevelGraph.h	/^	std::map<int, double> m_doubleWeight; \/\/ for changed and deleted edges$/;"	m	struct:ogdf::NodeMerge
m_down	ogdf/internal/basic/PoolMemoryAllocator.h	/^		MemElemEx *m_down;$/;"	m	struct:ogdf::PoolMemoryAllocator::MemElemEx
m_drawGraphAfterLoad	ui/mainwindow.h	/^    bool m_drawGraphAfterLoad;$/;"	m	class:MainWindow
m_drawn	graph/debruijnedge.h	/^    bool m_drawn;$/;"	m	class:DeBruijnEdge
m_drawn	graph/debruijnnode.h	/^    bool m_drawn;$/;"	m	class:DeBruijnNode
m_eCopy	ogdf/basic/GraphCopy.h	/^	EdgeArray<List<edge> > m_eCopy; \/\/!< The corresponding list of edges in the graph copy.$/;"	m	class:ogdf::GraphCopy
m_eCopy	ogdf/basic/GraphCopy.h	/^	EdgeArray<edge> m_eCopy; \/\/!< The corresponding edge in the graph copy.$/;"	m	class:ogdf::GraphCopySimple
m_eIterator	ogdf/basic/GraphCopy.h	/^	EdgeArray<ListIterator<edge> > m_eIterator; \/\/!< The position of copy edge in the list.$/;"	m	class:ogdf::GraphCopy
m_eOrig	ogdf/basic/GraphCopy.h	/^	EdgeArray<edge> m_eOrig; \/\/!< The corresponding edge in the original graph.$/;"	m	class:ogdf::GraphCopy
m_eOrig	ogdf/basic/GraphCopy.h	/^	EdgeArray<edge> m_eOrig; \/\/!< The corresponding edge in the original graph.$/;"	m	class:ogdf::GraphCopySimple
m_eType	ogdf/basic/GraphAttributes.h	/^	EdgeArray<Graph::EdgeType> m_eType; \/\/!< type of an edge (association or generalization)$/;"	m	class:ogdf::GraphAttributes
m_eValue	blast/blasthit.h	/^    SciNot m_eValue;$/;"	m	class:BlastHit
m_edge	ogdf/basic/Graph_d.h	/^	edge m_edge; \/\/!< The associated edge.$/;"	m	class:ogdf::AdjElement
m_edgeArray	graph/assemblygraph.h	/^    ogdf::EdgeArray<double> * m_edgeArray;$/;"	m	class:AssemblyGraph
m_edgeArray	program/graphlayoutworker.h	/^    ogdf::EdgeArray<double> * m_edgeArray;$/;"	m	class:GraphLayoutWorker
m_edgeArrayTableSize	ogdf/basic/Graph_d.h	/^	int m_edgeArrayTableSize; \/\/!< The current table size of edge arrays associated with this graph.$/;"	m	class:ogdf::Graph
m_edgeArrow	ogdf/basic/GraphAttributes.h	/^	EdgeArray<EdgeArrow> m_edgeArrow; \/\/!< arrow type of an edge$/;"	m	class:ogdf::GraphAttributes
m_edgeAssociations	ogdf/internal/energybased/MultilevelGraph.h	/^	EdgeArray<int> m_edgeAssociations;$/;"	m	class:ogdf::MultilevelGraph
m_edgeColor	ogdf/basic/GraphAttributes.h	/^	EdgeArray<String> m_edgeColor; \/\/!< line color of an edge$/;"	m	class:ogdf::GraphAttributes
m_edgeCount	graph/assemblygraph.h	/^    int m_edgeCount;$/;"	m	class:AssemblyGraph
m_edgeIdCount	ogdf/basic/Graph_d.h	/^	int m_edgeIdCount; \/\/!< The Index that will be assigned to the next created edge.$/;"	m	class:ogdf::Graph
m_edgeIds	ogdf/fileformats/OgmlParser.h	/^	Hashing<int, String> m_edgeIds;$/;"	m	class:ogdf::OgmlParser
m_edgeLabel	ogdf/basic/GraphAttributes.h	/^	EdgeArray<String> m_edgeLabel; \/\/!< label of an edge$/;"	m	class:ogdf::GraphAttributes
m_edgeLengthMeasurement	ogdf/energybased/FMMMLayout.h	/^	EdgeLengthMeasurement m_edgeLengthMeasurement; \/\/!< The option for edge length measurement.$/;"	m	class:ogdf::FMMMLayout
m_edgeStyle	ogdf/basic/GraphAttributes.h	/^	EdgeArray<EdgeStyle> m_edgeStyle; \/\/!< line style of an edge$/;"	m	class:ogdf::GraphAttributes
m_edgeWidth	ogdf/basic/GraphAttributes.h	/^	EdgeArray<double> m_edgeWidth; \/\/!< line width of an edge$/;"	m	class:ogdf::GraphAttributes
m_edges	graph/debruijnnode.h	/^    std::vector<DeBruijnEdge *> m_edges;$/;"	m	class:DeBruijnNode
m_edges	graph/path.h	/^    QList<DeBruijnEdge *> m_edges;$/;"	m	class:Path
m_edges	ogdf/basic/Graph_d.h	/^	GraphList<EdgeElement> m_edges; \/\/!< The list of all edges.$/;"	m	class:ogdf::Graph
m_edges	ogdf/fileformats/OgmlParser.h	/^	Hashing<String, edge> m_edges;$/;"	m	class:ogdf::OgmlParser
m_end	ogdf/basic/geometry.h	/^	DPoint m_end;   \/\/!< The end point of the line.$/;"	m	class:ogdf::DLine
m_endLocation	graph/path.h	/^    GraphLocation m_endLocation;$/;"	m	class:Path
m_endingLocation	graph/graphicsitemedge.h	/^    QPointF m_endingLocation;$/;"	m	class:GraphicsItemEdge
m_endingNode	graph/debruijnedge.h	/^    DeBruijnNode * m_endingNode;$/;"	m	class:DeBruijnEdge
m_entries	ogdf/cluster/ClusterGraph.h	/^	List<node>				m_entries;    \/\/!< The nodes in this cluster.$/;"	m	class:ogdf::ClusterElement
m_eoTag	ogdf/fileformats/XmlParser.h	/^	bool		m_eoTag;		\/\/ end of Tag recognized$/;"	m	class:ogdf::XmlParser
m_error	blast/buildblastdatabaseworker.h	/^    QString m_error;$/;"	m	class:BuildBlastDatabaseWorker
m_error	blast/runblastsearchworker.h	/^    QString m_error;$/;"	m	class:RunBlastSearchWorker
m_error	ogdf/fileformats/GmlParser.h	/^	bool m_error;$/;"	m	class:ogdf::GmlParser
m_error	ogdf/fileformats/XmlParser.h	/^	bool m_error;$/;"	m	class:ogdf::XmlParser
m_errorString	ogdf/fileformats/GmlParser.h	/^	String m_errorString;$/;"	m	class:ogdf::GmlParser
m_errorString	ogdf/fileformats/XmlParser.h	/^	String m_errorString;$/;"	m	class:ogdf::XmlParser
m_exceptionCode	ogdf/basic/exceptions.h	/^		AlgorithmFailureCode m_exceptionCode; \/\/!< The error code specifying the exception.$/;"	m	class:ogdf::AlgorithmFailureException
m_exceptionCode	ogdf/basic/exceptions.h	/^		LibraryNotSupportedCode m_exceptionCode; \/\/!< The error code specifying the exception.$/;"	m	class:ogdf::LibraryNotSupportedException
m_exceptionCode	ogdf/basic/exceptions.h	/^		PreconditionViolatedCode m_exceptionCode; \/\/!< The error code specifying the exception.$/;"	m	class:ogdf::PreconditionViolatedException
m_exponent	program/scinot.h	/^    int m_exponent;$/;"	m	class:SciNot
m_externalFace	ogdf/basic/CombinatorialEmbedding.h	/^	face m_externalFace; \/\/! The external face.$/;"	m	class:ogdf::ConstCombinatorialEmbedding
m_f	ogdf/cluster/ClusterGraphAttributes.cpp	/^	omani(ostream& (*f)(ostream&, int), int n) : m_n(n), m_f(f) { }$/;"	f	class:ogdf::omani
m_f	ogdf/cluster/ClusterGraphAttributes.cpp	/^	ostream& (*m_f)(ostream&, int);$/;"	m	class:ogdf::omani	file:
m_faceArrayTableSize	ogdf/basic/CombinatorialEmbedding.h	/^	int m_faceArrayTableSize; \/\/!< The current table size of face arrays.$/;"	m	class:ogdf::ConstCombinatorialEmbedding
m_faceIdCount	ogdf/basic/CombinatorialEmbedding.h	/^	int m_faceIdCount; \/\/!< The index assigned to the next created face.$/;"	m	class:ogdf::ConstCombinatorialEmbedding
m_faces	ogdf/basic/CombinatorialEmbedding.h	/^	GraphList<FaceElement> m_faces; \/\/!< The list of all faces.$/;"	m	class:ogdf::ConstCombinatorialEmbedding
m_faces	ogdf/basic/FaceSet.h	/^	List<face> m_faces;$/;"	m	class:ogdf::FaceSet
m_faces	ogdf/basic/FaceSet.h	/^	ListPure<face> m_faces;$/;"	m	class:ogdf::FaceSetPure
m_faces	ogdf/basic/FaceSet.h	/^	SListPure<face> m_faces;$/;"	m	class:ogdf::FaceSetSimple
m_factorX	ogdf/basic/geometry.h	/^	double m_factorX; \/\/!< The scaling factor for the x-coordinates.$/;"	m	class:ogdf::DScaler
m_factorY	ogdf/basic/geometry.h	/^	double m_factorY; \/\/!< The scaling factor for the y-coordinates.$/;"	m	class:ogdf::DScaler
m_file	ogdf/basic/exceptions.h	/^		const char *m_file; \/\/!< Source file where exception occurred.$/;"	m	class:ogdf::Exception
m_fileToLoadOnStartup	ui/mainwindow.h	/^    QString m_fileToLoadOnStartup;$/;"	m	class:MainWindow
m_filename	graph/assemblygraph.h	/^    QString m_filename;$/;"	m	class:AssemblyGraph
m_fill	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^	char m_fill[eBlockSize-sizeof(void*)];$/;"	m	struct:ogdf::PoolMemoryAllocator::BlockChain	file:
m_fillColor	ogdf/cluster/ClusterGraphAttributes.h	/^			String m_fillColor;  \/\/color of fill area$/;"	m	class:ogdf::ClusterInfo
m_fillPattern	ogdf/cluster/ClusterGraphAttributes.h	/^			GraphAttributes::BrushPattern m_fillPattern; \/\/brush pattern of fill area$/;"	m	class:ogdf::ClusterInfo
m_fineTuneScalar	ogdf/energybased/FMMMLayout.h	/^	double                m_fineTuneScalar; \/\/!< Parameter for scaling forces during fine tuning.$/;"	m	class:ogdf::FMMMLayout
m_fineTuningIterations	ogdf/energybased/FMMMLayout.h	/^	int                   m_fineTuningIterations; \/\/!< The number of iterations for fine tuning.$/;"	m	class:ogdf::FMMMLayout
m_firstQuartileDepth	graph/assemblygraph.h	/^    double m_firstQuartileDepth;$/;"	m	class:AssemblyGraph
m_fixedIterations	ogdf/energybased/FMMMLayout.h	/^	int                   m_fixedIterations; \/\/!< The fixed number of iterations for the stop criterion.$/;"	m	class:ogdf::FMMMLayout
m_fmmm	program/graphlayoutworker.h	/^    ogdf::FMMMLayout * m_fmmm;$/;"	m	class:GraphLayoutWorker
m_fmmm	ui/mainwindow.h	/^    ogdf::FMMMLayout * m_fmmm;$/;"	m	class:MainWindow
m_forceModel	ogdf/energybased/FMMMLayout.h	/^	ForceModel            m_forceModel; \/\/!< The used force model.$/;"	m	class:ogdf::FMMMLayout
m_forceScalingFactor	ogdf/energybased/FMMMLayout.h	/^	double                m_forceScalingFactor; \/\/!< The scaling factor for the forces.$/;"	m	class:ogdf::FMMMLayout
m_frGridQuotient	ogdf/energybased/FMMMLayout.h	/^	int                   m_frGridQuotient; \/\/!< The grid quotient.$/;"	m	class:ogdf::FMMMLayout
m_from	ogdf/basic/geometry.h	/^	const DRect *m_from; \/\/!< Rectangluar area in source coordinate system.$/;"	m	class:ogdf::DScaler
m_galaxyChoice	ogdf/energybased/FMMMLayout.h	/^	GalaxyChoice          m_galaxyChoice; \/\/!< The selection of galaxy nodes.$/;"	m	class:ogdf::FMMMLayout
m_gfapaths	graph/assemblygraph.h	/^	QMap<QString, QString> m_gfapaths;$/;"	m	class:AssemblyGraph
m_grabIndex	graph/graphicsitemnode.h	/^    size_t m_grabIndex;$/;"	m	class:GraphicsItemNode
m_graphAttributes	graph/assemblygraph.h	/^    ogdf::GraphAttributes * m_graphAttributes;$/;"	m	class:AssemblyGraph
m_graphAttributes	program/graphlayoutworker.h	/^    ogdf::GraphAttributes * m_graphAttributes;$/;"	m	class:GraphLayoutWorker
m_graphFileType	graph/assemblygraph.h	/^    GraphFileType m_graphFileType;$/;"	m	class:AssemblyGraph
m_graphLayoutComponentSeparation	program/graphlayoutworker.h	/^    double m_graphLayoutComponentSeparation;$/;"	m	class:GraphLayoutWorker
m_graphLayoutQuality	program/graphlayoutworker.h	/^    int m_graphLayoutQuality;$/;"	m	class:GraphLayoutWorker
m_graphObject	ogdf/fileformats/GmlParser.h	/^	GmlObject  *m_graphObject;$/;"	m	class:ogdf::GmlParser
m_graphType	ogdf/fileformats/OgmlParser.h	/^	mutable Ogml::GraphType m_graphType; \/\/!< Saves a graph type. Is set by checkGraphType.$/;"	m	class:ogdf::OgmlParser
m_graphicsItemEdge	graph/debruijnedge.h	/^    GraphicsItemEdge * m_graphicsItemEdge;$/;"	m	class:DeBruijnEdge
m_graphicsItemNode	graph/debruijnnode.h	/^    GraphicsItemNode * m_graphicsItemNode;$/;"	m	class:DeBruijnNode
m_graphicsViewZoom	ui/mainwindow.h	/^    GraphicsViewZoom * m_graphicsViewZoom;$/;"	m	class:MainWindow
m_h	ogdf/cluster/ClusterGraphAttributes.h	/^			double m_w, m_h; \/\/width and height$/;"	m	class:ogdf::ClusterInfo
m_hasArrow	graph/graphicsitemnode.h	/^    bool m_hasArrow;$/;"	m	class:GraphicsItemNode
m_hash1	ogdf/basic/tuples.h	/^	Hash1_ m_hash1;$/;"	m	class:ogdf::HashFuncTuple
m_hash2	ogdf/basic/tuples.h	/^	Hash2_ m_hash2;$/;"	m	class:ogdf::HashFuncTuple
m_hashFunc	ogdf/basic/Hashing.h	/^	H m_hashFunc; \/\/!< The hash function.$/;"	m	class:ogdf::Hashing
m_hashMask	ogdf/basic/Hashing.h	/^	int m_hashMask;      \/\/!< The current table size minus one.$/;"	m	class:ogdf::HashingBase
m_hashTable	ogdf/fileformats/DinoXmlParser.h	/^		Hashing<String,int> m_hashTable;$/;"	m	class:ogdf::DinoXmlParser
m_hashTable	ogdf/fileformats/GmlParser.h	/^	Hashing<String,int> m_hashTable; \/\/ hash table for tags$/;"	m	class:ogdf::GmlParser
m_hashTable	ogdf/fileformats/XmlParser.h	/^	Hashing<String,int> m_hashTable; \/\/ hash table for tags$/;"	m	class:ogdf::XmlParser
m_hashTableInfoIndex	ogdf/fileformats/DinoXmlParser.h	/^		int m_hashTableInfoIndex;$/;"	m	class:ogdf::DinoXmlParser
m_hashValue	ogdf/basic/Hashing.h	/^	size_t m_hashValue; \/\/!< The hash value.$/;"	m	class:ogdf::HashElementBase
m_head	ogdf/basic/Graph_d.h	/^	GraphElement *m_head; \/\/!< Pointer to the first element in the list.$/;"	m	class:ogdf::GraphListBase
m_head	ogdf/basic/List.h	/^	ListElement<E> *m_head; \/\/!< Pointer to first element.$/;"	m	class:ogdf::ListPure
m_head	ogdf/basic/SList.h	/^	SListElement<E> *m_head; \/\/!< Pointer to first element.$/;"	m	class:ogdf::SListPure
m_head	ogdf/basic/Stack.h	/^	Element *m_head;$/;"	m	class:ogdf::StackPure
m_height	ogdf/basic/GraphAttributes.h	/^	NodeArray<double> m_height; \/\/!< height of a nodes's bounding box$/;"	m	class:ogdf::GraphAttributes
m_height	ogdf/fileformats/OgmlParser.cpp	/^	double  m_height;$/;"	m	struct:ogdf::OgmlParser::OgmlNodeTemplate	file:
m_hiddenEdges	ogdf/basic/Graph_d.h	/^	GraphList<EdgeElement> m_hiddenEdges; \/\/!< The list of hidden edges.$/;"	m	class:ogdf::Graph
m_high	ogdf/basic/Array.h	/^	INDEX m_high;   \/\/!< The highest index.$/;"	m	class:ogdf::Array
m_highestDistanceInNeighbourSearch	graph/debruijnnode.h	/^    int m_highestDistanceInNeighbourSearch;$/;"	m	class:DeBruijnNode
m_hits	blast/blastquery.h	/^    QList< QSharedPointer<BlastHit> > m_hits;$/;"	m	class:BlastQuery
m_hits	blast/blastquerypath.h	/^    QList<BlastHit *> m_hits;$/;"	m	class:BlastQueryPath
m_id	ogdf/basic/CombinatorialEmbedding.h	/^	int m_id;   \/\/!< The index of the face.$/;"	m	class:ogdf::FaceElement
m_id	ogdf/basic/Graph_d.h	/^	int m_id;     \/\/!< The (unique) index of the node.$/;"	m	class:ogdf::NodeElement
m_id	ogdf/basic/Graph_d.h	/^	int m_id;    \/\/!< The (unique) index of the adjacency entry.$/;"	m	class:ogdf::AdjElement
m_id	ogdf/basic/Graph_d.h	/^	int m_id; \/\/ The (unique) index of the node.$/;"	m	class:ogdf::EdgeElement
m_id	ogdf/cluster/ClusterGraph.h	/^	int						m_id;         \/\/!< The index of this cluster.$/;"	m	class:ogdf::ClusterElement
m_id	ogdf/fileformats/OgmlParser.cpp	/^	String  m_id;$/;"	m	struct:ogdf::OgmlParser::OgmlNodeTemplate	file:
m_id	ogdf/fileformats/OgmlParser.cpp	/^	String m_id;$/;"	m	struct:ogdf::OgmlParser::OgmlEdgeTemplate	file:
m_ids	ogdf/fileformats/OgmlParser.h	/^	Hashing<String, const XmlTagObject*> m_ids; \/\/!< Saves all ids of an ogml-file.$/;"	m	class:ogdf::OgmlParser
m_imageAlign	ogdf/basic/GraphAttributes.h	/^	NodeArray<ImageAlignment> m_imageAlign;$/;"	m	class:ogdf::GraphAttributes
m_imageDrawLine	ogdf/basic/GraphAttributes.h	/^	NodeArray<bool> m_imageDrawLine;$/;"	m	class:ogdf::GraphAttributes
m_imageFilter	ui/mainwindow.h	/^    QString m_imageFilter;$/;"	m	class:MainWindow
m_imageHeight	ogdf/basic/GraphAttributes.h	/^	NodeArray<double> m_imageHeight;$/;"	m	class:ogdf::GraphAttributes
m_imageStyle	ogdf/basic/GraphAttributes.h	/^	NodeArray<ImageStyle> m_imageStyle;$/;"	m	class:ogdf::GraphAttributes
m_imageUri	ogdf/basic/GraphAttributes.h	/^	NodeArray<String> m_imageUri;$/;"	m	class:ogdf::GraphAttributes
m_imageWidth	ogdf/basic/GraphAttributes.h	/^	NodeArray<double> m_imageWidth;$/;"	m	class:ogdf::GraphAttributes
m_indeg	ogdf/basic/Graph_d.h	/^	int m_indeg;  \/\/!< The indegree of the node.$/;"	m	class:ogdf::NodeElement
m_index	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^	__int16 m_index;$/;"	m	struct:ogdf::PoolMemoryAllocator::PoolElement	file:
m_info	ogdf/basic/Hashing.h	/^	I m_info; \/\/!< The information value.$/;"	m	class:ogdf::HashElement
m_infoText	ui/infotextwidget.h	/^    QString m_infoText;$/;"	m	class:InfoTextWidget
m_initialPlacementForces	ogdf/energybased/FMMMLayout.h	/^	InitialPlacementForces m_initialPlacementForces; \/\/!< The option for how the initial placement is done.$/;"	m	class:ogdf::FMMMLayout
m_initialPlacementMult	ogdf/energybased/FMMMLayout.h	/^	InitialPlacementMult m_initialPlacementMult; \/\/!< The option for creating initial placement.$/;"	m	class:ogdf::FMMMLayout
m_inputFileLineCounter	ogdf/fileformats/DinoLineBuffer.h	/^		int m_inputFileLineCounter;$/;"	m	class:ogdf::DinoLineBuffer
m_int	ui/tablewidgetitemint.h	/^    int m_int;$/;"	m	class:TableWidgetItemInt
m_intSymbol	ogdf/fileformats/GmlParser.h	/^	int m_intSymbol;$/;"	m	class:ogdf::GmlParser
m_intSymbol	ogdf/fileformats/XmlParser.h	/^	int         m_intSymbol;    \/\/ integer attribute$/;"	m	class:ogdf::XmlParser
m_intValue	ogdf/fileformats/GmlParser.h	/^		int m_intValue;$/;"	m	union:ogdf::GmlObject::__anon1
m_intValue	ogdf/fileformats/XmlObject.h	/^		int m_intValue;$/;"	m	union:ogdf::XmlObject::__anon2
m_intWeight	ogdf/basic/GraphAttributes.h	/^	EdgeArray<int> m_intWeight; \/\/!< (integer) weight of an edge$/;"	m	class:ogdf::GraphAttributes
m_is	ogdf/fileformats/GmlParser.h	/^	istream *m_is;$/;"	m	class:ogdf::GmlParser
m_is	ogdf/fileformats/XmlParser.h	/^	istream *m_is;$/;"	m	class:ogdf::XmlParser
m_isContained	ogdf/basic/FaceSet.h	/^	FaceArray<bool> m_isContained;$/;"	m	class:ogdf::FaceSetSimple
m_it	ogdf/basic/AdjEntryArray.h	/^	ListIterator<AdjEntryArrayBase*> m_it;$/;"	m	class:ogdf::AdjEntryArrayBase
m_it	ogdf/basic/EdgeArray.h	/^	ListIterator<EdgeArrayBase*> m_it;$/;"	m	class:ogdf::EdgeArrayBase
m_it	ogdf/basic/FaceArray.h	/^	ListIterator<FaceArrayBase*> m_it;$/;"	m	class:ogdf::FaceArrayBase
m_it	ogdf/basic/FaceSet.h	/^	FaceArray<ListIterator<face> > m_it;$/;"	m	class:ogdf::FaceSet
m_it	ogdf/basic/FaceSet.h	/^	FaceArray<ListIterator<face> > m_it;$/;"	m	class:ogdf::FaceSetPure
m_it	ogdf/basic/NodeArray.h	/^	ListIterator<NodeArrayBase*> m_it;$/;"	m	class:ogdf::NodeArrayBase
m_it	ogdf/cluster/ClusterArray.h	/^	ListIterator<ClusterArrayBase*> m_it;$/;"	m	class:ogdf::ClusterArrayBase
m_it	ogdf/cluster/ClusterGraph.h	/^	ListIterator<ClusterElement*> m_it;   \/\/!< The position of this cluster within children list of its parent.$/;"	m	class:ogdf::ClusterElement
m_itCGList	ogdf/cluster/ClusterGraphObserver.h	/^	ListIterator<ClusterGraphObserver*> m_itCGList;$/;"	m	class:ogdf::ClusterGraphObserver
m_itGList	ogdf/basic/GraphObserver.h	/^	ListIterator<GraphObserver*> m_itGList; \/\/! List entry in graphs list of all registered graphobservers$/;"	m	class:ogdf::GraphObserver
m_itMap	ogdf/cluster/ClusterGraph.h	/^	NodeArray<ListIterator<node> >  m_itMap;$/;"	m	class:ogdf::ClusterGraph
m_key	ogdf/basic/Hashing.h	/^	K m_key;  \/\/!< The key value.$/;"	m	class:ogdf::HashElement
m_key	ogdf/fileformats/GmlParser.h	/^	GmlKey m_key; \/\/ tag of node$/;"	m	struct:ogdf::GmlObject
m_key	ogdf/fileformats/XmlObject.h	/^	XmlKey m_key; \/\/ tag of node$/;"	m	struct:ogdf::XmlObject
m_keyName	ogdf/fileformats/XmlParser.h	/^	char	   *m_keyName;		\/\/ Tag name$/;"	m	class:ogdf::XmlParser
m_keySymbol	ogdf/fileformats/GmlParser.h	/^	GmlKey m_keySymbol;$/;"	m	class:ogdf::GmlParser
m_keySymbol	ogdf/fileformats/XmlParser.h	/^	XmlKey		m_keySymbol;	\/\/ Tag name and Attribute Name in Hash Table$/;"	m	class:ogdf::XmlParser
m_kmer	graph/assemblygraph.h	/^    int m_kmer;$/;"	m	class:AssemblyGraph
m_label	ogdf/cluster/ClusterGraphAttributes.h	/^			String m_label;  \/\/name label$/;"	m	class:ogdf::ClusterInfo
m_layoutThread	ui/mainwindow.h	/^    QThread * m_layoutThread;$/;"	m	class:MainWindow
m_lcaNumber	ogdf/cluster/ClusterGraph.h	/^	mutable int m_lcaNumber;\/\/!< Used to save last search run number for commoncluster.$/;"	m	class:ogdf::ClusterGraph
m_lcaSearch	ogdf/cluster/ClusterGraph.h	/^	mutable ClusterArray<int>* m_lcaSearch; \/\/!< Used to save last search run number for commoncluster.$/;"	m	class:ogdf::ClusterGraph
m_lenDim2	ogdf/basic/Array2D.h	/^	int  m_lenDim2; \/\/!< The  number of elements in dimension 2.$/;"	m	class:ogdf::Array2D
m_length	graph/debruijnnode.h	/^    int m_length;$/;"	m	class:DeBruijnNode
m_length	ogdf/basic/String.h	/^	size_t m_length;  \/\/!< The length of the string (number of characters).$/;"	m	class:ogdf::String
m_level	ogdf/basic/GraphAttributes.h	/^	NodeArray<int> m_level; \/\/!< level of a node$/;"	m	class:ogdf::GraphAttributes
m_level	ogdf/internal/energybased/MultilevelGraph.h	/^	int m_level;$/;"	m	struct:ogdf::NodeMerge
m_line	ogdf/basic/exceptions.h	/^		int         m_line; \/\/!< Line number where exception occurred.$/;"	m	class:ogdf::Exception
m_line	ogdf/fileformats/DinoXmlParser.h	/^		 int m_line;$/;"	m	struct:ogdf::XmlTagObject
m_lineBuffer	ogdf/fileformats/GmlParser.h	/^	char *m_rLineBuffer, *m_lineBuffer, *m_pCurrent, *m_pStore, m_cStore;$/;"	m	class:ogdf::GmlParser
m_lineBuffer	ogdf/fileformats/XmlParser.h	/^	char *m_rLineBuffer, *m_lineBuffer, *m_pCurrent, *m_pStore, m_cStore;$/;"	m	class:ogdf::XmlParser
m_lineColor	ogdf/fileformats/OgmlParser.cpp	/^	String  m_lineColor;$/;"	m	struct:ogdf::OgmlParser::OgmlNodeTemplate	file:
m_lineNumber	ogdf/fileformats/DinoLineBuffer.h	/^		int m_lineNumber;$/;"	m	class:ogdf::DinoLineBufferPosition
m_linePoints	graph/graphicsitemnode.h	/^    std::vector<QPointF> m_linePoints;$/;"	m	class:GraphicsItemNode
m_linePosition	ogdf/fileformats/DinoLineBuffer.h	/^		int m_linePosition;$/;"	m	class:ogdf::DinoLineBufferPosition
m_lineStyle	ogdf/cluster/ClusterGraphAttributes.h	/^			GraphAttributes::EdgeStyle m_lineStyle;  \/\/rectangle line style$/;"	m	class:ogdf::ClusterInfo
m_lineType	ogdf/fileformats/OgmlParser.cpp	/^	GraphAttributes::EdgeStyle m_lineType;$/;"	m	struct:ogdf::OgmlParser::OgmlEdgeTemplate	file:
m_lineType	ogdf/fileformats/OgmlParser.cpp	/^	GraphAttributes::EdgeStyle m_lineType;$/;"	m	struct:ogdf::OgmlParser::OgmlNodeTemplate	file:
m_lineUpdateCount	ogdf/fileformats/DinoLineBuffer.h	/^		int m_lineUpdateCount;$/;"	m	class:ogdf::DinoLineBufferPosition
m_lineUpdateCountArray	ogdf/fileformats/DinoLineBuffer.h	/^		int *m_lineUpdateCountArray;$/;"	m	class:ogdf::DinoLineBuffer
m_lineWidth	ogdf/cluster/ClusterGraphAttributes.h	/^			double m_lineWidth; \/\/width of rectangle border line$/;"	m	class:ogdf::ClusterInfo
m_lineWidth	ogdf/fileformats/OgmlParser.cpp	/^	double  m_lineWidth;$/;"	m	struct:ogdf::OgmlParser::OgmlNodeTemplate	file:
m_lineWidth	ogdf/fileformats/OgmlParser.cpp	/^	double m_lineWidth;$/;"	m	struct:ogdf::OgmlParser::OgmlEdgeTemplate	file:
m_linearLayout	program/graphlayoutworker.h	/^    bool m_linearLayout;$/;"	m	class:GraphLayoutWorker
m_longString	ogdf/fileformats/GmlParser.h	/^	String m_longString;$/;"	m	class:ogdf::GmlParser
m_longString	ogdf/fileformats/XmlParser.h	/^	String		m_longString;$/;"	m	class:ogdf::XmlParser
m_longestContig	graph/assemblygraph.h	/^    long long m_longestContig;$/;"	m	class:AssemblyGraph
m_low	ogdf/basic/Array.h	/^	INDEX m_low;    \/\/!< The lowest index.$/;"	m	class:ogdf::Array
m_makeblastdb	blast/blastsearch.h	/^    QProcess * m_makeblastdb;$/;"	m	class:BlastSearch
m_makeblastdbCommand	blast/buildblastdatabaseworker.h	/^    QString m_makeblastdbCommand;$/;"	m	class:BuildBlastDatabaseWorker
m_makeblastdbCommand	ui/blastsearchdialog.h	/^    QString m_makeblastdbCommand;$/;"	m	class:BlastSearchDialog
m_mapToNode	ogdf/fileformats/GmlParser.h	/^	Array<node> m_mapToNode;$/;"	m	class:ogdf::GmlParser
m_maxIntPosExponent	ogdf/energybased/FMMMLayout.h	/^	int                   m_maxIntPosExponent; \/\/!< The option for the used	exponent.$/;"	m	class:ogdf::FMMMLayout
m_maxIterChange	ogdf/energybased/FMMMLayout.h	/^	MaxIterChange         m_maxIterChange; \/\/!< The option for how to change MaxIterations.$/;"	m	class:ogdf::FMMMLayout
m_maxIterFactor	ogdf/energybased/FMMMLayout.h	/^	int                   m_maxIterFactor; \/\/!< The factor used for decreasing MaxIterations.$/;"	m	class:ogdf::FMMMLayout
m_meanDepth	graph/assemblygraph.h	/^    double m_meanDepth;$/;"	m	class:AssemblyGraph
m_medianDepth	graph/assemblygraph.h	/^    double m_medianDepth;$/;"	m	class:AssemblyGraph
m_mergedNode	ogdf/internal/energybased/MultilevelGraph.h	/^	int m_mergedNode;$/;"	m	struct:ogdf::NodeMerge
m_minDistCC	ogdf/energybased/FMMMLayout.h	/^	double                m_minDistCC; \/\/!< The separation between connected components.$/;"	m	class:ogdf::FMMMLayout
m_minGraphSize	ogdf/energybased/FMMMLayout.h	/^	int                   m_minGraphSize; \/\/!< The option for minimal graph size.$/;"	m	class:ogdf::FMMMLayout
m_minTableSize	ogdf/basic/Hashing.h	/^	int m_minTableSize;  \/\/!< The minimal table size.$/;"	m	class:ogdf::HashingBase
m_modifiers	ui/graphicsviewzoom.h	/^    Qt::KeyboardModifiers m_modifiers;$/;"	m	class:GraphicsViewZoom
m_n	ogdf/cluster/ClusterGraphAttributes.cpp	/^	int m_n;$/;"	m	class:ogdf::omani	file:
m_nClusters	ogdf/cluster/ClusterGraph.h	/^	int		m_nClusters;			  \/\/!< The number of clusters.$/;"	m	class:ogdf::ClusterGraph
m_nEdges	ogdf/basic/Graph_d.h	/^	int m_nEdges; \/\/!< The number of edges in the graph.$/;"	m	class:ogdf::Graph
m_nFaces	ogdf/basic/CombinatorialEmbedding.h	/^	int m_nFaces; \/\/!< The number of faces.$/;"	m	class:ogdf::ConstCombinatorialEmbedding
m_nNodes	ogdf/basic/Graph_d.h	/^	int m_nNodes; \/\/!< The number of nodes in the graph.$/;"	m	class:ogdf::Graph
m_name	blast/blastquery.h	/^    QString m_name;$/;"	m	class:BlastQuery
m_name	graph/debruijnnode.h	/^    QString m_name;$/;"	m	class:DeBruijnNode
m_name	ui/colourbutton.h	/^    QString m_name;$/;"	m	class:ColourButton
m_newInitialPlacement	ogdf/energybased/FMMMLayout.h	/^	bool                  m_newInitialPlacement; \/\/!< The option for new initial placement.$/;"	m	class:ogdf::FMMMLayout
m_next	ogdf/basic/Graph_d.h	/^	GraphElement *m_next; \/\/!< The successor in the list.$/;"	m	class:ogdf::GraphElement
m_next	ogdf/basic/Hashing.h	/^	HashElementBase *m_next; \/\/!< The successor in the list.$/;"	m	class:ogdf::HashElementBase
m_next	ogdf/basic/List.h	/^	ListElement<E> *m_next; \/\/!< Pointer to successor element.$/;"	m	class:ogdf::ListElement
m_next	ogdf/basic/SList.h	/^	SListElement<E> *m_next; \/\/!< Pointer to successor element.$/;"	m	class:ogdf::SListElement
m_next	ogdf/basic/Stack.h	/^		Element *m_next;$/;"	m	struct:ogdf::StackPure::Element
m_next	ogdf/internal/basic/MallocMemoryAllocator.h	/^	struct MemElem { MemElem *m_next; };$/;"	m	struct:ogdf::MallocMemoryAllocator::MemElem
m_next	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^	BlockChain *m_next;$/;"	m	struct:ogdf::PoolMemoryAllocator::BlockChain	file:
m_next	ogdf/internal/basic/PoolMemoryAllocator.h	/^		MemElem *m_next;$/;"	m	struct:ogdf::PoolMemoryAllocator::MemElem
m_next	ogdf/internal/basic/PoolMemoryAllocator.h	/^		MemElemEx *m_next;$/;"	m	struct:ogdf::PoolMemoryAllocator::MemElemEx
m_node	blast/blasthit.h	/^    DeBruijnNode * m_node;$/;"	m	class:BlastHit
m_node	graph/graphlocation.h	/^    DeBruijnNode * m_node;$/;"	m	class:GraphLocation
m_node	ogdf/basic/Graph_d.h	/^	node m_node; \/\/!< The node whose adjacency list contains this entry.$/;"	m	class:ogdf::AdjElement
m_nodeArrayTableSize	ogdf/basic/Graph_d.h	/^	int m_nodeArrayTableSize; \/\/!< The current table size of node arrays associated with this graph.$/;"	m	class:ogdf::Graph
m_nodeAssociations	ogdf/internal/energybased/MultilevelGraph.h	/^	NodeArray<int> m_nodeAssociations;$/;"	m	class:ogdf::MultilevelGraph
m_nodeColor	ogdf/basic/GraphAttributes.h	/^	NodeArray<String> m_nodeColor; \/\/!< color of a node$/;"	m	class:ogdf::GraphAttributes
m_nodeCount	graph/assemblygraph.h	/^    int m_nodeCount;$/;"	m	class:AssemblyGraph
m_nodeEnd	blast/blasthit.h	/^    int m_nodeEnd;$/;"	m	class:BlastHit
m_nodeEndFraction	blast/blasthit.h	/^    double m_nodeEndFraction;$/;"	m	class:BlastHit
m_nodeFractionEnd	blast/blasthitpart.h	/^    double m_nodeFractionEnd;$/;"	m	class:BlastHitPart
m_nodeFractionStart	blast/blasthitpart.h	/^    double m_nodeFractionStart;$/;"	m	class:BlastHitPart
m_nodeId	ogdf/basic/GraphAttributes.h	/^	NodeArray<int> m_nodeId; \/\/!< user ID of a node$/;"	m	class:ogdf::GraphAttributes
m_nodeIdCount	ogdf/basic/Graph_d.h	/^	int m_nodeIdCount; \/\/!< The Index that will be assigned to the next created node.$/;"	m	class:ogdf::Graph
m_nodeIds	ogdf/fileformats/OgmlParser.h	/^	Hashing<int, String> m_nodeIds;$/;"	m	class:ogdf::OgmlParser
m_nodeIntWeight	ogdf/basic/GraphAttributes.h	/^	NodeArray<int> m_nodeIntWeight; \/\/!< (integer) weight of a node$/;"	m	class:ogdf::GraphAttributes
m_nodeLabel	ogdf/basic/GraphAttributes.h	/^	NodeArray<String> m_nodeLabel; \/\/!< label of a node$/;"	m	class:ogdf::GraphAttributes
m_nodeLine	ogdf/basic/GraphAttributes.h	/^	NodeArray<String> m_nodeLine; \/\/!< line color of a node$/;"	m	class:ogdf::GraphAttributes
m_nodeLineWidth	ogdf/basic/GraphAttributes.h	/^	NodeArray<double> m_nodeLineWidth; \/\/!< line width of a node$/;"	m	class:ogdf::GraphAttributes
m_nodeMap	ogdf/cluster/ClusterGraph.h	/^	NodeArray<cluster> m_nodeMap; \/\/!< Stores the cluster of each node.$/;"	m	class:ogdf::ClusterGraph
m_nodePattern	ogdf/basic/GraphAttributes.h	/^	NodeArray<BrushPattern> m_nodePattern; \/\/!< brush pattern of a node$/;"	m	class:ogdf::GraphAttributes
m_nodeShape	ogdf/basic/GraphAttributes.h	/^	NodeArray<int> m_nodeShape; \/\/!< shape of a node$/;"	m	class:ogdf::GraphAttributes
m_nodeStart	blast/blasthit.h	/^    int m_nodeStart;$/;"	m	class:BlastHit
m_nodeStartFraction	blast/blasthit.h	/^    double m_nodeStartFraction;$/;"	m	class:BlastHit
m_nodeStyle	ogdf/basic/GraphAttributes.h	/^	NodeArray<EdgeStyle> m_nodeStyle; \/\/!< line style of a node$/;"	m	class:ogdf::GraphAttributes
m_nodeTemplate	ogdf/basic/GraphAttributes.h	/^	NodeArray<String> m_nodeTemplate; \/\/!< name of template of a node$/;"	m	class:ogdf::GraphAttributes
m_nodeTemplate	ogdf/fileformats/OgmlParser.cpp	/^	String  m_nodeTemplate;$/;"	m	struct:ogdf::OgmlParser::OgmlNodeTemplate	file:
m_nodes	graph/path.h	/^    QList<DeBruijnNode *> m_nodes;$/;"	m	class:Path
m_nodes	ogdf/basic/Graph_d.h	/^	GraphList<NodeElement> m_nodes; \/\/!< The list of all nodes.$/;"	m	class:ogdf::Graph
m_nodes	ogdf/fileformats/OgmlParser.h	/^	Hashing<String, node> m_nodes;$/;"	m	class:ogdf::OgmlParser
m_num	ogdf/fileformats/GmlParser.h	/^	int m_num;$/;"	m	class:ogdf::GmlParser
m_num	ogdf/fileformats/XmlParser.h	/^	int m_num;$/;"	m	class:ogdf::XmlParser
m_numberGapOpens	blast/blasthit.h	/^    int m_numberGapOpens;$/;"	m	class:BlastHit
m_numberMismatches	blast/blasthit.h	/^    int m_numberMismatches;$/;"	m	class:BlastHit
m_numberOfMostRecentlyReadLine	ogdf/fileformats/DinoLineBuffer.h	/^		int m_numberOfMostRecentlyReadLine;$/;"	m	class:ogdf::DinoLineBuffer
m_objectBody	ogdf/fileformats/XmlParser.h	/^	SList<char*> m_objectBody;$/;"	m	class:ogdf::XmlParser
m_objectTree	ogdf/fileformats/GmlParser.h	/^	GmlObject *m_objectTree; \/\/ root node of GML parse tree$/;"	m	class:ogdf::GmlParser
m_objectTree	ogdf/fileformats/XmlParser.h	/^	XmlObject *m_objectTree; \/\/ root node of XML parse tree$/;"	m	class:ogdf::XmlParser
m_offsetX	ogdf/basic/geometry.h	/^	double m_offsetX; \/\/!< The offset for the x-coordinates.$/;"	m	class:ogdf::DScaler
m_offsetY	ogdf/basic/geometry.h	/^	double m_offsetY; \/\/!< The offset for the y-coordinates.$/;"	m	class:ogdf::DScaler
m_ogdfGraph	graph/assemblygraph.h	/^    ogdf::Graph * m_ogdfGraph;$/;"	m	class:AssemblyGraph
m_ogdfNode	graph/debruijnnode.h	/^    OgdfNode * m_ogdfNode;$/;"	m	class:DeBruijnNode
m_ogdfNodes	graph/ogdfnode.h	/^    std::vector<ogdf::node> m_ogdfNodes;$/;"	m	class:OgdfNode
m_ogmlEdgeTemplates	ogdf/fileformats/OgmlParser.h	/^	Hashing<String, OgmlEdgeTemplate*> m_ogmlEdgeTemplates;$/;"	m	class:ogdf::OgmlParser
m_ogmlNodeTemplates	ogdf/fileformats/OgmlParser.h	/^	Hashing<String, OgmlNodeTemplate*> m_ogmlNodeTemplates;$/;"	m	class:ogdf::OgmlParser
m_oldName	ui/changenodenamedialog.h	/^    QString m_oldName;$/;"	m	class:ChangeNodeNameDialog
m_orientation	graph/querydistance.h	/^    QString m_orientation;$/;"	m	class:QueryDistance
m_outdeg	ogdf/basic/Graph_d.h	/^	int m_outdeg; \/\/!< The outdegree of the node.$/;"	m	class:ogdf::NodeElement
m_overlap	graph/debruijnedge.h	/^    int m_overlap;$/;"	m	class:DeBruijnEdge
m_overlapType	graph/debruijnedge.h	/^    EdgeOverlapType m_overlapType;$/;"	m	class:DeBruijnEdge
m_p1	ogdf/basic/geometry.h	/^	DPoint m_p1; \/\/!< The lower left point of the rectangle.$/;"	m	class:ogdf::DRect
m_p2	ogdf/basic/geometry.h	/^	DPoint m_p2; \/\/!< The upper right point of the rectangle.$/;"	m	class:ogdf::DRect
m_pAttributeName	ogdf/fileformats/DinoXmlParser.h	/^		HashedString *m_pAttributeName;$/;"	m	struct:ogdf::XmlAttributeObject
m_pAttributeValue	ogdf/fileformats/DinoXmlParser.h	/^		HashedString *m_pAttributeValue;$/;"	m	struct:ogdf::XmlAttributeObject
m_pBrother	ogdf/fileformats/DinoXmlParser.h	/^		XmlTagObject *m_pBrother;$/;"	m	struct:ogdf::XmlTagObject
m_pBrother	ogdf/fileformats/GmlParser.h	/^	GmlObject *m_pBrother; \/\/ brother of node in tree$/;"	m	struct:ogdf::GmlObject
m_pBrother	ogdf/fileformats/XmlObject.h	/^	XmlObject *m_pBrother; \/\/ brother of node in tree$/;"	m	struct:ogdf::XmlObject
m_pChar	ogdf/basic/String.h	/^	char  *m_pChar; \/\/!< Pointer to characters.$/;"	m	class:ogdf::String
m_pClusterGraph	ogdf/cluster/ClusterArray.h	/^	const ClusterGraph *m_pClusterGraph; \/\/!< The associated cluster graph.$/;"	m	class:ogdf::ClusterArrayBase
m_pClusterGraph	ogdf/cluster/ClusterGraph.h	/^	const ClusterGraph *m_pClusterGraph;$/;"	m	class:ogdf::ClusterElement
m_pClusterGraph	ogdf/cluster/ClusterGraphAttributes.h	/^			const ClusterGraph* m_pClusterGraph;\/\/!< Only points to existing graphs.$/;"	m	class:ogdf::ClusterGraphAttributes
m_pClusterGraph	ogdf/cluster/ClusterGraphObserver.h	/^	const ClusterGraph* m_pClusterGraph; \/\/underlying clustergraph$/;"	m	class:ogdf::ClusterGraphObserver
m_pCurrent	ogdf/fileformats/GmlParser.h	/^	char *m_rLineBuffer, *m_lineBuffer, *m_pCurrent, *m_pStore, m_cStore;$/;"	m	class:ogdf::GmlParser
m_pCurrent	ogdf/fileformats/XmlParser.h	/^	char *m_rLineBuffer, *m_lineBuffer, *m_pCurrent, *m_pStore, m_cStore;$/;"	m	class:ogdf::XmlParser
m_pCurrentTokenString	ogdf/fileformats/DinoXmlScanner.h	/^		char *m_pCurrentTokenString;$/;"	m	class:ogdf::DinoXmlScanner
m_pEdgeArray	ogdf/basic/EdgeArray.h	/^	const EdgeArray<int> *m_pEdgeArray; \/\/!< Pointer to edge array.$/;"	m	class:ogdf::BucketEdgeArray
m_pElement	ogdf/basic/Hashing.h	/^	HashElement<K,I> *m_pElement; \/\/!< The hash element to which the iterator points.$/;"	m	class:ogdf::HashConstIterator
m_pEmbedding	ogdf/basic/CombinatorialEmbedding.h	/^	const ConstCombinatorialEmbedding *m_pEmbedding;$/;"	m	class:ogdf::FaceElement
m_pEmbedding	ogdf/basic/FaceArray.h	/^	const ConstCombinatorialEmbedding *m_pEmbedding; \/\/!< The associated combinatorial embedding.$/;"	m	class:ogdf::FaceArrayBase
m_pFirstAttribute	ogdf/fileformats/DinoXmlParser.h	/^		XmlAttributeObject *m_pFirstAttribute;$/;"	m	struct:ogdf::XmlTagObject
m_pFirstSon	ogdf/fileformats/DinoXmlParser.h	/^		XmlTagObject *m_pFirstSon;$/;"	m	struct:ogdf::XmlTagObject
m_pFirstSon	ogdf/fileformats/GmlParser.h	/^		GmlObject *m_pFirstSon;$/;"	m	union:ogdf::GmlObject::__anon1
m_pFirstSon	ogdf/fileformats/XmlObject.h	/^		XmlObject *m_pFirstSon;$/;"	m	union:ogdf::XmlObject::__anon2
m_pGraph	ogdf/basic/AdjEntryArray.h	/^	const Graph *m_pGraph; \/\/!< The associated graph.$/;"	m	class:ogdf::AdjEntryArrayBase
m_pGraph	ogdf/basic/CombinatorialEmbedding.h	/^	Graph *m_pGraph; \/\/!< The associated graph.$/;"	m	class:ogdf::CombinatorialEmbedding
m_pGraph	ogdf/basic/Constraints.h	/^	const Graph *m_pGraph;$/;"	m	class:ogdf::Constraint
m_pGraph	ogdf/basic/Constraints.h	/^	const Graph *m_pGraph;$/;"	m	class:ogdf::GraphConstraints
m_pGraph	ogdf/basic/EdgeArray.h	/^	const Graph *m_pGraph; \/\/!< The associated graph.$/;"	m	class:ogdf::EdgeArrayBase
m_pGraph	ogdf/basic/GraphAttributes.h	/^	const Graph *m_pGraph; \/\/!< associated graph$/;"	m	class:ogdf::GraphAttributes
m_pGraph	ogdf/basic/GraphCopy.h	/^	const Graph *m_pGraph;   \/\/!< The original graph.$/;"	m	class:ogdf::GraphCopy
m_pGraph	ogdf/basic/GraphCopy.h	/^	const Graph *m_pGraph;   \/\/!< The original graph.$/;"	m	class:ogdf::GraphCopySimple
m_pGraph	ogdf/basic/GraphObserver.h	/^	const Graph* m_pGraph; \/\/! watched graph$/;"	m	class:ogdf::GraphObserver
m_pGraph	ogdf/basic/Graph_d.h	/^	const Graph *m_pGraph; \/\/!< The graph containg this node (debug only).$/;"	m	class:ogdf::NodeElement
m_pGraph	ogdf/basic/NodeArray.h	/^	const Graph *m_pGraph; \/\/!< The associated graph.$/;"	m	class:ogdf::NodeArrayBase
m_pGraph	ogdf/cluster/ClusterGraph.h	/^	const Graph *m_pGraph;			  \/\/!< The associated graph.$/;"	m	class:ogdf::ClusterGraph
m_pHashing	ogdf/basic/Hashing.h	/^	const Hashing<K,I,H> *m_pHashing; \/\/!< The associated hash table.$/;"	m	class:ogdf::HashConstIterator
m_pIs	ogdf/fileformats/DinoLineBuffer.h	/^		istream *m_pIs;$/;"	m	class:ogdf::DinoLineBuffer
m_pLinBuf	ogdf/fileformats/DinoLineBuffer.h	/^		char *m_pLinBuf;$/;"	m	class:ogdf::DinoLineBuffer
m_pLineBuffer	ogdf/fileformats/DinoXmlScanner.h	/^		DinoLineBuffer *m_pLineBuffer;$/;"	m	class:ogdf::DinoXmlScanner
m_pList	ogdf/basic/Hashing.h	/^	HashElement<K,I> **m_pList; \/\/!< The list containg the hash element.$/;"	m	class:ogdf::HashConstIterator
m_pNext	ogdf/cluster/ClusterGraph.h	/^	ClusterElement			*m_pNext;     \/\/!< The postorder successor of this cluster.$/;"	m	class:ogdf::ClusterElement
m_pNextAttribute	ogdf/fileformats/DinoXmlParser.h	/^		XmlAttributeObject *m_pNextAttribute;$/;"	m	struct:ogdf::XmlAttributeObject
m_pPrev	ogdf/cluster/ClusterGraph.h	/^	ClusterElement			*m_pPrev;     \/\/!< The postorder predecessor of this cluster.$/;"	m	class:ogdf::ClusterElement
m_pRootTag	ogdf/fileformats/DinoXmlParser.h	/^		XmlTagObject *m_pRootTag;$/;"	m	class:ogdf::DinoXmlParser
m_pScanner	ogdf/fileformats/DinoXmlParser.h	/^		DinoXmlScanner *m_pScanner;$/;"	m	class:ogdf::DinoXmlParser
m_pStart	ogdf/basic/Array.h	/^	E *m_pStart;  \/\/!< The real start of the array (address of A[m_low]).$/;"	m	class:ogdf::Array
m_pStart	ogdf/basic/Array2D.h	/^	E   *m_pStart; \/\/!< The real start of the array (address of A[low1,low2]).$/;"	m	class:ogdf::Array2D
m_pStart	ogdf/basic/BoundedStack.h	/^	E *m_pStart; \/\/!< Pointer to first element.$/;"	m	class:ogdf::BoundedStack
m_pStop	ogdf/basic/Array.h	/^	E *m_pStop;   \/\/!< Successor of last element (address of A[m_high+1]).$/;"	m	class:ogdf::Array
m_pStop	ogdf/basic/Array2D.h	/^	E   *m_pStop; \/\/!< Successor of last element (address of A[high1,high2+1]).$/;"	m	class:ogdf::Array2D
m_pStop	ogdf/basic/BoundedStack.h	/^	E *m_pStop;  \/\/!< Pointer to one past last element.$/;"	m	class:ogdf::BoundedStack
m_pStore	ogdf/fileformats/GmlParser.h	/^	char *m_rLineBuffer, *m_lineBuffer, *m_pCurrent, *m_pStore, m_cStore;$/;"	m	class:ogdf::GmlParser
m_pStore	ogdf/fileformats/XmlParser.h	/^	char *m_rLineBuffer, *m_lineBuffer, *m_pCurrent, *m_pStore, m_cStore;$/;"	m	class:ogdf::XmlParser
m_pTagName	ogdf/fileformats/DinoXmlParser.h	/^		HashedString *m_pTagName;$/;"	m	struct:ogdf::XmlTagObject
m_pTagValue	ogdf/fileformats/DinoXmlParser.h	/^		HashedString *m_pTagValue;$/;"	m	struct:ogdf::XmlTagObject
m_pTop	ogdf/basic/BoundedStack.h	/^	E *m_pTop;   \/\/!< Pointer to top element.$/;"	m	class:ogdf::BoundedStack
m_pX	ogdf/basic/List.h	/^	ListElement<E> *m_pX; \/\/ pointer to associated list element$/;"	m	class:ogdf::ListIterator
m_pX	ogdf/basic/List.h	/^	const ListElement<E> *m_pX; \/\/ pointer to list element$/;"	m	class:ogdf::ListConstIterator
m_pX	ogdf/basic/SList.h	/^	SListElement<E> *m_pX; \/\/!< Pointer to slist element.$/;"	m	class:ogdf::SListIterator
m_pX	ogdf/basic/SList.h	/^	const SListElement<E> *m_pX; \/\/!< Pointer to slist element.$/;"	m	class:ogdf::SListConstIterator
m_pageFormat	ogdf/energybased/FMMMLayout.h	/^	PageFormatType        m_pageFormat; \/\/!< The option for the page format.$/;"	m	class:ogdf::FMMMLayout
m_pageRatio	ogdf/energybased/FMMMLayout.h	/^	double                m_pageRatio; \/\/!< The desired page ratio.$/;"	m	class:ogdf::FMMMLayout
m_parameters	blast/runblastsearchworker.h	/^    QString m_parameters;$/;"	m	class:RunBlastSearchWorker
m_parent	ogdf/cluster/ClusterGraph.h	/^	ClusterElement			*m_parent;    \/\/!< The parent of this cluster.$/;"	m	class:ogdf::ClusterElement
m_path	blast/blastquerypath.h	/^    Path m_path;$/;"	m	class:BlastQueryPath
m_path	graph/debruijnedge.h	/^	QString m_path;	$/;"	m	class:DeBruijnEdge
m_path	graph/graphicsitemnode.h	/^    QPainterPath m_path;$/;"	m	class:GraphicsItemNode
m_path	graph/querydistance.h	/^    Path m_path;$/;"	m	class:QueryDistance
m_pathCount	ui/querypathspushbutton.h	/^    int m_pathCount;$/;"	m	class:QueryPathsPushButton
m_pathSequence	ui/querypathsequencecopybutton.h	/^    QByteArray m_pathSequence;$/;"	m	class:QueryPathSequenceCopyButton
m_paths	blast/blastquery.h	/^    QList<BlastQueryPath> m_paths;$/;"	m	class:BlastQuery
m_paths	graph/debruijnnode.h	/^	std::vector<QString> m_paths;$/;"	m	class:DeBruijnNode
m_pattern	ogdf/fileformats/OgmlParser.cpp	/^	GraphAttributes::BrushPattern m_pattern;$/;"	m	struct:ogdf::OgmlParser::OgmlNodeTemplate	file:
m_patternColor	ogdf/fileformats/OgmlParser.cpp	/^	String  m_patternColor;$/;"	m	struct:ogdf::OgmlParser::OgmlNodeTemplate	file:
m_percentIdentity	blast/blasthit.h	/^    double m_percentIdentity;$/;"	m	class:BlastHit
m_points	ogdf/fileformats/OgmlParser.h	/^	Hashing<String, DPoint> m_points;$/;"	m	class:ogdf::OgmlParser
m_pool	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^	MemElemPtr m_pool[ePoolVectorLength];$/;"	m	struct:ogdf::PoolMemoryAllocator::PoolVector	file:
m_position	graph/graphlocation.h	/^    int m_position;$/;"	m	class:GraphLocation
m_position	ogdf/internal/energybased/MultilevelGraph.h	/^	std::vector< std::pair<int, double> > m_position; \/\/ optional information <target, distance>. mergedNode will be placed at average of relative distances to target.$/;"	m	struct:ogdf::NodeMerge
m_postOrderStart	ogdf/cluster/ClusterGraph.h	/^	mutable cluster m_postOrderStart; \/\/!< The first cluster in postorder.$/;"	m	class:ogdf::ClusterGraph
m_postSpringStrength	ogdf/energybased/FMMMLayout.h	/^	double                m_postSpringStrength; \/\/!< The strength of springs during postprocessing.$/;"	m	class:ogdf::FMMMLayout
m_postStrengthOfRepForces	ogdf/energybased/FMMMLayout.h	/^	double                m_postStrengthOfRepForces; \/\/!< The strength of repulsive forces during postprocessing.$/;"	m	class:ogdf::FMMMLayout
m_presetColours	blast/blastqueries.h	/^    std::vector<QColor> m_presetColours;$/;"	m	class:BlastQueries
m_presortCCs	ogdf/energybased/FMMMLayout.h	/^	PreSort               m_presortCCs; \/\/!< The option for presorting connected components.$/;"	m	class:ogdf::FMMMLayout
m_prev	ogdf/basic/Graph_d.h	/^	GraphElement *m_prev; \/\/!< The predecessor in the list.$/;"	m	class:ogdf::GraphElement
m_prev	ogdf/basic/List.h	/^	ListElement<E> *m_prev; \/\/!< Pointer to predecessor element.$/;"	m	class:ogdf::ListElement
m_prev	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^	PoolVector *m_prev;$/;"	m	struct:ogdf::PoolMemoryAllocator::PoolVector	file:
m_previousPos	ui/mygraphicsview.h	/^    QPoint m_previousPos;$/;"	m	class:MyGraphicsView
m_previousZoomSpinBoxValue	ui/mainwindow.h	/^    double m_previousZoomSpinBoxValue;$/;"	m	class:MainWindow
m_qualityVersusSpeed	ogdf/energybased/FMMMLayout.h	/^	QualityVsSpeed        m_qualityVersusSpeed; \/\/!< The option for quality-vs-speed trade-off.$/;"	m	class:ogdf::FMMMLayout
m_queries	blast/blastqueries.h	/^    std::vector<BlastQuery *> m_queries;$/;"	m	class:BlastQueries
m_query	blast/blasthit.h	/^    BlastQuery * m_query;$/;"	m	class:BlastHit
m_query	blast/blastquerypath.h	/^    BlastQuery * m_query;$/;"	m	class:BlastQueryPath
m_query	ui/querypathspushbutton.h	/^    BlastQuery * m_query;$/;"	m	class:QueryPathsPushButton
m_query	ui/tablewidgetitemname.h	/^    BlastQuery * m_query;$/;"	m	class:TableWidgetItemName
m_queryEnd	blast/blasthit.h	/^    int m_queryEnd;$/;"	m	class:BlastHit
m_queryEndFraction	blast/blasthit.h	/^    double m_queryEndFraction;$/;"	m	class:BlastHit
m_queryPath	blast/blasthit.h	/^    Path m_queryPath;$/;"	m	class:BlastHit
m_queryPathsDialog	ui/blastsearchdialog.h	/^    QueryPathsDialog * m_queryPathsDialog;$/;"	m	class:BlastSearchDialog
m_queryStart	blast/blasthit.h	/^    int m_queryStart;$/;"	m	class:BlastHit
m_queryStartFraction	blast/blasthit.h	/^    double m_queryStartFraction;$/;"	m	class:BlastHit
m_rLineBuffer	ogdf/fileformats/GmlParser.h	/^	char *m_rLineBuffer, *m_lineBuffer, *m_pCurrent, *m_pStore, m_cStore;$/;"	m	class:ogdf::GmlParser
m_rLineBuffer	ogdf/fileformats/XmlParser.h	/^	char *m_rLineBuffer, *m_lineBuffer, *m_pCurrent, *m_pStore, m_cStore;$/;"	m	class:ogdf::XmlParser
m_radius	ogdf/internal/energybased/MultilevelGraph.h	/^	NodeArray<double> m_radius;$/;"	m	class:ogdf::MultilevelGraph
m_radius	ogdf/internal/energybased/MultilevelGraph.h	/^	std::map<int, double> m_radius; \/\/ for changed nodes and the merged node$/;"	m	struct:ogdf::NodeMerge
m_randSeed	ogdf/energybased/FMMMLayout.h	/^	int                   m_randSeed; \/\/!< The random seed.$/;"	m	class:ogdf::FMMMLayout
m_randomTries	ogdf/energybased/FMMMLayout.h	/^	int                   m_randomTries; \/\/!< The number of random tries.$/;"	m	class:ogdf::FMMMLayout
m_recursionDepth	ogdf/fileformats/DinoXmlParser.h	/^		int m_recursionDepth;$/;"	m	class:ogdf::DinoXmlParser
m_regAdjArrays	ogdf/basic/Graph_d.h	/^	mutable ListPure<AdjEntryArrayBase*> m_regAdjArrays;  \/\/!< The registered adjEntry arrays.$/;"	m	class:ogdf::Graph
m_regClusterArrays	ogdf/cluster/ClusterGraph.h	/^	mutable ListPure<ClusterArrayBase*> m_regClusterArrays; \/\/!< The registered cluster arrays.$/;"	m	class:ogdf::ClusterGraph
m_regEdgeArrays	ogdf/basic/Graph_d.h	/^	mutable ListPure<EdgeArrayBase*> m_regEdgeArrays; \/\/!< The registered edge arrays.$/;"	m	class:ogdf::Graph
m_regFaceArrays	ogdf/basic/CombinatorialEmbedding.h	/^	mutable ListPure<FaceArrayBase*> m_regFaceArrays; \/\/!< The registered face arrays.$/;"	m	class:ogdf::ConstCombinatorialEmbedding
m_regNodeArrays	ogdf/basic/Graph_d.h	/^	mutable ListPure<NodeArrayBase*> m_regNodeArrays; \/\/!< The registered node arrays.$/;"	m	class:ogdf::Graph
m_regObservers	ogdf/cluster/ClusterGraph.h	/^	mutable ListPure<ClusterGraphObserver*> m_regObservers; \/\/!< The registered graph observers.$/;"	m	class:ogdf::ClusterGraph
m_regStructures	ogdf/basic/Graph_d.h	/^	mutable ListPure<GraphObserver*> m_regStructures; \/\/!< The registered graph structures.$/;"	m	class:ogdf::Graph
m_repForcesStrength	ogdf/energybased/FMMMLayout.h	/^	double                m_repForcesStrength; \/\/!< The strength of repulsive forces.$/;"	m	class:ogdf::FMMMLayout
m_repulsiveForcesCalculation	ogdf/energybased/FMMMLayout.h	/^	RepulsiveForcesMethod m_repulsiveForcesCalculation; \/\/!< Option for how to calculate repulsive forces.$/;"	m	class:ogdf::FMMMLayout
m_resizeDrawing	ogdf/energybased/FMMMLayout.h	/^	bool                  m_resizeDrawing; \/\/!< The option for resizing the drawing.$/;"	m	class:ogdf::FMMMLayout
m_resizingScalar	ogdf/energybased/FMMMLayout.h	/^	double                m_resizingScalar; \/\/!< Parameter for resizing the drawing.$/;"	m	class:ogdf::FMMMLayout
m_restCount	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^	__int16 m_restCount;$/;"	m	struct:ogdf::PoolMemoryAllocator::PoolElement	file:
m_restHead	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^	MemElemPtr m_restHead;$/;"	m	struct:ogdf::PoolMemoryAllocator::PoolElement	file:
m_restTail	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^	MemElemPtr m_restTail;$/;"	m	struct:ogdf::PoolMemoryAllocator::PoolElement	file:
m_reverseComplement	graph/debruijnedge.h	/^    DeBruijnEdge * m_reverseComplement;$/;"	m	class:DeBruijnEdge
m_reverseComplement	graph/debruijnnode.h	/^    DeBruijnNode * m_reverseComplement;$/;"	m	class:DeBruijnNode
m_reverseEdgeIndex	ogdf/internal/energybased/MultilevelGraph.h	/^	std::vector<edge> m_reverseEdgeIndex;$/;"	m	class:ogdf::MultilevelGraph
m_reverseNodeIndex	ogdf/internal/energybased/MultilevelGraph.h	/^	std::vector<node> m_reverseNodeIndex;$/;"	m	class:ogdf::MultilevelGraph
m_reverseNodeMergeWeight	ogdf/internal/energybased/MultilevelGraph.h	/^	std::vector<int> m_reverseNodeMergeWeight;\/\/<! Keeps number of vertices represented by vertex with given index$/;"	m	class:ogdf::MultilevelGraph
m_rightFace	ogdf/basic/CombinatorialEmbedding.h	/^	AdjEntryArray<face> m_rightFace; \/\/!< The face to which an adjacency entry belongs.$/;"	m	class:ogdf::ConstCombinatorialEmbedding
m_rootCluster	ogdf/cluster/ClusterGraph.h	/^	cluster	m_rootCluster;			  \/\/!< The root cluster.$/;"	m	class:ogdf::ClusterGraph
m_rotation	ui/mygraphicsview.h	/^    double m_rotation;$/;"	m	class:MyGraphicsView
m_scene	ui/mainwindow.h	/^    MyGraphicsScene * m_scene;$/;"	m	class:MainWindow
m_searchedFor	blast/blastquery.h	/^    bool m_searchedFor;$/;"	m	class:BlastQuery
m_sequence	blast/blastquery.h	/^    QString m_sequence;$/;"	m	class:BlastQuery
m_sequence	graph/debruijnnode.h	/^    QByteArray m_sequence;$/;"	m	class:DeBruijnNode
m_sequenceType	blast/blastquery.h	/^    SequenceType m_sequenceType;$/;"	m	class:BlastQuery
m_sequencesLoadedFromFasta	graph/assemblygraph.h	/^    SequencesLoadedFromFasta m_sequencesLoadedFromFasta;$/;"	m	class:AssemblyGraph
m_shapeType	ogdf/fileformats/OgmlParser.cpp	/^	int     m_shapeType;$/;"	m	struct:ogdf::OgmlParser::OgmlNodeTemplate	file:
m_shortestContig	graph/assemblygraph.h	/^    long long m_shortestContig;$/;"	m	class:AssemblyGraph
m_shown	blast/blastquery.h	/^    bool m_shown;$/;"	m	class:BlastQuery
m_shown	ui/tablewidgetitemshown.h	/^    bool m_shown;$/;"	m	class:TableWidgetItemShown
m_singleLevel	ogdf/energybased/FMMMLayout.h	/^	bool  		          m_singleLevel; \/\/!< Option for pure single level.$/;"	m	class:ogdf::FMMMLayout
m_size	ogdf/basic/CombinatorialEmbedding.h	/^	int m_size; \/\/!< The size of the face.$/;"	m	class:ogdf::FaceElement
m_smallFirstColumn	ui/mytablewidget.h	/^    bool m_smallFirstColumn;$/;"	m	class:MyTableWidget
m_smallSecondColumn	ui/mytablewidget.h	/^    bool m_smallSecondColumn;$/;"	m	class:MyTableWidget
m_source	ogdf/internal/energybased/MultilevelGraph.h	/^	std::map<int, int> m_source;$/;"	m	struct:ogdf::NodeMerge
m_sourceType	ogdf/fileformats/OgmlParser.cpp	/^	int m_sourceType; \/\/ actually this is only a boolean value 0 or 1$/;"	m	struct:ogdf::OgmlParser::OgmlEdgeTemplate	file:
m_specialNode	graph/debruijnnode.h	/^	bool m_specialNode;$/;"	m	class:DeBruijnNode
m_springStrength	ogdf/energybased/FMMMLayout.h	/^	double                m_springStrength; \/\/!< The strengths of springs.$/;"	m	class:ogdf::FMMMLayout
m_src	ogdf/basic/Graph_d.h	/^	node m_src; \/\/!< The source node of the edge.$/;"	m	class:ogdf::EdgeElement
m_start	ogdf/basic/geometry.h	/^	DPoint m_start; \/\/!< The start point of the line.$/;"	m	class:ogdf::DLine
m_startLocation	graph/path.h	/^    GraphLocation m_startLocation;$/;"	m	class:Path
m_startingLocation	graph/graphicsitemedge.h	/^    QPointF m_startingLocation;$/;"	m	class:GraphicsItemEdge
m_startingNode	graph/debruijnedge.h	/^    DeBruijnNode * m_startingNode;$/;"	m	class:DeBruijnEdge
m_stepsForRotatingComponents	ogdf/energybased/FMMMLayout.h	/^	int                   m_stepsForRotatingComponents; \/\/!< The number of rotations.$/;"	m	class:ogdf::FMMMLayout
m_stopCriterion	ogdf/energybased/FMMMLayout.h	/^	StopCriterion         m_stopCriterion; \/\/!< The stop criterion.$/;"	m	class:ogdf::FMMMLayout
m_stringSymbol	ogdf/fileformats/GmlParser.h	/^	const char *m_stringSymbol;$/;"	m	class:ogdf::GmlParser
m_stringSymbol	ogdf/fileformats/XmlParser.h	/^	const char *m_stringSymbol; \/\/ string attribute$/;"	m	class:ogdf::XmlParser
m_stringValue	ogdf/fileformats/GmlParser.h	/^		const char *m_stringValue;$/;"	m	union:ogdf::GmlObject::__anon1
m_stringValue	ogdf/fileformats/XmlObject.h	/^		const char *m_stringValue;$/;"	m	union:ogdf::XmlObject::__anon2
m_subGraph	ogdf/basic/GraphAttributes.h	/^	EdgeArray<unsigned int> m_subGraph; \/\/!< is element of subgraphs given by bitvector$/;"	m	class:ogdf::GraphAttributes
m_table	ogdf/basic/Hashing.h	/^	HashElementBase **m_table; \/\/!< The hash table (an array of lists).$/;"	m	class:ogdf::HashingBase
m_tableSize	ogdf/basic/Hashing.h	/^	int m_tableSize;     \/\/!< The current table size.$/;"	m	class:ogdf::HashingBase
m_tableSizeHigh	ogdf/basic/Hashing.h	/^	int m_tableSizeHigh; \/\/!< The maximal number of elements at this table size.$/;"	m	class:ogdf::HashingBase
m_tableSizeLow	ogdf/basic/Hashing.h	/^	int m_tableSizeLow;  \/\/!< The minimal number of elements at this table size.$/;"	m	class:ogdf::HashingBase
m_tagObserver	ogdf/fileformats/DinoXmlParser.h	/^		Stack<String> m_tagObserver;$/;"	m	class:ogdf::DinoXmlParser
m_tail	ogdf/basic/Graph_d.h	/^	GraphElement *m_tail; \/\/!< Pointer to the last element in the list.$/;"	m	class:ogdf::GraphListBase
m_tail	ogdf/basic/List.h	/^	ListElement<E> *m_tail; \/\/!< Pointer to last element.$/;"	m	class:ogdf::ListPure
m_tail	ogdf/basic/SList.h	/^	SListElement<E> *m_tail; \/\/!< Pointer to last element.$/;"	m	class:ogdf::SListPure
m_target	ogdf/internal/energybased/MultilevelGraph.h	/^	std::map<int, int> m_target;$/;"	m	struct:ogdf::NodeMerge
m_targetType	ogdf/fileformats/OgmlParser.cpp	/^	int m_targetType; \/\/ actually this is only a boolean value 0 or 1$/;"	m	struct:ogdf::OgmlParser::OgmlEdgeTemplate	file:
m_tblastnCommand	blast/runblastsearchworker.h	/^    QString m_tblastnCommand;$/;"	m	class:RunBlastSearchWorker
m_tblastnCommand	ui/blastsearchdialog.h	/^    QString m_tblastnCommand;$/;"	m	class:BlastSearchDialog
m_tempDirectory	blast/blastsearch.h	/^    QString m_tempDirectory;$/;"	m	class:BlastSearch
m_tempDirectory	program/globals.cpp	/^QString m_tempDirectory;$/;"	v
m_tempNuclFile	blast/blastqueries.h	/^    QSharedPointer<QFile> m_tempNuclFile;$/;"	m	class:BlastQueries
m_tempProtFile	blast/blastqueries.h	/^    QSharedPointer<QFile> m_tempProtFile;$/;"	m	class:BlastQueries
m_tgt	ogdf/basic/Graph_d.h	/^	node m_tgt; \/\/!< The target node of the edge.$/;"	m	class:ogdf::EdgeElement
m_thirdQuartileDepth	graph/assemblygraph.h	/^    double m_thirdQuartileDepth;$/;"	m	class:AssemblyGraph
m_threshold	ogdf/energybased/FMMMLayout.h	/^	double                m_threshold; \/\/!< The threshold for the stop criterion.$/;"	m	class:ogdf::FMMMLayout
m_tipOverCCs	ogdf/energybased/FMMMLayout.h	/^	TipOver               m_tipOverCCs; \/\/!< Option for tip-over of connected components.$/;"	m	class:ogdf::FMMMLayout
m_to	ogdf/basic/geometry.h	/^	const DRect *m_to; \/\/!< Rectangluar area in target coordinate system.$/;"	m	class:ogdf::DScaler
m_totalLength	graph/assemblygraph.h	/^    long long m_totalLength;$/;"	m	class:AssemblyGraph
m_twin	ogdf/basic/Graph_d.h	/^	AdjElement *m_twin; \/\/!< The corresponding adjacency entry (same edge)$/;"	m	class:ogdf::AdjElement
m_uiState	ui/mainwindow.h	/^    UiState m_uiState;$/;"	m	class:MainWindow
m_unitEdgeLength	ogdf/energybased/FMMMLayout.h	/^	double                m_unitEdgeLength; \/\/!< The unit edge length.$/;"	m	class:ogdf::FMMMLayout
m_updateDepth	ogdf/cluster/ClusterGraph.h	/^	mutable bool m_updateDepth; \/\/!< Depth of clusters is always updated if set to true.$/;"	m	class:ogdf::ClusterGraph
m_useHighLevelOptions	ogdf/energybased/FMMMLayout.h	/^	bool                  m_useHighLevelOptions; \/\/!< The option for using high-level options.$/;"	m	class:ogdf::FMMMLayout
m_vAncestor	ogdf/cluster/ClusterGraph.h	/^	mutable ClusterArray<cluster>* m_vAncestor;\/\/!< Used to save last search run number for commoncluster.$/;"	m	class:ogdf::ClusterGraph
m_vCopy	ogdf/basic/GraphCopy.h	/^	NodeArray<node> m_vCopy; \/\/!< The corresponding node in the graph copy.$/;"	m	class:ogdf::GraphCopy
m_vCopy	ogdf/basic/GraphCopy.h	/^	NodeArray<node> m_vCopy; \/\/!< The corresponding node in the graph copy.$/;"	m	class:ogdf::GraphCopySimple
m_vOrig	ogdf/basic/GraphCopy.h	/^	NodeArray<node> m_vOrig; \/\/!< The corresponding node in the original graph.$/;"	m	class:ogdf::GraphCopy
m_vOrig	ogdf/basic/GraphCopy.h	/^	NodeArray<node> m_vOrig; \/\/!< The corresponding node in the original graph.$/;"	m	class:ogdf::GraphCopySimple
m_vType	ogdf/basic/GraphAttributes.h	/^	NodeArray<Graph::NodeType> m_vType; \/\/ type (vertex, dummy, generalizationMerger)$/;"	m	class:ogdf::GraphAttributes
m_valid	ogdf/fileformats/DinoXmlParser.h	/^		bool m_valid;$/;"	m	struct:ogdf::XmlAttributeObject
m_valid	ogdf/fileformats/DinoXmlParser.h	/^		mutable bool m_valid;$/;"	m	struct:ogdf::XmlTagObject
m_valueType	ogdf/fileformats/GmlParser.h	/^	GmlObjectType m_valueType; \/\/ type of node$/;"	m	struct:ogdf::GmlObject
m_valueType	ogdf/fileformats/XmlObject.h	/^	XmlObjectType m_valueType; \/\/ type of node$/;"	m	struct:ogdf::XmlObject
m_view	ui/graphicsviewzoom.h	/^    MyGraphicsView * m_view;$/;"	m	class:GraphicsViewZoom
m_vpStart	ogdf/basic/Array.h	/^	E *m_vpStart; \/\/!< The virtual start of the array (address of A[0]).$/;"	m	class:ogdf::Array
m_vpStart	ogdf/basic/Array2D.h	/^	E   *m_vpStart; \/\/!< The virtual start of the array (address of A[0,0]).$/;"	m	class:ogdf::Array2D
m_w	ogdf/cluster/ClusterGraphAttributes.h	/^			double m_w, m_h; \/\/width and height$/;"	m	class:ogdf::ClusterInfo
m_wAncestor	ogdf/cluster/ClusterGraph.h	/^	mutable ClusterArray<cluster>* m_wAncestor;\/\/!< Used to save last search run number for commoncluster.$/;"	m	class:ogdf::ClusterGraph
m_weight	ogdf/internal/energybased/MultilevelGraph.h	/^	EdgeArray<double> m_weight;$/;"	m	class:ogdf::MultilevelGraph
m_wgt	graph/debruijnedge.h	/^	int m_wgt; \/\/weight$/;"	m	class:DeBruijnEdge
m_width	graph/graphicsitemnode.h	/^    double m_width;$/;"	m	class:GraphicsItemNode
m_width	ogdf/basic/GraphAttributes.h	/^	NodeArray<double> m_width; \/\/!< width of a node's bounding box$/;"	m	class:ogdf::GraphAttributes
m_width	ogdf/fileformats/OgmlParser.cpp	/^	double  m_width;$/;"	m	struct:ogdf::OgmlParser::OgmlNodeTemplate	file:
m_x	ogdf/basic/AdjEntryArray.h	/^	T m_x; \/\/!< The default value for array elements.$/;"	m	class:ogdf::AdjEntryArray
m_x	ogdf/basic/EdgeArray.h	/^	T m_x; \/\/!< The default value for array elements.$/;"	m	class:ogdf::EdgeArray
m_x	ogdf/basic/FaceArray.h	/^	T m_x; \/\/!< The default value for array elements.$/;"	m	class:ogdf::FaceArray
m_x	ogdf/basic/GraphAttributes.h	/^	NodeArray<double> m_x; \/\/!< x-coordinate of a node$/;"	m	class:ogdf::GraphAttributes
m_x	ogdf/basic/List.h	/^	E m_x; \/\/!< Stores the content.$/;"	m	class:ogdf::ListElement
m_x	ogdf/basic/NodeArray.h	/^	T m_x; \/\/!< The default value for array elements.$/;"	m	class:ogdf::NodeArray
m_x	ogdf/basic/SList.h	/^	E m_x; \/\/!< Stores the content.$/;"	m	class:ogdf::SListElement
m_x	ogdf/basic/Stack.h	/^		E        m_x;$/;"	m	struct:ogdf::StackPure::Element
m_x	ogdf/basic/geometry.h	/^	NUMBER m_x; \/\/!< The x-coordinate.$/;"	m	class:ogdf::GenericPoint
m_x	ogdf/cluster/ClusterArray.h	/^	T m_x; \/\/!< The default value for array elements.$/;"	m	class:ogdf::ClusterArray
m_x	ogdf/cluster/ClusterGraphAttributes.h	/^			double m_x, m_y; \/\/position of lower left corner$/;"	m	class:ogdf::ClusterInfo
m_x1	ogdf/basic/tuples.h	/^	E1 m_x1; \/\/!< The first element.$/;"	m	class:ogdf::Tuple2
m_x1	ogdf/basic/tuples.h	/^	E1 m_x1; \/\/!< The first element.$/;"	m	class:ogdf::Tuple3
m_x1	ogdf/basic/tuples.h	/^	E1 m_x1; \/\/!< The first element.$/;"	m	class:ogdf::Tuple4
m_x2	ogdf/basic/tuples.h	/^	E2 m_x2; \/\/!< The second element.$/;"	m	class:ogdf::Tuple2
m_x2	ogdf/basic/tuples.h	/^	E2 m_x2; \/\/!< The second element.$/;"	m	class:ogdf::Tuple3
m_x2	ogdf/basic/tuples.h	/^	E2 m_x2; \/\/!< The second element.$/;"	m	class:ogdf::Tuple4
m_x3	ogdf/basic/tuples.h	/^	E3 m_x3; \/\/!< The third element.$/;"	m	class:ogdf::Tuple3
m_x3	ogdf/basic/tuples.h	/^	E3 m_x3; \/\/!< The third element.$/;"	m	class:ogdf::Tuple4
m_x4	ogdf/basic/tuples.h	/^	E4 m_x4; \/\/!< The fourth element.$/;"	m	class:ogdf::Tuple4
m_y	ogdf/basic/GraphAttributes.h	/^	NodeArray<double> m_y; \/\/!< y-coordinate pf a node$/;"	m	class:ogdf::GraphAttributes
m_y	ogdf/basic/geometry.h	/^	NUMBER m_y; \/\/!< The y-coordinate.$/;"	m	class:ogdf::GenericPoint
m_y	ogdf/cluster/ClusterGraphAttributes.h	/^			double m_x, m_y; \/\/position of lower left corner$/;"	m	class:ogdf::ClusterInfo
m_zoom	ui/mygraphicsview.h	/^    GraphicsViewZoom * m_zoom;$/;"	m	class:MyGraphicsView
m_zoomFactorBase	ui/graphicsviewzoom.h	/^    double m_zoomFactorBase;$/;"	m	class:GraphicsViewZoom
main	program/main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	test.cpp	/^int main()$/;"	f
makeAcyclic	ogdf/basic/simple_graph_alg.cpp	/^void makeAcyclic(Graph &G)$/;"	f	namespace:ogdf
makeAcyclicByReverse	ogdf/basic/simple_graph_alg.cpp	/^void makeAcyclicByReverse(Graph &G)$/;"	f	namespace:ogdf
makeAdjEntries	ogdf/cluster/ClusterGraph.h	/^	void makeAdjEntries(cluster c,LISTITERATOR start){$/;"	f	class:ogdf::ClusterGraph
makeBiconnected	ogdf/basic/simple_graph_alg.cpp	/^void makeBiconnected(Graph &G, List<edge> &added)$/;"	f	namespace:ogdf
makeBiconnected	ogdf/basic/simple_graph_alg.h	/^inline void makeBiconnected(Graph &G) {$/;"	f	namespace:ogdf
makeConnected	ogdf/basic/simple_graph_alg.cpp	/^void makeConnected(Graph &G, List<edge> &added)$/;"	f	namespace:ogdf
makeConnected	ogdf/basic/simple_graph_alg.h	/^inline void makeConnected(Graph &G) {$/;"	f	namespace:ogdf
makeFromOrderedNodes	graph/path.cpp	/^Path Path::makeFromOrderedNodes(QList<DeBruijnNode *> nodes, bool circular)$/;"	f	class:Path
makeFromString	graph/path.cpp	/^Path Path::makeFromString(QString pathString, bool circular,$/;"	f	class:Path
makeFromUnorderedNodes	graph/path.cpp	/^Path Path::makeFromUnorderedNodes(QList<DeBruijnNode *> nodes,$/;"	f	class:Path
makeFromUnorderedNodes	graph/path.cpp	/^Path Path::makeFromUnorderedNodes(std::vector<DeBruijnNode *> nodes,$/;"	f	class:Path
makeIdMap	ogdf/fileformats/XmlParser.cpp	/^bool XmlParser::makeIdMap($/;"	f	class:ogdf::XmlParser
makeLoopFree	ogdf/basic/simple_graph_alg.cpp	/^void makeLoopFree(Graph &G)$/;"	f	namespace:ogdf
makeLoopFree	ogdf/basic/simple_graph_alg.h	/^void makeLoopFree(Graph &G, NODELIST &L)$/;"	f	namespace:ogdf
makeOverlapCountVector	graph/assemblygraph.cpp	/^std::vector<int> AssemblyGraph::makeOverlapCountVector()$/;"	f	class:AssemblyGraph
makeParallelFree	ogdf/basic/simple_graph_alg.h	/^inline void makeParallelFree(Graph &G) {$/;"	f	namespace:ogdf
makeParallelFree	ogdf/basic/simple_graph_alg.h	/^void makeParallelFree(Graph &G, EDGELIST &parallelEdges)$/;"	f	namespace:ogdf
makeParallelFreeUndirected	ogdf/basic/simple_graph_alg.h	/^inline void makeParallelFreeUndirected(Graph &G) {$/;"	f	namespace:ogdf
makeParallelFreeUndirected	ogdf/basic/simple_graph_alg.h	/^void makeParallelFreeUndirected($/;"	f	namespace:ogdf
makeParallelFreeUndirected	ogdf/basic/simple_graph_alg.h	/^void makeParallelFreeUndirected(Graph &G, EDGELIST &parallelEdges)$/;"	f	namespace:ogdf
makePartialPath	graph/graphicsitemnode.cpp	/^QPainterPath GraphicsItemNode::makePartialPath(double startFraction, double endFraction)$/;"	f	class:GraphicsItemNode
makeQueryRow	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::makeQueryRow(int row)$/;"	f	class:BlastSearchDialog
makeReverseComplementNodeIfNecessary	graph/assemblygraph.cpp	/^void AssemblyGraph::makeReverseComplementNodeIfNecessary(DeBruijnNode * node)$/;"	f	class:AssemblyGraph
makeSimple	ogdf/basic/simple_graph_alg.h	/^inline void makeSimple(Graph &G) {$/;"	f	namespace:ogdf
makeSimpleUndirected	ogdf/basic/simple_graph_alg.h	/^inline void makeSimpleUndirected(Graph &G) {$/;"	f	namespace:ogdf
makeSpecialPathConnectingNodeToReverseComplement	graph/graphicsitemedge.cpp	/^void GraphicsItemEdge::makeSpecialPathConnectingNodeToReverseComplement()$/;"	f	class:GraphicsItemEdge
makeSpecialPathConnectingNodeToSelf	graph/graphicsitemedge.cpp	/^void GraphicsItemEdge::makeSpecialPathConnectingNodeToSelf()$/;"	f	class:GraphicsItemEdge
makeStringUrlSafe	ui/mainwindow.cpp	/^QByteArray MainWindow::makeStringUrlSafe(QByteArray s)$/;"	f	class:MainWindow
make_copy_and_init_Lists	ogdf/internal/energybased/NMM.cpp	/^void NMM::make_copy_and_init_Lists($/;"	f	class:ogdf::NMM
make_extra_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	void make_extra_edge() { extra_edge = true; }$/;"	f	class:ogdf::EdgeAttributes
make_initialisations	ogdf/internal/energybased/FruchtermanReingold.cpp	/^void FruchtermanReingold::make_initialisations(double bl, DPoint d_l_c, int grid_quot)$/;"	f	class:ogdf::FruchtermanReingold
make_initialisations	ogdf/internal/energybased/NMM.cpp	/^void NMM::make_initialisations($/;"	f	class:ogdf::NMM
make_initialisations_for_rep_calc_classes	ogdf/energybased/FMMMLayout.cpp	/^inline void FMMMLayout::make_initialisations_for_rep_calc_classes(Graph& G)$/;"	f	class:ogdf::FMMMLayout
make_moon_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	void make_moon_edge() { moon_edge = true; }$/;"	f	class:ogdf::EdgeAttributes
make_positions_integer	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::make_positions_integer(Graph& G, NodeArray<NodeAttributes>& A)$/;"	f	class:ogdf::FMMMLayout
make_simple_loopfree	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::make_simple_loopfree($/;"	f	class:ogdf::FMMMLayout
manualNodeLengthPerMegabase	program/settings.h	/^    FloatSetting manualNodeLengthPerMegabase;$/;"	m	class:Settings
mark	ogdf/internal/energybased/ParticleInfo.h	/^	void mark() { marked = true; }$/;"	f	class:ogdf::ParticleInfo
mark_as_normal_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	void mark_as_normal_edge() { extra_edge = false; }$/;"	f	class:ogdf::EdgeAttributes
marked	ogdf/internal/energybased/ParticleInfo.h	/^	bool marked; \/\/indicates if this ParticleInfo object is marked or not$/;"	m	class:ogdf::ParticleInfo
mass	ogdf/internal/energybased/NodeAttributes.h	/^	int mass; \/\/the mass (= number of previously collapsed nodes) of this node$/;"	m	class:ogdf::NodeAttributes
mass_of_star	ogdf/energybased/Set.h	/^		NodeArray<int> mass_of_star; \/\/the sum of the masses of a node and its neighbours$/;"	m	class:ogdf::Set
max	program/settings.h	/^    SciNot val, min, max;$/;"	m	class:SciNotSetting
max	program/settings.h	/^    double val, min, max;$/;"	m	class:FloatSetting
max	program/settings.h	/^    int val, min, max;$/;"	m	class:IntSetting
maxAdjEntryIndex	ogdf/basic/Graph_d.h	/^	int maxAdjEntryIndex() const { return (m_edgeIdCount<<1)-1; }$/;"	f	class:ogdf::Graph
maxAutoFindEdgeOverlap	program/settings.h	/^    int maxAutoFindEdgeOverlap;$/;"	m	class:Settings
maxAutomaticZoom	program/settings.h	/^    double maxAutomaticZoom;$/;"	m	class:Settings
maxClusterID	ogdf/cluster/ClusterGraphAttributes.h	/^			int maxClusterID() const { return m_pClusterGraph->clusterIdCount()-1; }$/;"	f	class:ogdf::ClusterGraphAttributes
maxClusterIndex	ogdf/cluster/ClusterGraph.h	/^	int maxClusterIndex() const { return m_clusterIdCount-1; }$/;"	f	class:ogdf::ClusterGraph
maxDepthRange	program/settings.h	/^    FloatSetting maxDepthRange;$/;"	m	class:Settings
maxEValueProduct	program/settings.h	/^    SciNotSetting maxEValueProduct;$/;"	m	class:Settings
maxEdgeIndex	ogdf/basic/Graph_d.h	/^	int maxEdgeIndex() const { return m_edgeIdCount-1; }$/;"	f	class:ogdf::Graph
maxFaceIndex	ogdf/basic/CombinatorialEmbedding.h	/^	int maxFaceIndex() const { return m_faceIdCount-1; }$/;"	f	class:ogdf::ConstCombinatorialEmbedding
maxHitsForQueryPath	program/settings.h	/^    IntSetting maxHitsForQueryPath;$/;"	m	class:Settings
maxIntPosExponent	ogdf/energybased/FMMMLayout.h	/^	int maxIntPosExponent() const { return m_maxIntPosExponent; }$/;"	f	class:ogdf::FMMMLayout
maxIntPosExponent	ogdf/energybased/FMMMLayout.h	/^	void maxIntPosExponent(int e) {$/;"	f	class:ogdf::FMMMLayout
maxIterChange	ogdf/energybased/FMMMLayout.h	/^	MaxIterChange maxIterChange() const { return m_maxIterChange; }$/;"	f	class:ogdf::FMMMLayout
maxIterChange	ogdf/energybased/FMMMLayout.h	/^	void maxIterChange(MaxIterChange mic) { m_maxIterChange = mic; }$/;"	f	class:ogdf::FMMMLayout
maxIterFactor	ogdf/energybased/FMMMLayout.h	/^	int maxIterFactor() const { return m_maxIterFactor; }$/;"	f	class:ogdf::FMMMLayout
maxIterFactor	ogdf/energybased/FMMMLayout.h	/^	void maxIterFactor(int f) { m_maxIterFactor = ((f>=1) ? f : 1 ); }$/;"	f	class:ogdf::FMMMLayout
maxLengthBaseDiscrepancy	program/settings.h	/^    IntSetting maxLengthBaseDiscrepancy;$/;"	m	class:Settings
maxLengthPercentage	program/settings.h	/^    FloatSetting maxLengthPercentage;$/;"	m	class:Settings
maxNodeIndex	ogdf/basic/Graph_d.h	/^	int maxNodeIndex() const { return m_nodeIdCount-1; }$/;"	f	class:ogdf::Graph
maxOccurs	ogdf/fileformats/OgmlParser.cpp	/^	int minOccurs, maxOccurs; \/\/ Min. occurs and max. occurs of this tag.$/;"	m	class:ogdf::OgmlParser::OgmlTag	file:
maxQueryPathNodes	program/settings.h	/^    IntSetting maxQueryPathNodes;$/;"	m	class:Settings
maxSizeInsertionSort	ogdf/basic/Array.h	/^	enum { maxSizeInsertionSort = 40 };$/;"	e	enum:ogdf::Array::__anon4
maxZoom	program/settings.h	/^    double maxZoom;$/;"	m	class:Settings
max_gridindex	ogdf/internal/energybased/FruchtermanReingold.h	/^	int max_gridindex; \/\/maximum index of a grid row\/column$/;"	m	class:ogdf::FruchtermanReingold
max_height	ogdf/energybased/PackingRowInfo.h	/^		double max_height;  \/\/the maximum height of a rectangle placed in this row$/;"	m	class:ogdf::PackingRowInfo
max_integer_position	ogdf/energybased/FMMMLayout.h	/^	double max_integer_position; \/\/!< The maximum value for an integer position.$/;"	m	class:ogdf::FMMMLayout
max_power_of_2_index	ogdf/internal/energybased/NMM.h	/^	int max_power_of_2_index;\/\/holds max. index for power_of_2 (= 30)$/;"	m	class:ogdf::NMM
max_radius	ogdf/energybased/FMMMLayout.h	/^	double max_radius(int iter) {$/;"	f	class:ogdf::FMMMLayout
maxboxindex	ogdf/internal/energybased/NMM.cpp	/^inline int NMM::maxboxindex (int level)$/;"	f	class:ogdf::NMM
maximalFace	ogdf/basic/CombinatorialEmbedding.cpp	/^face ConstCombinatorialEmbedding::maximalFace() const$/;"	f	class:ogdf::ConstCombinatorialEmbedding
maybeContiguousColour	program/settings.h	/^    QColor maybeContiguousColour;$/;"	m	class:Settings
meanNodeLength	program/settings.h	/^    double meanNodeLength;$/;"	m	class:Settings
member	ogdf/basic/Hashing.h	/^	bool member(const K &key) const { return (lookup(key) != 0); }$/;"	f	class:ogdf::Hashing
memoryAllocatedByMalloc	ogdf/basic/System.cpp	/^size_t System::memoryAllocatedByMalloc()$/;"	f	class:ogdf::System
memoryAllocatedByMemoryManager	ogdf/basic/System.cpp	/^size_t System::memoryAllocatedByMemoryManager()$/;"	f	class:ogdf::System
memoryAllocatedInBlocks	ogdf/internal/basic/MallocMemoryAllocator.h	/^	static size_t memoryAllocatedInBlocks() { return 0; }$/;"	f	class:ogdf::MallocMemoryAllocator
memoryAllocatedInBlocks	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^size_t PoolMemoryAllocator::memoryAllocatedInBlocks()$/;"	f	class:ogdf::PoolMemoryAllocator
memoryInFreelist	ogdf/internal/basic/MallocMemoryAllocator.h	/^	static size_t memoryInFreelist() { return 0; }$/;"	f	class:ogdf::MallocMemoryAllocator
memoryInFreelistOfMalloc	ogdf/basic/System.cpp	/^size_t System::memoryInFreelistOfMalloc()$/;"	f	class:ogdf::System
memoryInGlobalFreeList	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^size_t PoolMemoryAllocator::memoryInGlobalFreeList()$/;"	f	class:ogdf::PoolMemoryAllocator
memoryInGlobalFreeListOfMemoryManager	ogdf/basic/System.cpp	/^size_t System::memoryInGlobalFreeListOfMemoryManager()$/;"	f	class:ogdf::System
memoryInThreadFreeList	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^size_t PoolMemoryAllocator::memoryInThreadFreeList()$/;"	f	class:ogdf::PoolMemoryAllocator
memoryInThreadFreeListOfMemoryManager	ogdf/basic/System.cpp	/^size_t System::memoryInThreadFreeListOfMemoryManager()$/;"	f	class:ogdf::System
memoryUsedByProcess	ogdf/basic/System.cpp	/^size_t System::memoryUsedByProcess()$/;"	f	class:ogdf::System
mergeAllPossible	graph/assemblygraph.cpp	/^int AssemblyGraph::mergeAllPossible(MyGraphicsScene * scene,$/;"	f	class:AssemblyGraph
mergeAllPossible	ui/mainwindow.cpp	/^void MainWindow::mergeAllPossible()$/;"	f	class:MainWindow
mergeGraphicsNodes	graph/assemblygraph.cpp	/^void AssemblyGraph::mergeGraphicsNodes(QList<DeBruijnNode *> * originalNodes,$/;"	f	class:AssemblyGraph
mergeGraphicsNodes2	graph/assemblygraph.cpp	/^bool AssemblyGraph::mergeGraphicsNodes2(QList<DeBruijnNode *> * originalNodes,$/;"	f	class:AssemblyGraph
mergeNodes	graph/assemblygraph.cpp	/^bool AssemblyGraph::mergeNodes(QList<DeBruijnNode *> nodes, MyGraphicsScene * scene,$/;"	f	class:AssemblyGraph
mergeNodesOnGfa	tests/bandagetests.cpp	/^void BandageTests::mergeNodesOnGfa()$/;"	f	class:BandageTests
mergeSelectedNodes	ui/mainwindow.cpp	/^void MainWindow::mergeSelectedNodes()$/;"	f	class:MainWindow
mergeWeight	ogdf/internal/energybased/MultilevelGraph.h	/^	int mergeWeight(node v) {return m_reverseNodeMergeWeight[v->index()];}$/;"	f	class:ogdf::MultilevelGraph
micConstant	ogdf/energybased/FMMMLayout.h	/^		micConstant,$/;"	e	enum:ogdf::FMMMLayout::MaxIterChange
micLinearlyDecreasing	ogdf/energybased/FMMMLayout.h	/^		micLinearlyDecreasing,$/;"	e	enum:ogdf::FMMMLayout::MaxIterChange
micRapidlyDecreasing	ogdf/energybased/FMMMLayout.h	/^		micRapidlyDecreasing$/;"	e	enum:ogdf::FMMMLayout::MaxIterChange
min	program/settings.h	/^    SciNot val, min, max;$/;"	m	class:SciNotSetting
min	program/settings.h	/^    double val, min, max;$/;"	m	class:FloatSetting
min	program/settings.h	/^    int val, min, max;$/;"	m	class:IntSetting
minAutoFindEdgeOverlap	program/settings.h	/^    int minAutoFindEdgeOverlap;$/;"	m	class:Settings
minDepthRange	program/settings.h	/^    FloatSetting minDepthRange;$/;"	m	class:Settings
minDistCC	ogdf/energybased/FMMMLayout.h	/^	double minDistCC() const { return m_minDistCC; }$/;"	f	class:ogdf::FMMMLayout
minDistCC	ogdf/energybased/FMMMLayout.h	/^	void minDistCC(double x) { m_minDistCC = (( x > 0) ? x : 1);}$/;"	f	class:ogdf::FMMMLayout
minGraphSize	ogdf/energybased/FMMMLayout.h	/^	int minGraphSize() const { return m_minGraphSize; }$/;"	f	class:ogdf::FMMMLayout
minGraphSize	ogdf/energybased/FMMMLayout.h	/^	void minGraphSize(int n) { m_minGraphSize = ((n >= 2)? n : 2);}$/;"	f	class:ogdf::FMMMLayout
minLengthBaseDiscrepancy	program/settings.h	/^    IntSetting minLengthBaseDiscrepancy;$/;"	m	class:Settings
minLengthPercentage	program/settings.h	/^    FloatSetting minLengthPercentage;$/;"	m	class:Settings
minMeanHitIdentity	program/settings.h	/^    FloatSetting minMeanHitIdentity;$/;"	m	class:Settings
minOccurs	ogdf/fileformats/OgmlParser.cpp	/^	int minOccurs, maxOccurs; \/\/ Min. occurs and max. occurs of this tag.$/;"	m	class:ogdf::OgmlParser::OgmlTag	file:
minQueryCoveredByHits	program/settings.h	/^    FloatSetting minQueryCoveredByHits;$/;"	m	class:Settings
minQueryCoveredByPath	program/settings.h	/^    FloatSetting minQueryCoveredByPath;$/;"	m	class:Settings
minTotalGraphLength	program/settings.h	/^    double minTotalGraphLength;$/;"	m	class:Settings
minZoom	program/settings.h	/^    double minZoom;$/;"	m	class:Settings
minZoomOnGraphDraw	program/settings.h	/^    double minZoomOnGraphDraw;$/;"	m	class:Settings
minimumNodeLength	program/settings.h	/^    FloatSetting minimumNodeLength;$/;"	m	class:Settings
minimumSizeHint	ui/verticallabel.cpp	/^QSize VerticalLabel::minimumSizeHint() const$/;"	f	class:VerticalLabel
minus	ogdf/fileformats/DinoXmlScanner.h	/^		minus,				\/\/\/< -$/;"	e	enum:ogdf::XmlToken
modifySequenceUsingOverlap	graph/path.cpp	/^QByteArray Path::modifySequenceUsingOverlap(QByteArray sequence, int overlap) const$/;"	f	class:Path
moon_List	ogdf/internal/energybased/NodeAttributes.h	/^	List<node>  moon_List;\/\/the list of all dedicated moon nodes (!= nil if type == 3)$/;"	m	class:ogdf::NodeAttributes
moon_List_ptr	ogdf/internal/energybased/NodeAttributes.h	/^	List<node>* moon_List_ptr;\/\/a pointer to the moon_List$/;"	m	class:ogdf::NodeAttributes
moon_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	bool moon_edge; \/\/indicates if this edge is associasted with a moon node$/;"	m	class:ogdf::EdgeAttributes
mouseDoubleClickEvent	ui/mygraphicsview.cpp	/^void MyGraphicsView::mouseDoubleClickEvent(QMouseEvent * event)$/;"	f	class:MyGraphicsView
mouseMoveEvent	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::mouseMoveEvent(QGraphicsSceneMouseEvent * event)$/;"	f	class:GraphicsItemNode
mouseMoveEvent	ui/mygraphicsview.cpp	/^void MyGraphicsView::mouseMoveEvent(QMouseEvent * event)$/;"	f	class:MyGraphicsView
mousePressEvent	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::mousePressEvent(QGraphicsSceneMouseEvent * event)$/;"	f	class:GraphicsItemNode
mousePressEvent	ui/infotextwidget.cpp	/^void InfoTextWidget::mousePressEvent(QMouseEvent * event)$/;"	f	class:InfoTextWidget
mousePressEvent	ui/mygraphicsview.cpp	/^void MyGraphicsView::mousePressEvent(QMouseEvent * event)$/;"	f	class:MyGraphicsView
mouseReleaseEvent	ui/mygraphicsview.cpp	/^void MyGraphicsView::mouseReleaseEvent(QMouseEvent * event)$/;"	f	class:MyGraphicsView
move	ogdf/basic/Graph.cpp	/^void Graph::move(edge e,$/;"	f	class:ogdf::Graph
move	ogdf/basic/Graph_d.h	/^	void move(T *pX, GraphList<T> &L) {$/;"	f	class:ogdf::GraphList
move	ogdf/basic/Graph_d.h	/^	void move(T *pX, GraphList<T> &L, T *pY, Direction dir) {$/;"	f	class:ogdf::GraphList
moveAdj	ogdf/basic/Graph.cpp	/^void Graph::moveAdj(adjEntry adj, node w)$/;"	f	class:ogdf::Graph
moveAdj	ogdf/basic/Graph_d.h	/^	void moveAdj(adjEntry adjMove, Direction dir, adjEntry adjPos) {$/;"	f	class:ogdf::Graph
moveAdjAfter	ogdf/basic/Graph_d.h	/^	void moveAdjAfter(adjEntry adjMove, adjEntry adjAfter) {$/;"	f	class:ogdf::Graph
moveAdjBefore	ogdf/basic/Graph_d.h	/^	void moveAdjBefore(adjEntry adjMove, adjEntry adjBefore) {$/;"	f	class:ogdf::Graph
moveAfter	ogdf/basic/Graph_d.h	/^	void moveAfter(T *pX, T *pY){$/;"	f	class:ogdf::GraphList
moveBackward	graph/graphlocation.cpp	/^void GraphLocation::moveBackward(int change)$/;"	f	class:GraphLocation
moveBefore	ogdf/basic/Graph_d.h	/^	void moveBefore(T *pX, T *pY){$/;"	f	class:ogdf::GraphList
moveBridge	ogdf/basic/CombinatorialEmbedding.cpp	/^void CombinatorialEmbedding::moveBridge(adjEntry adjBridge, adjEntry adjBefore)$/;"	f	class:ogdf::CombinatorialEmbedding
moveCluster	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::moveCluster(cluster c, cluster newParent)$/;"	f	class:ogdf::ClusterGraph
moveEdgesToParent	ogdf/internal/energybased/MultilevelGraph.cpp	/^std::vector<edge> MultilevelGraph::moveEdgesToParent(NodeMerge * NM, node theNode, node parent, bool deleteDoubleEdges, int adjustEdgeLengths)$/;"	f	class:ogdf::MultilevelGraph
moveForward	graph/graphlocation.cpp	/^void GraphLocation::moveForward(int change)$/;"	f	class:GraphLocation
moveFrontToBack	ogdf/basic/SList.h	/^	void moveFrontToBack(SList<E> &L2) {$/;"	f	class:ogdf::SList
moveFrontToBack	ogdf/basic/SList.h	/^	void moveFrontToBack(SListPure<E> &L2) {$/;"	f	class:ogdf::SListPure
moveFrontToFront	ogdf/basic/SList.h	/^	void moveFrontToFront(SList<E> &L2) {$/;"	f	class:ogdf::SList
moveFrontToFront	ogdf/basic/SList.h	/^	void moveFrontToFront(SListPure<E> &L2) {$/;"	f	class:ogdf::SListPure
moveFrontToSucc	ogdf/basic/SList.h	/^	void moveFrontToSucc(SList<E> &L2, SListIterator<E> itBefore) {$/;"	f	class:ogdf::SList
moveFrontToSucc	ogdf/basic/SList.h	/^	void moveFrontToSucc(SListPure<E> &L2, SListIterator<E> itBefore) {$/;"	f	class:ogdf::SListPure
moveLocation	graph/graphlocation.cpp	/^void GraphLocation::moveLocation(int change)$/;"	f	class:GraphLocation
moveSource	ogdf/basic/Graph.cpp	/^void Graph::moveSource(edge e, adjEntry adjSrc, Direction dir)$/;"	f	class:ogdf::Graph
moveSource	ogdf/basic/Graph.cpp	/^void Graph::moveSource(edge e, node v)$/;"	f	class:ogdf::Graph
moveTarget	ogdf/basic/Graph.cpp	/^void Graph::moveTarget(edge e, adjEntry adjTgt, Direction dir)$/;"	f	class:ogdf::Graph
moveTarget	ogdf/basic/Graph.cpp	/^void Graph::moveTarget(edge e, node v)$/;"	f	class:ogdf::Graph
moveToBack	ogdf/basic/List.h	/^	void moveToBack(ListIterator<E> it) {$/;"	f	class:ogdf::List
moveToBack	ogdf/basic/List.h	/^	void moveToBack(ListIterator<E> it) {$/;"	f	class:ogdf::ListPure
moveToBack	ogdf/basic/List.h	/^	void moveToBack(ListIterator<E> it, List<E> &L2) {$/;"	f	class:ogdf::List
moveToBack	ogdf/basic/List.h	/^	void moveToBack(ListIterator<E> it, ListPure<E> &L2) {$/;"	f	class:ogdf::ListPure
moveToFront	ogdf/basic/List.h	/^	void moveToFront(ListIterator<E> it) {$/;"	f	class:ogdf::List
moveToFront	ogdf/basic/List.h	/^	void moveToFront(ListIterator<E> it) {$/;"	f	class:ogdf::ListPure
moveToFront	ogdf/basic/List.h	/^	void moveToFront(ListIterator<E> it, List<E> &L2) {$/;"	f	class:ogdf::List
moveToFront	ogdf/basic/List.h	/^	void moveToFront(ListIterator<E> it, ListPure<E> &L2) {$/;"	f	class:ogdf::ListPure
moveToNextCharacter	ogdf/fileformats/DinoLineBuffer.cpp	/^	char DinoLineBuffer::moveToNextCharacter(){$/;"	f	class:ogdf::DinoLineBuffer
moveToPrec	ogdf/basic/List.h	/^	void moveToPrec(ListIterator<E> it, List<E> &L2, ListIterator<E> itAfter) {$/;"	f	class:ogdf::List
moveToPrec	ogdf/basic/List.h	/^	void moveToPrec(ListIterator<E> it, ListIterator<E> itAfter) {$/;"	f	class:ogdf::List
moveToPrec	ogdf/basic/List.h	/^	void moveToPrec(ListIterator<E> it, ListIterator<E> itAfter) {$/;"	f	class:ogdf::ListPure
moveToPrec	ogdf/basic/List.h	/^	void moveToPrec(ListIterator<E> it, ListPure<E> &L2, ListIterator<E> itAfter) {$/;"	f	class:ogdf::ListPure
moveToSucc	ogdf/basic/List.h	/^	void moveToSucc(ListIterator<E> it, List<E> &L2, ListIterator<E> itBefore) {$/;"	f	class:ogdf::List
moveToSucc	ogdf/basic/List.h	/^	void moveToSucc(ListIterator<E> it, ListIterator<E> itBefore) {$/;"	f	class:ogdf::List
moveToSucc	ogdf/basic/List.h	/^	void moveToSucc(ListIterator<E> it, ListIterator<E> itBefore) {$/;"	f	class:ogdf::ListPure
moveToSucc	ogdf/basic/List.h	/^	void moveToSucc(ListIterator<E> it, ListPure<E> &L2, ListIterator<E> itBefore) {$/;"	f	class:ogdf::ListPure
moveToZero	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::moveToZero()$/;"	f	class:ogdf::MultilevelGraph
move_nodes	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::move_nodes($/;"	f	class:ogdf::FMMMLayout
my_load	ogdf/basic/basic.cpp	/^void __attribute__ ((constructor)) my_load(void)$/;"	f
my_unload	ogdf/basic/basic.cpp	/^void __attribute__ ((destructor)) my_unload(void)$/;"	f
nBegin	ogdf/cluster/ClusterGraph.h	/^	ListConstIterator<node> nBegin() const{ return m_entries.begin();}$/;"	f	class:ogdf::ClusterElement
nBegin	ogdf/cluster/ClusterGraph.h	/^	ListIterator<node> nBegin(){ return m_entries.begin();}$/;"	f	class:ogdf::ClusterElement
nCount	ogdf/cluster/ClusterGraph.h	/^	int nCount(){ return m_entries.size();}$/;"	f	class:ogdf::ClusterElement
namePredefKey	ogdf/fileformats/GmlParser.h	/^		namePredefKey, graphPredefKey, versionPredefKey, directedPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
namePredefKey	ogdf/fileformats/XmlParser.h	/^		namePredefKey, graphPredefKey, versionPredefKey, directedPredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
nearly_equal	ogdf/energybased/numexcept.cpp	/^bool numexcept::nearly_equal(double a,double b)$/;"	f	class:ogdf::numexcept
neighbour_s_node	ogdf/internal/energybased/NodeAttributes.h	/^	List<node> neighbour_s_node;\/\/this is the list of the neighbour solar systems suns$/;"	m	class:ogdf::NodeAttributes
neighbour_s_node_List_ptr	ogdf/internal/energybased/NodeAttributes.h	/^	List<node>* neighbour_s_node_List_ptr; \/\/a pointer to to the neighbour_s_node list$/;"	m	class:ogdf::NodeAttributes
newCluster	ogdf/cluster/ClusterGraph.cpp	/^cluster ClusterGraph::newCluster()$/;"	f	class:ogdf::ClusterGraph
newCluster	ogdf/cluster/ClusterGraph.cpp	/^cluster ClusterGraph::newCluster(cluster parent, int id)$/;"	f	class:ogdf::ClusterGraph
newCluster	ogdf/cluster/ClusterGraph.cpp	/^cluster ClusterGraph::newCluster(int id)$/;"	f	class:ogdf::ClusterGraph
newEdge	ogdf/basic/Graph.cpp	/^edge Graph::newEdge(adjEntry adjStart, adjEntry adjEnd, Direction dir)$/;"	f	class:ogdf::Graph
newEdge	ogdf/basic/Graph.cpp	/^edge Graph::newEdge(adjEntry adjStart, node v)$/;"	f	class:ogdf::Graph
newEdge	ogdf/basic/Graph.cpp	/^edge Graph::newEdge(node v, adjEntry adjEnd)$/;"	f	class:ogdf::Graph
newEdge	ogdf/basic/Graph.cpp	/^edge Graph::newEdge(node v, node w)$/;"	f	class:ogdf::Graph
newEdge	ogdf/basic/Graph.cpp	/^edge Graph::newEdge(node v, node w, int index)$/;"	f	class:ogdf::Graph
newEdge	ogdf/basic/GraphCopy.cpp	/^edge GraphCopy::newEdge(edge eOrig)$/;"	f	class:ogdf::GraphCopy
newEdge	ogdf/basic/GraphCopy.cpp	/^edge GraphCopy::newEdge(edge eOrig, adjEntry adjSrc, node w)$/;"	f	class:ogdf::GraphCopy
newEdge	ogdf/basic/GraphCopy.cpp	/^edge GraphCopy::newEdge(edge eOrig, node v, adjEntry adjTgt)$/;"	f	class:ogdf::GraphCopy
newEdge	ogdf/basic/GraphCopy.cpp	/^edge GraphCopy::newEdge(node v, adjEntry adjEnd, edge eOrig, CombinatorialEmbedding &E)$/;"	f	class:ogdf::GraphCopy
newEdge	ogdf/basic/GraphCopy.h	/^	edge newEdge(adjEntry adjSrc, adjEntry adjTgt) { return Graph::newEdge(adjSrc, adjTgt); }$/;"	f	class:ogdf::GraphCopy
newEdge	ogdf/basic/GraphCopy.h	/^	edge newEdge(adjEntry adjSrc, node w)          { return Graph::newEdge(adjSrc, w); }$/;"	f	class:ogdf::GraphCopy
newEdge	ogdf/basic/GraphCopy.h	/^	edge newEdge(edge eOrig) {$/;"	f	class:ogdf::GraphCopySimple
newEdge	ogdf/basic/GraphCopy.h	/^	edge newEdge(node v, adjEntry adjTgt)          { return Graph::newEdge(v, adjTgt); }$/;"	f	class:ogdf::GraphCopy
newEdge	ogdf/basic/GraphCopy.h	/^	edge newEdge(node v, node w)                   { return Graph::newEdge(v, w); }$/;"	f	class:ogdf::GraphCopy
newEdge	ogdf/basic/GraphCopy.h	/^	edge newEdge(node v, node w) {$/;"	f	class:ogdf::GraphCopySimple
newInitialPlacement	ogdf/energybased/FMMMLayout.h	/^	bool newInitialPlacement() const { return m_newInitialPlacement; }$/;"	f	class:ogdf::FMMMLayout
newInitialPlacement	ogdf/energybased/FMMMLayout.h	/^	void newInitialPlacement(bool nip) { m_newInitialPlacement = nip; }$/;"	f	class:ogdf::FMMMLayout
newNode	ogdf/basic/Graph.cpp	/^node Graph::newNode()$/;"	f	class:ogdf::Graph
newNode	ogdf/basic/Graph.cpp	/^node Graph::newNode(int index)$/;"	f	class:ogdf::Graph
newNode	ogdf/basic/GraphCopy.h	/^	node newNode() {$/;"	f	class:ogdf::GraphCopy
newNode	ogdf/basic/GraphCopy.h	/^	node newNode() {$/;"	f	class:ogdf::GraphCopySimple
newNode	ogdf/basic/GraphCopy.h	/^	node newNode(node vOrig) {$/;"	f	class:ogdf::GraphCopy
newNode	ogdf/basic/GraphCopy.h	/^	node newNode(node vOrig) {$/;"	f	class:ogdf::GraphCopySimple
new_down_left_corner_position	ogdf/energybased/Rectangle.h	/^		DPoint new_down_left_corner_position;\/\/new calculated down left corner of ...$/;"	m	class:ogdf::Rectangle
next	ogdf/basic/Hashing.h	/^	HashElement<K,I> *next() const {$/;"	f	class:ogdf::HashElement
next	ogdf/basic/Hashing.h	/^	HashElementBase *next() const { return m_next; }$/;"	f	class:ogdf::HashElementBase
nextElement	ogdf/basic/Hashing.cpp	/^HashElementBase *HashingBase::nextElement(HashElementBase ***pList,$/;"	f	class:ogdf::HashingBase
nextElement	ogdf/basic/Hashing.h	/^	HashElement<K,I> *nextElement(HashElement<K,I> ***pList,$/;"	f	class:ogdf::Hashing
nextFaceEdge	ogdf/basic/CombinatorialEmbedding.h	/^	adjEntry nextFaceEdge(adjEntry adj) const {$/;"	f	class:ogdf::FaceElement
nextPower2	ogdf/basic/Graph.cpp	/^int Graph::nextPower2(int start, int idCount)$/;"	f	class:ogdf::Graph
nmParticlesInLeaves	ogdf/energybased/FMMMLayout.h	/^	int nmParticlesInLeaves() const { return m_NMParticlesInLeaves; }$/;"	f	class:ogdf::FMMMLayout
nmParticlesInLeaves	ogdf/energybased/FMMMLayout.h	/^	void nmParticlesInLeaves(int n) { m_NMParticlesInLeaves = ((n>= 1)? n : 1);}$/;"	f	class:ogdf::FMMMLayout
nmPrecision	ogdf/energybased/FMMMLayout.h	/^	int nmPrecision() const { return m_NMPrecision; }$/;"	f	class:ogdf::FMMMLayout
nmPrecision	ogdf/energybased/FMMMLayout.h	/^	void nmPrecision(int p) { m_NMPrecision  = ((p >= 1 ) ? p : 1);}$/;"	f	class:ogdf::FMMMLayout
nmSmallCell	ogdf/energybased/FMMMLayout.h	/^	SmallestCellFinding nmSmallCell() const { return m_NMSmallCell; }$/;"	f	class:ogdf::FMMMLayout
nmSmallCell	ogdf/energybased/FMMMLayout.h	/^	void nmSmallCell(SmallestCellFinding scf) { m_NMSmallCell = scf; }$/;"	f	class:ogdf::FMMMLayout
nmTreeConstruction	ogdf/energybased/FMMMLayout.h	/^	ReducedTreeConstruction nmTreeConstruction() const { return m_NMTreeConstruction; }$/;"	f	class:ogdf::FMMMLayout
nmTreeConstruction	ogdf/energybased/FMMMLayout.h	/^	void nmTreeConstruction(ReducedTreeConstruction rtc) { m_NMTreeConstruction = rtc; }$/;"	f	class:ogdf::FMMMLayout
noBlastHitsColour	program/settings.h	/^    QColor noBlastHitsColour;$/;"	m	class:Settings
noToken	ogdf/fileformats/DinoXmlScanner.h	/^		noToken				\/\/\/< Used for the m_lookAheadToken to indicate that there$/;"	e	enum:ogdf::XmlToken
node	ogdf/basic/Graph_d.h	/^typedef NodeElement *node; \/\/!< The type of nodes.$/;"	t	namespace:ogdf
nodeAdded	ogdf/basic/Constraints.h	/^        virtual void nodeAdded(node \/*v*\/)    { }$/;"	f	class:ogdf::GraphConstraints
nodeAdded	ogdf/cluster/ClusterGraph.h	/^	virtual void nodeAdded(node v)$/;"	f	class:ogdf::ClusterGraph
nodeArrayTableSize	ogdf/basic/Graph_d.h	/^	int nodeArrayTableSize() const { return m_nodeArrayTableSize; }$/;"	f	class:ogdf::Graph
nodeColor	ogdf/basic/GraphAttributes.h	/^		nodeColor = 0x00200, \/\/!< node attribute m_nodeColor, m_nodeLine$/;"	e	enum:ogdf::GraphAttributes::__anon5
nodeColourScheme	program/settings.h	/^    NodeColourScheme nodeColourScheme;$/;"	m	class:Settings
nodeDeleted	ogdf/basic/Constraints.h	/^        virtual void nodeDeleted(node \/*v*\/) { }$/;"	f	class:ogdf::Constraint
nodeDeleted	ogdf/cluster/ClusterGraph.h	/^	virtual void nodeDeleted(node v)$/;"	f	class:ogdf::ClusterGraph
nodeDistance	program/settings.h	/^    IntSetting nodeDistance;$/;"	m	class:Settings
nodeDistanceChanged	ui/mainwindow.cpp	/^void MainWindow::nodeDistanceChanged()$/;"	f	class:MainWindow
nodeDragging	program/settings.h	/^    NodeDragging nodeDragging;$/;"	m	class:Settings
nodeGraphics	ogdf/basic/GraphAttributes.h	/^		nodeGraphics = 0x00001, \/\/!< node attributes m_x, m_y, m_width, m_height, m_nodeShape$/;"	e	enum:ogdf::GraphAttributes::__anon5
nodeId	ogdf/basic/GraphAttributes.h	/^		nodeId = 0x00400, \/\/!< node attribute m_nodeId$/;"	e	enum:ogdf::GraphAttributes::__anon5
nodeLabel	ogdf/basic/GraphAttributes.h	/^		nodeLabel = 0x00040, \/\/!< node attribute m_nodeLabel$/;"	e	enum:ogdf::GraphAttributes::__anon5
nodeLengthMode	program/settings.h	/^    NodeLengthMode nodeLengthMode;$/;"	m	class:Settings
nodeLengthPerMegabaseManualChanged	ui/settingsdialog.cpp	/^void SettingsDialog::nodeLengthPerMegabaseManualChanged()$/;"	f	class:SettingsDialog
nodeLevel	ogdf/basic/GraphAttributes.h	/^		nodeLevel = 0x00004, \/\/!< node attribute m_level$/;"	e	enum:ogdf::GraphAttributes::__anon5
nodeLine	ogdf/basic/GraphAttributes.h	/^	String &nodeLine(node v) {$/;"	f	class:ogdf::GraphAttributes
nodeLine	ogdf/basic/GraphAttributes.h	/^	const String &nodeLine(node v) const {$/;"	f	class:ogdf::GraphAttributes
nodePattern	ogdf/basic/GraphAttributes.h	/^	BrushPattern &nodePattern(node v) {$/;"	f	class:ogdf::GraphAttributes
nodePattern	ogdf/basic/GraphAttributes.h	/^	const BrushPattern &nodePattern(node v) const {$/;"	f	class:ogdf::GraphAttributes
nodePredefKey	ogdf/fileformats/GmlParser.h	/^		nodePredefKey, edgePredefKey, graphicsPredefKey, xPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
nodePredefKey	ogdf/fileformats/XmlParser.h	/^		nodePredefKey, edgePredefKey, graphicsPredefKey, xPredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
nodeSegmentLength	program/settings.h	/^    FloatSetting nodeSegmentLength;$/;"	m	class:Settings
nodeStyle	ogdf/basic/GraphAttributes.h	/^		nodeStyle = 0x04000, \/\/!< node attributes m_nodePattern, m_nodeStyle, m_nodeLineWidth;$/;"	e	enum:ogdf::GraphAttributes::__anon5
nodeTemplate	ogdf/basic/GraphAttributes.h	/^		nodeTemplate = 0x08000, \/\/!< node attribute m_nodeTemplate$/;"	e	enum:ogdf::GraphAttributes::__anon5
nodeType	ogdf/basic/GraphAttributes.h	/^		nodeType = 0x00100, \/\/!< node attribute m_vType$/;"	e	enum:ogdf::GraphAttributes::__anon5
nodeWeight	ogdf/basic/GraphAttributes.h	/^		nodeWeight = 0x20000$/;"	e	enum:ogdf::GraphAttributes::__anon5
nodeWidthChanged	ui/mainwindow.cpp	/^void MainWindow::nodeWidthChanged()$/;"	f	class:MainWindow
nodetypePredefKey	ogdf/fileformats/XmlParser.h	/^		yPredefKey, wPredefKey, hPredefKey, nodetypePredefKey, edgetypePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
none	ogdf/basic/GraphAttributes.h	/^		none, \/\/!< no edge arrows$/;"	e	enum:ogdf::GraphAttributes::EdgeArrow
norm	ogdf/basic/geometry.h	/^	double norm() const {$/;"	f	class:ogdf::DPoint
normalise	program/scinot.cpp	/^void SciNot::normalise()$/;"	f	class:SciNot
normalize	ogdf/basic/geometry.cpp	/^void DPolygon::normalize()$/;"	f	class:ogdf::DPolygon
normalize	ogdf/basic/geometry.cpp	/^void DPolyline::normalize()$/;"	f	class:ogdf::DPolyline
normalize	ogdf/basic/geometry.cpp	/^void DPolyline::normalize(DPoint src, DPoint tgt)$/;"	f	class:ogdf::DPolyline
normalize	ogdf/basic/geometry.h	/^	void normalize() {$/;"	f	class:ogdf::DRect
notContiguousColour	program/settings.h	/^    QColor notContiguousColour;$/;"	m	class:Settings
notInOgdf	graph/debruijnnode.h	/^    bool notInOgdf() const {return m_ogdfNode == 0;}$/;"	f	class:DeBruijnNode
null	graph/graphlocation.cpp	/^GraphLocation GraphLocation::null()$/;"	f	class:GraphLocation
numParallelEdges	ogdf/basic/simple_graph_alg.cpp	/^int numParallelEdges(const Graph &G)$/;"	f	namespace:ogdf
numParallelEdgesUndirected	ogdf/basic/simple_graph_alg.cpp	/^int numParallelEdgesUndirected(const Graph &G)$/;"	f	namespace:ogdf
numberOfClusters	ogdf/cluster/ClusterGraph.h	/^	int numberOfClusters() const { return m_nClusters; }$/;"	f	class:ogdf::ClusterGraph
numberOfConstraints	ogdf/basic/Constraints.h	/^	int numberOfConstraints() { return m_List.size(); }$/;"	f	class:ogdf::GraphConstraints
numberOfEdges	ogdf/basic/Graph_d.h	/^	int numberOfEdges() const { return m_nEdges; }$/;"	f	class:ogdf::Graph
numberOfFaces	ogdf/basic/CombinatorialEmbedding.h	/^	int numberOfFaces() const { return m_nFaces; }$/;"	f	class:ogdf::ConstCombinatorialEmbedding
numberOfNodes	ogdf/basic/Graph_d.h	/^	int numberOfNodes() const { return m_nNodes; }$/;"	f	class:ogdf::Graph
numberOfOccurrencesInMiddleOfPath	graph/path.cpp	/^int Path::numberOfOccurrencesInMiddleOfPath(DeBruijnNode * node) const$/;"	f	class:Path
numberOfProcessors	ogdf/basic/System.h	/^	static int numberOfProcessors() { return s_numberOfProcessors; }$/;"	f	class:ogdf::System
numberType	ogdf/basic/geometry.h	/^	typedef NUMBER numberType;$/;"	t	class:ogdf::GenericPoint
number_of_components	ogdf/energybased/FMMMLayout.h	/^	int number_of_components; \/\/!< The number of components of the graph.$/;"	m	class:ogdf::FMMMLayout
numexcept	ogdf/energybased/numexcept.h	/^	class numexcept$/;"	c	namespace:ogdf
ogdf	ogdf/basic/AdjEntryArray.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/Array.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/Array2D.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/BoundedStack.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/CombinatorialEmbedding.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/basic/CombinatorialEmbedding.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/Constraint.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/basic/Constraints.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/CriticalSection.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/EdgeArray.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/FaceArray.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/FaceSet.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/Graph.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/basic/Graph.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/GraphAttributes.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/basic/GraphAttributes.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/GraphCopy.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/basic/GraphCopy.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/GraphObserver.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/Graph_d.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/HashArray.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/Hashing.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/basic/Hashing.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/List.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/Math.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/basic/Math.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/NodeArray.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/SList.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/Stack.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/String.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/basic/String.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/System.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/basic/System.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/basic.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/basic/basic.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/comparer.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/exceptions.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/geometry.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/basic/geometry.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/memory.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/simple_graph_alg.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/basic/simple_graph_alg.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/basic/tuples.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/cluster/ClusterArray.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/cluster/ClusterGraph.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/cluster/ClusterGraph.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/cluster/ClusterGraphAttributes.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/cluster/ClusterGraphAttributes.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/cluster/ClusterGraphObserver.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/energybased/Edge.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/energybased/FMMMLayout.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/energybased/FMMMLayout.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/energybased/MAARPacking.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/energybased/MAARPacking.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/energybased/Multilevel.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/energybased/Multilevel.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/energybased/Node.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/energybased/PQueue.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/energybased/PackingRowInfo.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/energybased/Rectangle.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/energybased/Set.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/energybased/Set.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/energybased/numexcept.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/energybased/numexcept.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/fileformats/DinoLineBuffer.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/fileformats/DinoLineBuffer.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/fileformats/DinoTools.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/fileformats/DinoTools.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/fileformats/DinoXmlParser.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/fileformats/DinoXmlParser.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/fileformats/DinoXmlScanner.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/fileformats/DinoXmlScanner.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/fileformats/GmlParser.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/fileformats/GmlParser.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/fileformats/Ogml.cpp	/^namespace ogdf$/;"	n	file:
ogdf	ogdf/fileformats/Ogml.h	/^namespace ogdf$/;"	n
ogdf	ogdf/fileformats/OgmlParser.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/fileformats/OgmlParser.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/fileformats/XmlObject.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/fileformats/XmlParser.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/fileformats/XmlParser.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/internal/basic/MallocMemoryAllocator.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/internal/basic/PoolMemoryAllocator.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/internal/basic/list_templates.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/internal/energybased/EdgeAttributes.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/internal/energybased/EdgeAttributes.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/internal/energybased/FruchtermanReingold.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/internal/energybased/FruchtermanReingold.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/internal/energybased/MultilevelGraph.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/internal/energybased/MultilevelGraph.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/internal/energybased/NMM.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/internal/energybased/NMM.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/internal/energybased/NodeAttributes.cpp	/^namespace ogdf{$/;"	n	file:
ogdf	ogdf/internal/energybased/NodeAttributes.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/internal/energybased/ParticleInfo.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/internal/energybased/QuadTreeNM.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/internal/energybased/QuadTreeNM.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/internal/energybased/QuadTreeNodeNM.cpp	/^namespace ogdf {$/;"	n	file:
ogdf	ogdf/internal/energybased/QuadTreeNodeNM.h	/^namespace ogdf {$/;"	n
ogdf	ogdf/module/LayoutModule.h	/^namespace ogdf {$/;"	n
old_down_left_corner_position	ogdf/energybased/Rectangle.h	/^		DPoint old_down_left_corner_position;\/\/down left corner of the tight surround. rect.$/;"	m	class:ogdf::Rectangle
omani	ogdf/cluster/ClusterGraphAttributes.cpp	/^class omani$/;"	c	namespace:ogdf	file:
on	program/settings.h	/^    bool on;$/;"	m	class:FloatSetting
on	program/settings.h	/^    bool on;$/;"	m	class:IntSetting
on	program/settings.h	/^    bool on;$/;"	m	class:SciNotSetting
onForwardStrand	blast/blasthit.h	/^    bool onForwardStrand() {return m_queryStart < m_queryEnd;}$/;"	f	class:BlastHit
openAboutDialog	ui/mainwindow.cpp	/^void MainWindow::openAboutDialog()$/;"	f	class:MainWindow
openBandageUrl	ui/mainwindow.cpp	/^void MainWindow::openBandageUrl()$/;"	f	class:MainWindow
openBlastSearchDialog	ui/mainwindow.cpp	/^void MainWindow::openBlastSearchDialog()$/;"	f	class:MainWindow
openFiltersDialog	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::openFiltersDialog()$/;"	f	class:BlastSearchDialog
openGraphInfoDialog	ui/mainwindow.cpp	/^void MainWindow::openGraphInfoDialog()$/;"	f	class:MainWindow
openPathSpecifyDialog	ui/mainwindow.cpp	/^void MainWindow::openPathSpecifyDialog()$/;"	f	class:MainWindow
openSettingsDialog	ui/mainwindow.cpp	/^void MainWindow::openSettingsDialog()$/;"	f	class:MainWindow
openingBracket	ogdf/fileformats/DinoXmlScanner.h	/^		openingBracket,		\/\/\/< <$/;"	e	enum:ogdf::XmlToken
operator !=	ogdf/basic/Hashing.h	/^	friend bool operator!=(const HashConstIterator<K,I,H> &it1,$/;"	f	class:ogdf::HashConstIterator
operator !=	ogdf/basic/List.h	/^	bool operator!=(const List<E> &L) const {$/;"	f	class:ogdf::List
operator !=	ogdf/basic/List.h	/^	bool operator!=(const ListConstIterator<E> &it) const {$/;"	f	class:ogdf::ListConstIterator
operator !=	ogdf/basic/List.h	/^	bool operator!=(const ListIterator<E> &it) const {$/;"	f	class:ogdf::ListIterator
operator !=	ogdf/basic/List.h	/^	bool operator!=(const ListPure<E> &L) const {$/;"	f	class:ogdf::ListPure
operator !=	ogdf/basic/SList.h	/^	bool operator!=(const SListConstIterator<E> &it) const {$/;"	f	class:ogdf::SListConstIterator
operator !=	ogdf/basic/SList.h	/^	bool operator!=(const SListIterator<E> &it) const {$/;"	f	class:ogdf::SListIterator
operator !=	ogdf/basic/String.h	/^	friend bool operator!=(const String &x, const String &y) {$/;"	f	class:ogdf::String
operator !=	ogdf/basic/String.h	/^	friend bool operator!=(const String &x, const char *y) {$/;"	f	class:ogdf::String
operator !=	ogdf/basic/String.h	/^	friend bool operator!=(const char *x, const String &y) {$/;"	f	class:ogdf::String
operator !=	ogdf/basic/geometry.h	/^	bool operator!=(const DLine &dl) const {$/;"	f	class:ogdf::DLine
operator !=	ogdf/basic/geometry.h	/^	bool operator!=(const DRect &dr) const {$/;"	f	class:ogdf::DRect
operator !=	ogdf/basic/geometry.h	/^	bool operator!=(const GenericPoint &ip) const {$/;"	f	class:ogdf::GenericPoint
operator !=	ogdf/basic/tuples.h	/^bool operator!=(const Tuple2<E1,E2> &t1, const Tuple2<E1,E2> &t2)$/;"	f	namespace:ogdf
operator !=	ogdf/basic/tuples.h	/^bool operator!=(const Tuple3<E1,E2,E3> &t1, const Tuple3<E1,E2,E3> &t2)$/;"	f	namespace:ogdf
operator !=	ogdf/basic/tuples.h	/^bool operator!=(const Tuple4<E1,E2,E3,E4> &t1, const Tuple4<E1,E2,E3,E4> &t2)$/;"	f	namespace:ogdf
operator !=	ogdf/fileformats/DinoLineBuffer.cpp	/^	bool DinoLineBufferPosition::operator!=(const DinoLineBufferPosition &position) const$/;"	f	class:ogdf::DinoLineBufferPosition
operator !=	program/scinot.cpp	/^bool SciNot::operator!=(SciNot const &other) const$/;"	f	class:SciNot
operator ()	ogdf/basic/Array2D.h	/^	E &operator()(int i, int j) {$/;"	f	class:ogdf::Array2D
operator ()	ogdf/basic/Array2D.h	/^	const E &operator()(int i, int j) const {$/;"	f	class:ogdf::Array2D
operator ()	ogdf/module/LayoutModule.h	/^	void operator()(GraphAttributes &GA) { call(GA); }$/;"	f	class:ogdf::LayoutModule
operator *	ogdf/basic/List.h	/^	E &operator*() const { return m_pX->m_x; }$/;"	f	class:ogdf::ListIterator
operator *	ogdf/basic/List.h	/^	const E &operator*() const { return m_pX->m_x; }$/;"	f	class:ogdf::ListConstIterator
operator *	ogdf/basic/SList.h	/^	E &operator*() const { return m_pX->m_x; }$/;"	f	class:ogdf::SListIterator
operator *	ogdf/basic/SList.h	/^	const E &operator*() const { return m_pX->m_x; }$/;"	f	class:ogdf::SListConstIterator
operator *	ogdf/basic/geometry.cpp	/^DVector DVector::operator*(const double val) const$/;"	f	class:ogdf::DVector
operator *	ogdf/basic/geometry.cpp	/^double DVector::operator*(const DVector &dv) const$/;"	f	class:ogdf::DVector
operator +	ogdf/basic/geometry.cpp	/^DPoint DPoint::operator+(const DPoint &p) const$/;"	f	class:ogdf::DPoint
operator ++	ogdf/basic/Hashing.h	/^	HashConstIterator<K,I,H> &operator++() {$/;"	f	class:ogdf::HashConstIterator
operator ++	ogdf/basic/List.h	/^	ListConstIterator<E> &operator++() {$/;"	f	class:ogdf::ListConstIterator
operator ++	ogdf/basic/List.h	/^	ListConstIterator<E> operator++(int) {$/;"	f	class:ogdf::ListConstIterator
operator ++	ogdf/basic/List.h	/^	ListIterator<E> &operator++() {$/;"	f	class:ogdf::ListIterator
operator ++	ogdf/basic/List.h	/^	ListIterator<E> operator++(int) {$/;"	f	class:ogdf::ListIterator
operator ++	ogdf/basic/SList.h	/^	SListConstIterator<E> &operator++() {$/;"	f	class:ogdf::SListConstIterator
operator ++	ogdf/basic/SList.h	/^	SListConstIterator<E> operator++(int) {$/;"	f	class:ogdf::SListConstIterator
operator ++	ogdf/basic/SList.h	/^	SListIterator<E> &operator++() {$/;"	f	class:ogdf::SListIterator
operator ++	ogdf/basic/SList.h	/^	SListIterator<E> operator++(int) {$/;"	f	class:ogdf::SListIterator
operator ++	ogdf/basic/geometry.cpp	/^DVector DVector::operator++() const$/;"	f	class:ogdf::DVector
operator +=	ogdf/basic/String.cpp	/^String &String::operator +=(const String &str)$/;"	f	class:ogdf::String
operator -	ogdf/basic/geometry.cpp	/^DPoint DPoint::operator-(const DPoint &p) const$/;"	f	class:ogdf::DPoint
operator --	ogdf/basic/List.h	/^	ListConstIterator<E> &operator--() {$/;"	f	class:ogdf::ListConstIterator
operator --	ogdf/basic/List.h	/^	ListConstIterator<E> operator--(int) {$/;"	f	class:ogdf::ListConstIterator
operator --	ogdf/basic/List.h	/^	ListIterator<E> &operator--() {$/;"	f	class:ogdf::ListIterator
operator --	ogdf/basic/List.h	/^	ListIterator<E> operator--(int) {$/;"	f	class:ogdf::ListIterator
operator --	ogdf/basic/geometry.cpp	/^DVector DVector::operator--() const$/;"	f	class:ogdf::DVector
operator /	ogdf/basic/geometry.cpp	/^DVector DVector::operator\/(const double val) const$/;"	f	class:ogdf::DVector
operator <	blast/blastquerypath.cpp	/^bool BlastQueryPath::operator<(BlastQueryPath const &other) const$/;"	f	class:BlastQueryPath
operator <	ogdf/basic/String.h	/^	friend bool operator<(const String &x, const String &y) {$/;"	f	class:ogdf::String
operator <	ogdf/basic/String.h	/^	friend bool operator<(const String &x, const char *y) {$/;"	f	class:ogdf::String
operator <	ogdf/basic/String.h	/^	friend bool operator<(const char *x, const String &y) {$/;"	f	class:ogdf::String
operator <	program/scinot.cpp	/^bool SciNot::operator<(SciNot const &other) const$/;"	f	class:SciNot
operator <	ui/tablewidgetitemdouble.cpp	/^bool TableWidgetItemDouble::operator<(QTableWidgetItem const &other) const$/;"	f	class:TableWidgetItemDouble
operator <	ui/tablewidgetitemint.cpp	/^bool TableWidgetItemInt::operator<(QTableWidgetItem const &other) const$/;"	f	class:TableWidgetItemInt
operator <	ui/tablewidgetitemshown.cpp	/^bool TableWidgetItemShown::operator<(QTableWidgetItem const &other) const$/;"	f	class:TableWidgetItemShown
operator <<	ogdf/basic/Array.h	/^ostream &operator<<(ostream &os, const ogdf::Array<E,INDEX> &a)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/BoundedStack.h	/^ostream &operator<<(ostream &os, const BoundedStack<E,INDEX> &S)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/Graph.cpp	/^ostream &operator<<(ostream &os, ogdf::adjEntry adj)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/Graph.cpp	/^ostream &operator<<(ostream &os, ogdf::edge e)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/Graph.cpp	/^ostream &operator<<(ostream &os, ogdf::node v)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/List.h	/^ostream &operator<<(ostream &os, const List<E> &L)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/List.h	/^ostream &operator<<(ostream &os, const ListPure<E> &L)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/SList.h	/^ostream &operator<<(ostream &os, const SList<E> &L)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/SList.h	/^ostream &operator<<(ostream &os, const SListPure<E> &L)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/Stack.h	/^ostream &operator<<(ostream &os, const Stack<E> &S)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/Stack.h	/^ostream &operator<<(ostream &os, const StackPure<E> &S)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/String.h	/^inline ostream &operator<<(ostream &os, const String &str) {$/;"	f	namespace:ogdf
operator <<	ogdf/basic/geometry.cpp	/^ostream &operator<<(ostream &os, const DLine &dl)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/geometry.cpp	/^ostream &operator<<(ostream &os, const DPoint &dp)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/geometry.cpp	/^ostream &operator<<(ostream &os, const DPolygon &dop)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/geometry.cpp	/^ostream &operator<<(ostream &os, const DRect &dr)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/geometry.cpp	/^ostream &operator<<(ostream &os, const DScaler &ds)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/geometry.cpp	/^ostream &operator<<(ostream &os, const IPoint &ip)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/tuples.h	/^ostream &operator<<(ostream &os, const Tuple2<E1,E2> &t2)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/tuples.h	/^ostream &operator<<(ostream &os, const Tuple3<E1,E2,E3> &t3)$/;"	f	namespace:ogdf
operator <<	ogdf/basic/tuples.h	/^ostream &operator<<(ostream &os, const Tuple4<E1,E2,E3,E4> &t4)$/;"	f	namespace:ogdf
operator <<	ogdf/cluster/ClusterGraph.cpp	/^ostream &operator<<(ostream &os, ogdf::cluster c)$/;"	f
operator <<	ogdf/cluster/ClusterGraphAttributes.cpp	/^	friend ostream& operator<<(ostream& os, omani man) {$/;"	f	class:ogdf::omani
operator <<	ogdf/cluster/ClusterGraphAttributes.cpp	/^ostream &operator<<(ostream &os, ogdf::cluster c)$/;"	f	namespace:ogdf
operator <<	ogdf/energybased/Edge.h	/^	friend ostream &operator<< (ostream & output, const Edge & E)$/;"	f	class:ogdf::Edge
operator <<	ogdf/energybased/Node.h	/^		friend ostream &operator<< (ostream & output,const Node & A)$/;"	f	class:ogdf::Node
operator <<	ogdf/energybased/PackingRowInfo.h	/^		friend ostream &operator<< (ostream & output, const PackingRowInfo & A)$/;"	f	class:ogdf::PackingRowInfo
operator <<	ogdf/energybased/Rectangle.h	/^		friend ostream &operator<< (ostream & output, const Rectangle & A)$/;"	f	class:ogdf::Rectangle
operator <<	ogdf/fileformats/DinoXmlParser.cpp	/^	ostream &operator<<(ostream &os, const DinoXmlParser &parser)$/;"	f	namespace:ogdf
operator <<	ogdf/fileformats/OgmlParser.cpp	/^ostream& operator<<(ostream& os, const OgmlParser::OgmlAttribute& oa)$/;"	f	namespace:ogdf
operator <<	ogdf/fileformats/OgmlParser.cpp	/^ostream& operator<<(ostream& os, const OgmlParser::OgmlTag& ot)$/;"	f	namespace:ogdf
operator <<	ogdf/internal/energybased/EdgeAttributes.cpp	/^ostream &operator<< (ostream & output, const EdgeAttributes & A)$/;"	f	namespace:ogdf
operator <<	ogdf/internal/energybased/NodeAttributes.cpp	/^ostream &operator<< (ostream & output, const NodeAttributes & A)$/;"	f	namespace:ogdf
operator <<	ogdf/internal/energybased/ParticleInfo.h	/^	friend ostream &operator<< (ostream & output, const ParticleInfo & A)$/;"	f	class:ogdf::ParticleInfo
operator <<	ogdf/internal/energybased/QuadTreeNodeNM.cpp	/^ostream &operator<< (ostream & output, const QuadTreeNodeNM & A)$/;"	f	namespace:ogdf
operator <=	ogdf/basic/String.h	/^	friend bool operator<=(const String &x, const String &y) {$/;"	f	class:ogdf::String
operator <=	ogdf/basic/String.h	/^	friend bool operator<=(const String &x, const char *y) {$/;"	f	class:ogdf::String
operator <=	ogdf/basic/String.h	/^	friend bool operator<=(const char *x, const String &y) {$/;"	f	class:ogdf::String
operator <=	program/scinot.cpp	/^bool SciNot::operator<=(SciNot const &other) const$/;"	f	class:SciNot
operator =	ogdf/basic/AdjEntryArray.h	/^	AdjEntryArray<T> &operator=(const AdjEntryArray<T> &A) {$/;"	f	class:ogdf::AdjEntryArray
operator =	ogdf/basic/Array.h	/^	Array<E,INDEX> &operator=(const Array<E,INDEX> &array2) {$/;"	f	class:ogdf::Array
operator =	ogdf/basic/Array2D.h	/^	Array2D<E> &operator=(const Array2D<E> &array2) {$/;"	f	class:ogdf::Array2D
operator =	ogdf/basic/BoundedStack.h	/^	BoundedStack<E> &operator=(const BoundedStack &S) {$/;"	f	class:ogdf::BoundedStack
operator =	ogdf/basic/CombinatorialEmbedding.cpp	/^ConstCombinatorialEmbedding &ConstCombinatorialEmbedding::operator=($/;"	f	class:ogdf::ConstCombinatorialEmbedding
operator =	ogdf/basic/CombinatorialEmbedding.h	/^	CombinatorialEmbedding &operator=(const CombinatorialEmbedding &) {$/;"	f	class:ogdf::CombinatorialEmbedding
operator =	ogdf/basic/EdgeArray.h	/^	EdgeArray<T> &operator=(const EdgeArray<T> &a) {$/;"	f	class:ogdf::EdgeArray
operator =	ogdf/basic/FaceArray.h	/^	FaceArray<T> &operator=(const FaceArray<T> &a) {$/;"	f	class:ogdf::FaceArray
operator =	ogdf/basic/Graph.cpp	/^Graph &Graph::operator=(const Graph &G)$/;"	f	class:ogdf::Graph
operator =	ogdf/basic/GraphCopy.cpp	/^GraphCopy &GraphCopy::operator=(const GraphCopy &GC)$/;"	f	class:ogdf::GraphCopy
operator =	ogdf/basic/GraphCopy.cpp	/^GraphCopySimple &GraphCopySimple::operator=(const GraphCopySimple &GC)$/;"	f	class:ogdf::GraphCopySimple
operator =	ogdf/basic/HashArray.h	/^	HashArray<I,E,H> &operator=(const HashArray<I,E,H> &A) {$/;"	f	class:ogdf::HashArray
operator =	ogdf/basic/Hashing.cpp	/^HashingBase &HashingBase::operator=(const HashingBase &H)$/;"	f	class:ogdf::HashingBase
operator =	ogdf/basic/Hashing.h	/^	HashConstIterator &operator=(const HashConstIterator<K,I,H> &it) {$/;"	f	class:ogdf::HashConstIterator
operator =	ogdf/basic/Hashing.h	/^	Hashing<K,I> &operator=(const Hashing<K,I> &hashing) {$/;"	f	class:ogdf::Hashing
operator =	ogdf/basic/List.h	/^	List<E> &operator=(const List<E> &L) {$/;"	f	class:ogdf::List
operator =	ogdf/basic/List.h	/^	ListConstIterator<E> &operator=(const ListConstIterator<E> &it) {$/;"	f	class:ogdf::ListConstIterator
operator =	ogdf/basic/List.h	/^	ListIterator<E> &operator=(const ListIterator<E> &it) {$/;"	f	class:ogdf::ListIterator
operator =	ogdf/basic/List.h	/^	ListPure<E> &operator=(const ListPure<E> &L) {$/;"	f	class:ogdf::ListPure
operator =	ogdf/basic/NodeArray.h	/^	NodeArray<T> &operator=(const NodeArray<T> &a) {$/;"	f	class:ogdf::NodeArray
operator =	ogdf/basic/SList.h	/^	SList<E> &operator=(const SList<E> &L) {$/;"	f	class:ogdf::SList
operator =	ogdf/basic/SList.h	/^	SListConstIterator<E> &operator=(const SListConstIterator<E> &it) {$/;"	f	class:ogdf::SListConstIterator
operator =	ogdf/basic/SList.h	/^	SListIterator<E> &operator=(const SListIterator<E> &it) {$/;"	f	class:ogdf::SListIterator
operator =	ogdf/basic/SList.h	/^	SListPure<E> &operator=(const SListPure<E> &L) {$/;"	f	class:ogdf::SListPure
operator =	ogdf/basic/Stack.h	/^	Stack<E> &operator=(const Stack<E> &S) {$/;"	f	class:ogdf::Stack
operator =	ogdf/basic/Stack.h	/^	StackPure<E> &operator=(const StackPure<E> &S) {$/;"	f	class:ogdf::StackPure
operator =	ogdf/basic/String.cpp	/^String &String::operator =(const String &str)$/;"	f	class:ogdf::String
operator =	ogdf/basic/String.cpp	/^String &String::operator =(const char *str)$/;"	f	class:ogdf::String
operator =	ogdf/basic/geometry.cpp	/^DPolygon &DPolygon::operator=(const DRect &rect)$/;"	f	class:ogdf::DPolygon
operator =	ogdf/basic/geometry.h	/^	DLine &operator= (const DLine &dl) {$/;"	f	class:ogdf::DLine
operator =	ogdf/basic/geometry.h	/^	DPolygon &operator=(const DPolygon &dop) {$/;"	f	class:ogdf::DPolygon
operator =	ogdf/basic/geometry.h	/^	DPolyline &operator=(const DPolyline &dpl) {$/;"	f	class:ogdf::DPolyline
operator =	ogdf/basic/geometry.h	/^	DRect &operator= (const DRect &dr) {$/;"	f	class:ogdf::DRect
operator =	ogdf/basic/geometry.h	/^	DVector operator=(const DPoint &ip) {$/;"	f	class:ogdf::DVector
operator =	ogdf/basic/geometry.h	/^	GenericPoint operator=(const GenericPoint &ip) {$/;"	f	class:ogdf::GenericPoint
operator =	ogdf/basic/geometry.h	/^	IPolyline &operator=(const IPolyline &ipl) {$/;"	f	class:ogdf::IPolyline
operator =	ogdf/cluster/ClusterArray.h	/^	ClusterArray<T> &operator=(const ClusterArray<T> &a) {$/;"	f	class:ogdf::ClusterArray
operator =	ogdf/cluster/ClusterGraph.cpp	/^ClusterGraph &ClusterGraph::operator=(const ClusterGraph &C)$/;"	f	class:ogdf::ClusterGraph
operator =	ogdf/fileformats/DinoLineBuffer.cpp	/^	DinoLineBufferPosition::operator=(const DinoLineBufferPosition &position)$/;"	f	class:ogdf::DinoLineBufferPosition
operator =	program/settings.h	/^    FloatSetting & operator=(double newVal) {val = newVal; return *this;}$/;"	f	class:FloatSetting
operator =	program/settings.h	/^    IntSetting & operator=(int newVal) {val = newVal; return *this;}$/;"	f	class:IntSetting
operator =	program/settings.h	/^    SciNotSetting & operator=(SciNot newVal) {val = newVal; return *this;}$/;"	f	class:SciNotSetting
operator ==	graph/graphlocation.cpp	/^bool GraphLocation::operator==(GraphLocation const &other) const$/;"	f	class:GraphLocation
operator ==	graph/path.cpp	/^bool Path::operator==(Path const &other) const$/;"	f	class:Path
operator ==	ogdf/basic/Hashing.h	/^	friend bool operator==(const HashConstIterator<K,I,H> &it1,$/;"	f	class:ogdf::HashConstIterator
operator ==	ogdf/basic/List.h	/^	bool operator==(const List<E> &L) const {$/;"	f	class:ogdf::List
operator ==	ogdf/basic/List.h	/^	bool operator==(const ListConstIterator<E> &it) const {$/;"	f	class:ogdf::ListConstIterator
operator ==	ogdf/basic/List.h	/^	bool operator==(const ListIterator<E> &it) const {$/;"	f	class:ogdf::ListIterator
operator ==	ogdf/basic/List.h	/^	bool operator==(const ListPure<E> &L) const {$/;"	f	class:ogdf::ListPure
operator ==	ogdf/basic/SList.h	/^	bool operator==(const SListConstIterator<E> &it) const {$/;"	f	class:ogdf::SListConstIterator
operator ==	ogdf/basic/SList.h	/^	bool operator==(const SListIterator<E> &it) const {$/;"	f	class:ogdf::SListIterator
operator ==	ogdf/basic/String.h	/^	friend bool operator==(const String &x, const String &y) {$/;"	f	class:ogdf::String
operator ==	ogdf/basic/String.h	/^	friend bool operator==(const String &x, const char *y) {$/;"	f	class:ogdf::String
operator ==	ogdf/basic/String.h	/^	friend bool operator==(const char *x, const String &y) {$/;"	f	class:ogdf::String
operator ==	ogdf/basic/geometry.h	/^	bool operator==(const DLine &dl) const {$/;"	f	class:ogdf::DLine
operator ==	ogdf/basic/geometry.h	/^	bool operator==(const DPoint &dp) const {$/;"	f	class:ogdf::DPoint
operator ==	ogdf/basic/geometry.h	/^	bool operator==(const DRect &dr) const {$/;"	f	class:ogdf::DRect
operator ==	ogdf/basic/geometry.h	/^	bool operator==(const GenericPoint &ip) const {$/;"	f	class:ogdf::GenericPoint
operator ==	ogdf/basic/tuples.h	/^bool operator==(const Tuple2<E1,E2> &t1, const Tuple2<E1,E2> &t2)$/;"	f	namespace:ogdf
operator ==	ogdf/basic/tuples.h	/^bool operator==(const Tuple3<E1,E2,E3> &t1, const Tuple3<E1,E2,E3> &t2)$/;"	f	namespace:ogdf
operator ==	ogdf/basic/tuples.h	/^bool operator==(const Tuple4<E1,E2,E3,E4> &t1, const Tuple4<E1,E2,E3,E4> &t2)$/;"	f	namespace:ogdf
operator ==	program/scinot.cpp	/^bool SciNot::operator==(SciNot const &other) const$/;"	f	class:SciNot
operator >	ogdf/basic/String.h	/^	friend bool operator>(const String &x, const String &y) {$/;"	f	class:ogdf::String
operator >	ogdf/basic/String.h	/^	friend bool operator>(const String &x, const char *y) {$/;"	f	class:ogdf::String
operator >	ogdf/basic/String.h	/^	friend bool operator>(const char *x, const String &y) {$/;"	f	class:ogdf::String
operator >	program/scinot.cpp	/^bool SciNot::operator>(SciNot const &other) const$/;"	f	class:SciNot
operator >=	ogdf/basic/String.h	/^	friend bool operator>=(const String &x, const String &y) {$/;"	f	class:ogdf::String
operator >=	ogdf/basic/String.h	/^	friend bool operator>=(const String &x, const char *y) {$/;"	f	class:ogdf::String
operator >=	ogdf/basic/String.h	/^	friend bool operator>=(const char *x, const String &y) {$/;"	f	class:ogdf::String
operator >=	program/scinot.cpp	/^bool SciNot::operator>=(SciNot const &other) const$/;"	f	class:SciNot
operator >>	ogdf/basic/String.cpp	/^istream& operator>>(istream& is, String &str)$/;"	f	namespace:ogdf
operator >>	ogdf/energybased/Edge.h	/^	friend istream &operator>> (istream & input,  Edge & E)$/;"	f	class:ogdf::Edge
operator >>	ogdf/energybased/Node.h	/^		friend istream &operator>> (istream & input,Node & A) {$/;"	f	class:ogdf::Node
operator >>	ogdf/energybased/PackingRowInfo.h	/^		friend istream &operator>> (istream & input,  PackingRowInfo & A)$/;"	f	class:ogdf::PackingRowInfo
operator >>	ogdf/energybased/Rectangle.h	/^		friend istream &operator>> (istream & input,  Rectangle & A)$/;"	f	class:ogdf::Rectangle
operator >>	ogdf/internal/energybased/EdgeAttributes.cpp	/^istream &operator>> (istream & input,  EdgeAttributes & A)$/;"	f	namespace:ogdf
operator >>	ogdf/internal/energybased/NodeAttributes.cpp	/^istream &operator>> (istream & input,  NodeAttributes & \/* A *\/)$/;"	f	namespace:ogdf
operator >>	ogdf/internal/energybased/ParticleInfo.h	/^	friend istream &operator>> (istream & input,  ParticleInfo & A)$/;"	f	class:ogdf::ParticleInfo
operator >>	ogdf/internal/energybased/QuadTreeNodeNM.cpp	/^istream &operator>> (istream & input,  QuadTreeNodeNM & A)$/;"	f	namespace:ogdf
operator Graph &	ogdf/basic/CombinatorialEmbedding.h	/^	operator Graph &() { return *m_pGraph; }$/;"	f	class:ogdf::CombinatorialEmbedding
operator ListElement<E> *	ogdf/basic/List.h	/^	operator ListElement<E> *() { return m_pX; }$/;"	f	class:ogdf::ListIterator
operator SListElement<E> *	ogdf/basic/SList.h	/^	operator SListElement<E> *() { return m_pX; }$/;"	f	class:ogdf::SListIterator
operator SciNot	program/settings.h	/^    operator SciNot() const {return val;}$/;"	f	class:SciNotSetting
operator []	ogdf/basic/AdjEntryArray.h	/^	T &operator[](adjEntry adj) {$/;"	f	class:ogdf::AdjEntryArray
operator []	ogdf/basic/AdjEntryArray.h	/^	T &operator[](int index) {$/;"	f	class:ogdf::AdjEntryArray
operator []	ogdf/basic/AdjEntryArray.h	/^	const T &operator[](adjEntry adj) const {$/;"	f	class:ogdf::AdjEntryArray
operator []	ogdf/basic/AdjEntryArray.h	/^	const T &operator[](int index) const {$/;"	f	class:ogdf::AdjEntryArray
operator []	ogdf/basic/Array.h	/^	E &operator[](INDEX i) {$/;"	f	class:ogdf::Array
operator []	ogdf/basic/Array.h	/^	const E &operator[](INDEX i) const {$/;"	f	class:ogdf::Array
operator []	ogdf/basic/EdgeArray.h	/^	T &operator[](adjEntry adj) {$/;"	f	class:ogdf::EdgeArray
operator []	ogdf/basic/EdgeArray.h	/^	T &operator[](edge e) {$/;"	f	class:ogdf::EdgeArray
operator []	ogdf/basic/EdgeArray.h	/^	T &operator[](int index) {$/;"	f	class:ogdf::EdgeArray
operator []	ogdf/basic/EdgeArray.h	/^	const T &operator[](adjEntry adj) const {$/;"	f	class:ogdf::EdgeArray
operator []	ogdf/basic/EdgeArray.h	/^	const T &operator[](edge e) const {$/;"	f	class:ogdf::EdgeArray
operator []	ogdf/basic/EdgeArray.h	/^	const T &operator[](int index) const {$/;"	f	class:ogdf::EdgeArray
operator []	ogdf/basic/FaceArray.h	/^	T &operator[](face f) {$/;"	f	class:ogdf::FaceArray
operator []	ogdf/basic/FaceArray.h	/^	T &operator[](int index) {$/;"	f	class:ogdf::FaceArray
operator []	ogdf/basic/FaceArray.h	/^	const T &operator[](face f) const {$/;"	f	class:ogdf::FaceArray
operator []	ogdf/basic/FaceArray.h	/^	const T &operator[](int index) const {$/;"	f	class:ogdf::FaceArray
operator []	ogdf/basic/HashArray.h	/^	E &operator[](const I &i) {$/;"	f	class:ogdf::HashArray
operator []	ogdf/basic/HashArray.h	/^	const E &operator[](const I &i) const {$/;"	f	class:ogdf::HashArray
operator []	ogdf/basic/NodeArray.h	/^	T &operator[](int index) {$/;"	f	class:ogdf::NodeArray
operator []	ogdf/basic/NodeArray.h	/^	T &operator[](node v) {$/;"	f	class:ogdf::NodeArray
operator []	ogdf/basic/NodeArray.h	/^	const T &operator[](int index) const {$/;"	f	class:ogdf::NodeArray
operator []	ogdf/basic/NodeArray.h	/^	const T &operator[](node v) const {$/;"	f	class:ogdf::NodeArray
operator []	ogdf/basic/String.h	/^	char &operator[](size_t i) {$/;"	f	class:ogdf::String
operator []	ogdf/basic/String.h	/^	const char &operator[](size_t i) const {$/;"	f	class:ogdf::String
operator []	ogdf/cluster/ClusterArray.h	/^	T &operator[](cluster c) {$/;"	f	class:ogdf::ClusterArray
operator []	ogdf/cluster/ClusterArray.h	/^	T &operator[](int index) {$/;"	f	class:ogdf::ClusterArray
operator []	ogdf/cluster/ClusterArray.h	/^	const T &operator[](cluster c) const {$/;"	f	class:ogdf::ClusterArray
operator []	ogdf/cluster/ClusterArray.h	/^	const T &operator[](int index) const {$/;"	f	class:ogdf::ClusterArray
operator ^	ogdf/basic/geometry.cpp	/^double DVector::operator^(const DVector &dv) const$/;"	f	class:ogdf::DVector
operator const Graph &	ogdf/basic/CombinatorialEmbedding.h	/^	operator const Graph &() const { return *m_cpGraph; }$/;"	f	class:ogdf::CombinatorialEmbedding
operator const Graph &	ogdf/basic/CombinatorialEmbedding.h	/^	operator const Graph &() const { return *m_cpGraph; }$/;"	f	class:ogdf::ConstCombinatorialEmbedding
operator const Graph &	ogdf/cluster/ClusterGraph.h	/^	operator const Graph &() const { return *m_pGraph; }$/;"	f	class:ogdf::ClusterGraph
operator const ListElement<E> *	ogdf/basic/List.h	/^	operator const ListElement<E> *() const { return m_pX; }$/;"	f	class:ogdf::ListIterator
operator const ListElement<E> *	ogdf/basic/List.h	/^	operator const ListElement<E> *() { return m_pX; }$/;"	f	class:ogdf::ListConstIterator
operator const SListElement<E> *	ogdf/basic/SList.h	/^	operator const SListElement<E> *() const { return m_pX; }$/;"	f	class:ogdf::SListIterator
operator const SListElement<E> *	ogdf/basic/SList.h	/^	operator const SListElement<E> *() { return m_pX; }$/;"	f	class:ogdf::SListConstIterator
operator double	program/settings.h	/^    operator double() const {return val;}$/;"	f	class:FloatSetting
operator edge	ogdf/basic/Graph_d.h	/^	operator edge() const { return m_edge; }$/;"	f	class:ogdf::AdjElement
operator int	program/settings.h	/^    operator int() const {return val;}$/;"	f	class:IntSetting
opposite	ogdf/basic/Graph_d.h	/^	node opposite(node v) const { return (v == m_src) ? m_tgt : m_src; }$/;"	f	class:ogdf::EdgeElement
optionalAttributes	ogdf/fileformats/OgmlParser.cpp	/^	List<OgmlAttribute*> optionalAttributes; \/\/!< Represents the optional attributes of this object.$/;"	m	class:ogdf::OgmlParser::OgmlTag	file:
optionalTags	ogdf/fileformats/OgmlParser.cpp	/^	List<OgmlTag*> optionalTags;$/;"	m	class:ogdf::OgmlParser::OgmlTag	file:
original	ogdf/basic/GraphCopy.h	/^	const Graph &original() const { return *m_pGraph; }$/;"	f	class:ogdf::GraphCopy
original	ogdf/basic/GraphCopy.h	/^	const Graph &original() const { return *m_pGraph; }$/;"	f	class:ogdf::GraphCopySimple
original	ogdf/basic/GraphCopy.h	/^	edge original(edge e) const { return m_eOrig[e]; }$/;"	f	class:ogdf::GraphCopy
original	ogdf/basic/GraphCopy.h	/^	edge original(edge e) const { return m_eOrig[e]; }$/;"	f	class:ogdf::GraphCopySimple
original	ogdf/basic/GraphCopy.h	/^	node original(node v) const { return m_vOrig[v]; }$/;"	f	class:ogdf::GraphCopy
original	ogdf/basic/GraphCopy.h	/^	node original(node v) const { return m_vOrig[v]; }$/;"	f	class:ogdf::GraphCopySimple
outEdges	ogdf/basic/Graph_d.h	/^	void outEdges(node v, EDGELIST &edges) const {$/;"	f	class:ogdf::Graph
outdeg	ogdf/basic/Graph_d.h	/^	int outdeg() const { return m_outdeg; }$/;"	f	class:ogdf::NodeElement
outlineColour	program/settings.h	/^    QColor outlineColour;$/;"	m	class:Settings
outlineThickness	program/settings.h	/^    FloatSetting outlineThickness;$/;"	m	class:Settings
output	ogdf/fileformats/GmlParser.cpp	/^void GmlParser::output(ostream &os, GmlObject *object, int d)$/;"	f	class:ogdf::GmlParser
outputText	command_line/commoncommandlinefunctions.cpp	/^void outputText(QString text, QTextStream * out)$/;"	f
outputText	command_line/commoncommandlinefunctions.cpp	/^void outputText(QStringList text, QTextStream * out)$/;"	f
oval	ogdf/basic/GraphAttributes.h	/^		oval = 0x8001, rectangle = 0x8002$/;"	e	enum:ogdf::GraphAttributes::__anon6
ownsChoiceTags	ogdf/fileformats/OgmlParser.cpp	/^	bool ownsChoiceTags() {$/;"	f	class:ogdf::OgmlParser::OgmlTag
ownsCompulsiveTags	ogdf/fileformats/OgmlParser.cpp	/^	bool ownsCompulsiveTags() {$/;"	f	class:ogdf::OgmlParser::OgmlTag
ownsOptionalTags	ogdf/fileformats/OgmlParser.cpp	/^	bool ownsOptionalTags() {$/;"	f	class:ogdf::OgmlParser::OgmlTag
p1	ogdf/basic/geometry.h	/^	const DPoint &p1() const { return m_p1; }$/;"	f	class:ogdf::DRect
p2	ogdf/basic/geometry.h	/^	const DPoint &p2() const { return m_p2; }$/;"	f	class:ogdf::DRect
pPred	ogdf/cluster/ClusterGraph.h	/^	ClusterElement* pPred() const { return m_pPrev; }$/;"	f	class:ogdf::ClusterElement
pSucc	ogdf/cluster/ClusterGraph.h	/^	ClusterElement* pSucc() const { return m_pNext; }$/;"	f	class:ogdf::ClusterElement
pack_rectangles_using_Best_Fit_strategy	ogdf/energybased/MAARPacking.cpp	/^void MAARPacking::pack_rectangles_using_Best_Fit_strategy($/;"	f	class:ogdf::MAARPacking
pack_subGraph_drawings	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::pack_subGraph_drawings($/;"	f	class:ogdf::FMMMLayout
padN	ogdf/cluster/ClusterGraphAttributes.cpp	/^ostream& padN(ostream& os, int depth)$/;"	f	namespace:ogdf
pageFormat	ogdf/energybased/FMMMLayout.h	/^	PageFormatType pageFormat() const { return m_pageFormat; }$/;"	f	class:ogdf::FMMMLayout
pageFormat	ogdf/energybased/FMMMLayout.h	/^	void pageFormat(PageFormatType t) { m_pageFormat = t; }$/;"	f	class:ogdf::FMMMLayout
pageRatio	ogdf/energybased/FMMMLayout.h	/^	double pageRatio() const { return m_pageRatio; }$/;"	f	class:ogdf::FMMMLayout
pageRatio	ogdf/energybased/FMMMLayout.h	/^	void pageRatio(double r) {m_pageRatio = (( r > 0) ? r : 1);}$/;"	f	class:ogdf::FMMMLayout
pageSize	ogdf/basic/System.h	/^	static int pageSize() { return s_pageSize; }$/;"	f	class:ogdf::System
paint	graph/graphicsitemedge.cpp	/^void GraphicsItemEdge::paint(QPainter * painter, const QStyleOptionGraphicsItem *, QWidget *)$/;"	f	class:GraphicsItemEdge
paint	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::paint(QPainter * painter, const QStyleOptionGraphicsItem *, QWidget *)$/;"	f	class:GraphicsItemNode
paintEvent	ui/infotextwidget.cpp	/^void InfoTextWidget::paintEvent(QPaintEvent * \/*event*\/)$/;"	f	class:InfoTextWidget
paintEvent	ui/nodewidthvisualaid.cpp	/^void NodeWidthVisualAid::paintEvent(QPaintEvent * \/*event*\/)$/;"	f	class:NodeWidthVisualAid
paintEvent	ui/verticallabel.cpp	/^void VerticalLabel::paintEvent(QPaintEvent*)$/;"	f	class:VerticalLabel
parallelFreeSort	ogdf/basic/simple_graph_alg.cpp	/^void parallelFreeSort(const Graph &G, SListPure<edge> &edges)$/;"	f	namespace:ogdf
parallelFreeSortUndirected	ogdf/basic/simple_graph_alg.cpp	/^void parallelFreeSortUndirected(const Graph &G,$/;"	f	namespace:ogdf
parent	ogdf/cluster/ClusterGraph.h	/^	ClusterElement* parent(){return m_parent;}$/;"	f	class:ogdf::ClusterElement
parse	ogdf/fileformats/DinoXmlParser.cpp	/^	XmlTagObject *DinoXmlParser::parse()$/;"	f	class:ogdf::DinoXmlParser
parseImageOptions	command_line/image.cpp	/^void parseImageOptions(QStringList arguments, int * width, int * height)$/;"	f
parseInfoOptions	command_line/info.cpp	/^void parseInfoOptions(QStringList arguments, bool * tsv)$/;"	f
parseList	ogdf/fileformats/GmlParser.cpp	/^GmlObject *GmlParser::parseList(GmlObjectType closingKey,$/;"	f	class:ogdf::GmlParser
parseList	ogdf/fileformats/XmlParser.cpp	/^XmlObject *XmlParser::parseList(XmlObjectType closingKey,$/;"	f	class:ogdf::XmlParser
parseLoadOptions	command_line/load.cpp	/^void parseLoadOptions(QStringList arguments, bool * drawGraph)$/;"	f
parseQueryPathsOptions	command_line/querypaths.cpp	/^void parseQueryPathsOptions(QStringList arguments, bool * pathFasta,$/;"	f
parseSettings	command_line/commoncommandlinefunctions.cpp	/^void parseSettings(QStringList arguments)$/;"	f
particles_in_leaves	ogdf/internal/energybased/NMM.h	/^	int particles_in_leaves () const { return _particles_in_leaves; }$/;"	f	class:ogdf::NMM
particles_in_leaves	ogdf/internal/energybased/NMM.h	/^	void particles_in_leaves (int b) { _particles_in_leaves = ((b>= 1)? b : 1); }$/;"	f	class:ogdf::NMM
partition_galaxy_into_solar_systems	ogdf/energybased/Multilevel.cpp	/^inline void Multilevel::partition_galaxy_into_solar_systems($/;"	f	class:ogdf::Multilevel
pathDialogIsVisible	program/memory.h	/^    bool pathDialogIsVisible;$/;"	m	class:Memory
pathFunctionsOnFastg	tests/bandagetests.cpp	/^void BandageTests::pathFunctionsOnFastg()$/;"	f	class:BandageTests
pathFunctionsOnGfaSequencesInFasta	tests/bandagetests.cpp	/^void BandageTests::pathFunctionsOnGfaSequencesInFasta()$/;"	f	class:BandageTests
pathFunctionsOnGfaSequencesInGraph	tests/bandagetests.cpp	/^void BandageTests::pathFunctionsOnGfaSequencesInGraph()$/;"	f	class:BandageTests
pathFunctionsOnLastGraph	tests/bandagetests.cpp	/^void BandageTests::pathFunctionsOnLastGraph()$/;"	f	class:BandageTests
pathHighlightNode2	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::pathHighlightNode2(QPainter * painter,$/;"	f	class:GraphicsItemNode
pathHighlightNode3	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::pathHighlightNode3(QPainter * painter,$/;"	f	class:GraphicsItemNode
pathHighlightOutlineColour	program/settings.h	/^    QColor pathHighlightOutlineColour;$/;"	m	class:Settings
pathHighlightShadingColour	program/settings.h	/^    QColor pathHighlightShadingColour;$/;"	m	class:Settings
pathPredefKey	ogdf/fileformats/XmlParser.h	/^		positionPredefKey, pathPredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
patternPredefKey	ogdf/fileformats/GmlParser.h	/^		heightPredefKey, stipplePredefKey, patternPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
peakMemoryUsedByProcess	ogdf/basic/System.cpp	/^size_t System::peakMemoryUsedByProcess()$/;"	f	class:ogdf::System
permute	ogdf/basic/Array.h	/^	void permute() {$/;"	f	class:ogdf::Array
permute	ogdf/basic/Array.h	/^void Array<E,INDEX>::permute (INDEX l, INDEX r)$/;"	f	class:ogdf::Array
permute	ogdf/basic/List.h	/^	void permute() {$/;"	f	class:ogdf::List
permute	ogdf/basic/List.h	/^	void permute() {$/;"	f	class:ogdf::ListPure
permute	ogdf/basic/List.h	/^void ListPure<E>::permute(const int n)$/;"	f	class:ogdf::ListPure
permute	ogdf/basic/SList.h	/^	void permute() {$/;"	f	class:ogdf::SList
permute	ogdf/basic/SList.h	/^	void permute() {$/;"	f	class:ogdf::SListPure
permute	ogdf/basic/SList.h	/^void SListPure<E>::permute(const int n)$/;"	f	class:ogdf::SListPure
pfLandscape	ogdf/energybased/FMMMLayout.h	/^		pfLandscape, \/\/!< A4 landscape page.$/;"	e	enum:ogdf::FMMMLayout::PageFormatType
pfPortrait	ogdf/energybased/FMMMLayout.h	/^		pfPortrait,  \/\/!< A4 portrait page.$/;"	e	enum:ogdf::FMMMLayout::PageFormatType
pfSquare	ogdf/energybased/FMMMLayout.h	/^		pfSquare     \/\/!< Square format.$/;"	e	enum:ogdf::FMMMLayout::PageFormatType
physicalMemory	ogdf/basic/System.cpp	/^long long System::physicalMemory()$/;"	f	class:ogdf::System
pi	ogdf/basic/Math.cpp	/^	const double Math::pi     = 3.14159265358979323846;$/;"	m	class:ogdf::Math	file:
pi	ogdf/basic/Math.h	/^	static const double pi;$/;"	m	class:ogdf::Math
pi_2	ogdf/basic/Math.cpp	/^	const double Math::pi_2   = 1.57079632679489661923;$/;"	m	class:ogdf::Math	file:
pi_2	ogdf/basic/Math.h	/^	static const double pi_2;$/;"	m	class:ogdf::Math
pi_4	ogdf/basic/Math.cpp	/^	const double Math::pi_4   = 0.785398163397448309616;$/;"	m	class:ogdf::Math	file:
pi_4	ogdf/basic/Math.h	/^	static const double pi_4;$/;"	m	class:ogdf::Math
place	ogdf/internal/energybased/NodeAttributes.h	/^	void place(){placed = true;}$/;"	f	class:ogdf::NodeAttributes
placed	ogdf/internal/energybased/NodeAttributes.h	/^	bool placed;   \/\/indicates weather an initial position has been assigned to this$/;"	m	class:ogdf::NodeAttributes
point1	ogdf/fileformats/OgmlParser.cpp	/^	DPoint point1, point2;$/;"	m	struct:ogdf::OgmlParser::OgmlSegment	file:
point2	ogdf/fileformats/OgmlParser.cpp	/^	DPoint point1, point2;$/;"	m	struct:ogdf::OgmlParser::OgmlSegment	file:
pointEachNodeToItsReverseComplement	graph/assemblygraph.cpp	/^void AssemblyGraph::pointEachNodeToItsReverseComplement()$/;"	f	class:AssemblyGraph
pointPredefKey	ogdf/fileformats/GmlParser.h	/^		pointPredefKey, generalizationPredefKey, subGraphPredefKey, fillPredefKey, clusterPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
pointPredefKey	ogdf/fileformats/XmlParser.h	/^		pointPredefKey, NEXTPREDEFKEY };$/;"	e	enum:ogdf::XmlParser::PredefinedKey
pop	ogdf/basic/BoundedStack.h	/^	E pop() {$/;"	f	class:ogdf::BoundedStack
pop	ogdf/basic/Stack.h	/^	E pop() {$/;"	f	class:ogdf::Stack
pop	ogdf/basic/Stack.h	/^	E pop() {$/;"	f	class:ogdf::StackPure
popBack	ogdf/basic/List.h	/^	void popBack() {$/;"	f	class:ogdf::List
popBack	ogdf/basic/List.h	/^	void popBack() {$/;"	f	class:ogdf::ListPure
popBackRet	ogdf/basic/List.h	/^	E popBackRet() {$/;"	f	class:ogdf::List
popBackRet	ogdf/basic/List.h	/^	E popBackRet() {$/;"	f	class:ogdf::ListPure
popFront	ogdf/basic/List.h	/^	void popFront() {$/;"	f	class:ogdf::List
popFront	ogdf/basic/List.h	/^	void popFront() {$/;"	f	class:ogdf::ListPure
popFront	ogdf/basic/SList.h	/^	void popFront() {$/;"	f	class:ogdf::SList
popFront	ogdf/basic/SList.h	/^	void popFront() {$/;"	f	class:ogdf::SListPure
popFrontRet	ogdf/basic/List.h	/^	E popFrontRet() {$/;"	f	class:ogdf::List
popFrontRet	ogdf/basic/List.h	/^	E popFrontRet() {$/;"	f	class:ogdf::ListPure
popFrontRet	ogdf/basic/SList.h	/^	E popFrontRet() {$/;"	f	class:ogdf::SList
popFrontRet	ogdf/basic/SList.h	/^	E popFrontRet() {$/;"	f	class:ogdf::SListPure
pop_contained_nodes	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	node pop_contained_nodes() {return contained_nodes.popFrontRet();}$/;"	f	class:ogdf::QuadTreeNodeNM
pos	ogdf/basic/List.h	/^	int pos(ListConstIterator<E> it) const {$/;"	f	class:ogdf::List
pos	ogdf/basic/List.h	/^	int pos(ListConstIterator<E> it) const {$/;"	f	class:ogdf::ListPure
pos	ogdf/basic/SList.h	/^	int pos(SListConstIterator<E> it) const {$/;"	f	class:ogdf::SList
pos	ogdf/basic/SList.h	/^	int pos(SListConstIterator<E> it) const {$/;"	f	class:ogdf::SListPure
position	ogdf/basic/geometry.cpp	/^DPoint DPolyline::position(const double fraction, double len) const$/;"	f	class:ogdf::DPolyline
position	ogdf/internal/energybased/NodeAttributes.h	/^	DPoint position;$/;"	m	class:ogdf::NodeAttributes
positionPredefKey	ogdf/fileformats/XmlParser.h	/^		positionPredefKey, pathPredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
positionTextNodeCentre	program/settings.h	/^    bool positionTextNodeCentre;$/;"	m	class:Settings
position_in_node_set	ogdf/energybased/Set.h	/^		NodeArray<int> position_in_node_set;\/\/holds for each node of G the index of its$/;"	m	class:ogdf::Set
possiblyExpandSceneRectangle	ui/mygraphicsscene.cpp	/^void MyGraphicsScene::possiblyExpandSceneRectangle(std::vector<GraphicsItemNode *> * movedNodes)$/;"	f	class:MyGraphicsScene
postMerge	ogdf/internal/energybased/MultilevelGraph.cpp	/^bool MultilevelGraph::postMerge(NodeMerge * NM, node merged)$/;"	f	class:ogdf::MultilevelGraph
postOrder	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::postOrder() const$/;"	f	class:ogdf::ClusterGraph
postOrder	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::postOrder(cluster c,SListPure<cluster> &L) const$/;"	f	class:ogdf::ClusterGraph
postOrderPredecessor	ogdf/cluster/ClusterGraph.cpp	/^cluster ClusterGraph::postOrderPredecessor(cluster c) const$/;"	f	class:ogdf::ClusterGraph
postSpringStrength	ogdf/energybased/FMMMLayout.h	/^	double postSpringStrength() const { return m_postSpringStrength; }$/;"	f	class:ogdf::FMMMLayout
postSpringStrength	ogdf/energybased/FMMMLayout.h	/^	void postSpringStrength(double x) { m_postSpringStrength  = ((x > 0)? x : 1);}$/;"	f	class:ogdf::FMMMLayout
postStrengthOfRepForces	ogdf/energybased/FMMMLayout.h	/^	double postStrengthOfRepForces() const { return m_postStrengthOfRepForces; }$/;"	f	class:ogdf::FMMMLayout
postStrengthOfRepForces	ogdf/energybased/FMMMLayout.h	/^	void postStrengthOfRepForces(double x) {$/;"	f	class:ogdf::FMMMLayout
power	program/scinot.cpp	/^void SciNot::power(double p) {$/;"	f	class:SciNot
power_of_2	ogdf/internal/energybased/NMM.h	/^	int* power_of_2; \/\/holds the powers of 2 (for speed reasons to calculate the$/;"	m	class:ogdf::NMM
power_of_two	ogdf/internal/energybased/NMM.cpp	/^inline int NMM::power_of_two(int i)$/;"	f	class:ogdf::NMM
precision	ogdf/internal/energybased/NMM.h	/^	int  precision () const { return _precision; }$/;"	f	class:ogdf::NMM
precision	ogdf/internal/energybased/NMM.h	/^	void precision (int p) { _precision  = ((p >= 1 ) ? p : 1); }$/;"	f	class:ogdf::NMM
pred	ogdf/basic/CombinatorialEmbedding.h	/^	face pred() const { return (face)m_prev; }$/;"	f	class:ogdf::FaceElement
pred	ogdf/basic/Graph_d.h	/^	adjEntry pred() const { return (adjEntry)m_prev; }$/;"	f	class:ogdf::AdjElement
pred	ogdf/basic/Graph_d.h	/^	edge pred() const { return (edge)m_prev; }$/;"	f	class:ogdf::EdgeElement
pred	ogdf/basic/Graph_d.h	/^	node pred() const { return (node)m_prev; }$/;"	f	class:ogdf::NodeElement
pred	ogdf/basic/List.h	/^	ListConstIterator<E> pred() const { return m_pX->m_prev; }$/;"	f	class:ogdf::ListConstIterator
pred	ogdf/basic/List.h	/^	ListIterator<E> pred() const { return m_pX->m_prev; }$/;"	f	class:ogdf::ListIterator
pred	ogdf/cluster/ClusterGraph.h	/^	ClusterElement* pred() const { return (ClusterElement*)m_prev; }$/;"	f	class:ogdf::ClusterElement
prepareGraphAttributes	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::prepareGraphAttributes(GraphAttributes &GA) const$/;"	f	class:ogdf::MultilevelGraph
presortCCs	ogdf/energybased/FMMMLayout.h	/^	PreSort presortCCs() const { return m_presortCCs; }$/;"	f	class:ogdf::FMMMLayout
presortCCs	ogdf/energybased/FMMMLayout.h	/^	void presortCCs(PreSort ps) { m_presortCCs = ps; }$/;"	f	class:ogdf::FMMMLayout
presort_rectangles_by_area	ogdf/energybased/MAARPacking.cpp	/^inline void MAARPacking::presort_rectangles_by_area(List<Rectangle>& R)$/;"	f	class:ogdf::MAARPacking
presort_rectangles_by_height	ogdf/energybased/MAARPacking.cpp	/^inline void MAARPacking::presort_rectangles_by_height(List<Rectangle>& R)$/;"	f	class:ogdf::MAARPacking
presort_rectangles_by_width	ogdf/energybased/MAARPacking.cpp	/^inline void MAARPacking::presort_rectangles_by_width(List<Rectangle>& R)$/;"	f	class:ogdf::MAARPacking
prevent_oscilations	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::prevent_oscilations($/;"	f	class:ogdf::FMMMLayout
print	ogdf/basic/Array.h	/^void print(ostream &os, const Array<E,INDEX> &a, char delim = ' ')$/;"	f	namespace:ogdf
print	ogdf/basic/BoundedStack.h	/^	void print(ostream &os, char delim = ' ') const$/;"	f	class:ogdf::BoundedStack
print	ogdf/basic/List.h	/^void print(ostream &os, const List<E> &L, char delim = ' ')$/;"	f	namespace:ogdf
print	ogdf/basic/List.h	/^void print(ostream &os, const ListPure<E> &L, char delim = ' ')$/;"	f	namespace:ogdf
print	ogdf/basic/SList.h	/^void print(ostream &\/*os*\/, const SList<E> &L, char delim = ' ')$/;"	f	namespace:ogdf
print	ogdf/basic/SList.h	/^void print(ostream &os, const SListPure<E> &L, char delim = ' ')$/;"	f	namespace:ogdf
print	ogdf/basic/Stack.h	/^	void print(ostream &os, char delim = ' ') const {$/;"	f	class:ogdf::Stack
print	ogdf/basic/Stack.h	/^	void print(ostream &os, char delim = ' ') const$/;"	f	class:ogdf::StackPure
print	ogdf/fileformats/OgmlParser.cpp	/^	void print(ostream &os) const {$/;"	f	class:ogdf::OgmlParser::OgmlAttribute
printHashTable	ogdf/fileformats/DinoXmlParser.cpp	/^	void DinoXmlParser::printHashTable(ostream &os)$/;"	f	class:ogdf::DinoXmlParser
printImageUsage	command_line/image.cpp	/^void printImageUsage(QTextStream * out, bool all)$/;"	f
printInfoUsage	command_line/info.cpp	/^void printInfoUsage(QTextStream * out, bool all)$/;"	f
printLoadUsage	command_line/load.cpp	/^void printLoadUsage(QTextStream * out, bool all)$/;"	f
printOwnedAttributes	ogdf/fileformats/OgmlParser.cpp	/^	void printOwnedAttributes(ostream &os, int mode) const$/;"	f	class:ogdf::OgmlParser::OgmlTag	file:
printOwnedAttributes	ogdf/fileformats/OgmlParser.cpp	/^	void printOwnedAttributes(ostream& os) const {$/;"	f	class:ogdf::OgmlParser::OgmlTag
printOwnedTags	ogdf/fileformats/OgmlParser.cpp	/^	void printOwnedTags(ostream &os, int mode) const$/;"	f	class:ogdf::OgmlParser::OgmlTag	file:
printOwnedTags	ogdf/fileformats/OgmlParser.cpp	/^	void printOwnedTags(ostream& os) const {$/;"	f	class:ogdf::OgmlParser::OgmlTag
printQueryPathsUsage	command_line/querypaths.cpp	/^void printQueryPathsUsage(QTextStream * out, bool all)$/;"	f
printReduceUsage	command_line/reduce.cpp	/^void printReduceUsage(QTextStream * out, bool all)$/;"	f
printSpaces	ogdf/fileformats/DinoXmlParser.cpp	/^	void DinoXmlParser::printSpaces(ostream &outs, int nOfSpaces) const$/;"	f	class:ogdf::DinoXmlParser
printUsage	program/main.cpp	/^void printUsage(QTextStream * out, bool all)$/;"	f
printValidityInfo	ogdf/fileformats/OgmlParser.cpp	/^void OgmlParser::printValidityInfo(const OgmlTag & ot, const XmlTagObject & xto, int valStatus, int \/*line*\/)$/;"	f	class:ogdf::OgmlParser
printXmlTagObjectTree	ogdf/fileformats/DinoXmlParser.cpp	/^	void DinoXmlParser::printXmlTagObjectTree($/;"	f	class:ogdf::DinoXmlParser
psDecreasingArea	ogdf/energybased/FMMMLayout.h	/^        psDecreasingArea   \/\/!< Presort by decreasing area of components.$/;"	e	enum:ogdf::FMMMLayout::PreSort
psDecreasingHeight	ogdf/energybased/FMMMLayout.h	/^		psDecreasingHeight, \/\/!< Presort by decreasing height of components.$/;"	e	enum:ogdf::FMMMLayout::PreSort
psDecreasingWidth	ogdf/energybased/FMMMLayout.h	/^        psDecreasingWidth,   \/\/!< Presort by decreasing width of components.$/;"	e	enum:ogdf::FMMMLayout::PreSort
psNone	ogdf/energybased/FMMMLayout.h	/^		psNone, \/\/!< Do not presort.$/;"	e	enum:ogdf::FMMMLayout::PreSort
pullUpSubTree	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::pullUpSubTree(cluster c)$/;"	f	class:ogdf::ClusterGraph
pureNewNode	ogdf/basic/Graph.cpp	/^node Graph::pureNewNode()$/;"	f	class:ogdf::Graph
push	ogdf/basic/BoundedStack.h	/^	void push(const E &x) {$/;"	f	class:ogdf::BoundedStack
push	ogdf/basic/Stack.h	/^	void push(const E &x) {$/;"	f	class:ogdf::Stack
push	ogdf/basic/Stack.h	/^	void push(const E &x) {$/;"	f	class:ogdf::StackPure
pushAttributes	ogdf/fileformats/OgmlParser.cpp	/^	void pushAttributes(int mode, Hashing<int, OgmlAttribute> *attrib, int key, ...)$/;"	f	class:ogdf::OgmlParser::OgmlTag
pushBack	ogdf/basic/Graph_d.h	/^	void pushBack(GraphElement *pX) {$/;"	f	class:ogdf::GraphListBase
pushBack	ogdf/basic/Graph_d.h	/^	void pushBack(T *pX) {$/;"	f	class:ogdf::GraphList
pushBack	ogdf/basic/List.h	/^	ListIterator<E> pushBack(const E &x) {$/;"	f	class:ogdf::List
pushBack	ogdf/basic/List.h	/^	ListIterator<E> pushBack(const E &x) {$/;"	f	class:ogdf::ListPure
pushBack	ogdf/basic/SList.h	/^	SListIterator<E> pushBack(const E &x) {$/;"	f	class:ogdf::SList
pushBack	ogdf/basic/SList.h	/^	SListIterator<E> pushBack(const E &x) {$/;"	f	class:ogdf::SListPure
pushBack_contained_nodes	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void pushBack_contained_nodes(node v) {contained_nodes.pushBack(v);}$/;"	f	class:ogdf::QuadTreeNodeNM
pushFront	ogdf/basic/List.h	/^	ListIterator<E> pushFront(const E &x) {$/;"	f	class:ogdf::List
pushFront	ogdf/basic/List.h	/^	ListIterator<E> pushFront(const E &x) {$/;"	f	class:ogdf::ListPure
pushFront	ogdf/basic/SList.h	/^	SListIterator<E> pushFront(const E &x) {$/;"	f	class:ogdf::SList
pushFront	ogdf/basic/SList.h	/^	SListIterator<E> pushFront(const E &x) {$/;"	f	class:ogdf::SListPure
pushTags	ogdf/fileformats/OgmlParser.cpp	/^	void pushTags(int mode, Hashing<int, OgmlTag> *tag, int key, ...)$/;"	f	class:ogdf::OgmlParser::OgmlTag
pushValues	ogdf/fileformats/OgmlParser.cpp	/^	void pushValues(Hashing<int, OgmlAttributeValue> *val, int key, ...) {$/;"	f	class:ogdf::OgmlParser::OgmlAttribute
pvcAcyclicHierarchies	ogdf/basic/exceptions.h	/^		pvcAcyclicHierarchies,\/\/!< hierarchies are not acyclic$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcBiconnected	ogdf/basic/exceptions.h	/^		pvcBiconnected,         \/\/!< graph is not twoconnected$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcClusterPlanar	ogdf/basic/exceptions.h	/^		pvcClusterPlanar,     \/\/!< graph is not c-planar$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcConnected	ogdf/basic/exceptions.h	/^		pvcConnected,         \/\/!< graph is not connected$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcForest	ogdf/basic/exceptions.h	/^		pvcForest,            \/\/!< graph is not a rooted forest$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcNoCopy	ogdf/basic/exceptions.h	/^		pvcNoCopy,            \/\/!< graph is not a copy of the corresponding graph$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcOrthogonal	ogdf/basic/exceptions.h	/^		pvcOrthogonal,        \/\/!< layout is not orthogonal$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcPlanar	ogdf/basic/exceptions.h	/^		pvcPlanar,            \/\/!< graph is not planar$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcSTOP	ogdf/basic/exceptions.h	/^		pvcSTOP               \/\/ INSERT NEW CODES BEFORE pvcSTOP!$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcSelfLoop	ogdf/basic/exceptions.h	/^		pvcSelfLoop,          \/\/!< graph contains a self-loop$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcSingleSource	ogdf/basic/exceptions.h	/^		pvcSingleSource,      \/\/!< graph has not a single source$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcTree	ogdf/basic/exceptions.h	/^		pvcTree,              \/\/!< graph is not a rooted tree$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcTreeHierarchies	ogdf/basic/exceptions.h	/^		pvcTreeHierarchies,   \/\/!< hierarchies are not only trees$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcUnknown	ogdf/basic/exceptions.h	/^		pvcUnknown,$/;"	e	enum:ogdf::PreconditionViolatedCode
pvcUpwardPlanar	ogdf/basic/exceptions.h	/^		pvcUpwardPlanar,      \/\/!< graph is not upward planar$/;"	e	enum:ogdf::PreconditionViolatedCode
qualityVersusSpeed	ogdf/energybased/FMMMLayout.h	/^	QualityVsSpeed qualityVersusSpeed() const { return m_qualityVersusSpeed; }$/;"	f	class:ogdf::FMMMLayout
qualityVersusSpeed	ogdf/energybased/FMMMLayout.h	/^	void qualityVersusSpeed(QualityVsSpeed qvs) {m_qualityVersusSpeed = qvs; }$/;"	f	class:ogdf::FMMMLayout
queryCellChanged	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::queryCellChanged(int row, int column)$/;"	f	class:BlastSearchDialog
queryPathDialogIsVisible	program/memory.h	/^    bool queryPathDialogIsVisible;$/;"	m	class:Memory
queryPathHighlightNode	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::queryPathHighlightNode(QPainter * painter)$/;"	f	class:GraphicsItemNode
queryPathSelectionChangedSlot	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::queryPathSelectionChangedSlot()$/;"	f	class:BlastSearchDialog
queryPaths	program/memory.h	/^    QList<Path> queryPaths;$/;"	m	class:Memory
queryShownChanged	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::queryShownChanged()$/;"	f	class:BlastSearchDialog
queryTableSelectionChanged	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::queryTableSelectionChanged()$/;"	f	class:BlastSearchDialog
questionMark	ogdf/fileformats/DinoXmlScanner.h	/^		questionMark,		\/\/\/< ?$/;"	e	enum:ogdf::XmlToken
quicksort	ogdf/basic/Array.h	/^	inline void quicksort() {$/;"	f	class:ogdf::Array
quicksort	ogdf/basic/Array.h	/^	inline void quicksort(INDEX l, INDEX r) {$/;"	f	class:ogdf::Array
quicksort	ogdf/basic/Array.h	/^	inline void quicksort(const COMPARER &comp) {$/;"	f	class:ogdf::Array
quicksort	ogdf/basic/Array.h	/^	void quicksort(INDEX l, INDEX r, const COMPARER &comp) {$/;"	f	class:ogdf::Array
quicksort	ogdf/basic/List.h	/^	void quicksort() {$/;"	f	class:ogdf::List
quicksort	ogdf/basic/List.h	/^	void quicksort() {$/;"	f	class:ogdf::ListPure
quicksort	ogdf/basic/List.h	/^	void quicksort(const COMPARER &comp) {$/;"	f	class:ogdf::List
quicksort	ogdf/basic/List.h	/^	void quicksort(const COMPARER &comp) {$/;"	f	class:ogdf::ListPure
quicksort	ogdf/basic/SList.h	/^	void quicksort() {$/;"	f	class:ogdf::SList
quicksort	ogdf/basic/SList.h	/^	void quicksort() {$/;"	f	class:ogdf::SListPure
quicksort	ogdf/basic/SList.h	/^	void quicksort(const COMPARER &comp) {$/;"	f	class:ogdf::SList
quicksort	ogdf/basic/SList.h	/^	void quicksort(const COMPARER &comp) {$/;"	f	class:ogdf::SListPure
quicksortInt	ogdf/basic/Array.h	/^	static void quicksortInt(E *pL, E *pR, const COMPARER &comp) {$/;"	f	class:ogdf::Array
quicksortTemplate	ogdf/internal/basic/list_templates.h	/^void quicksortTemplate(LIST &L)$/;"	f	namespace:ogdf
quicksortTemplate	ogdf/internal/basic/list_templates.h	/^void quicksortTemplate(LIST &L, COMPARER &comp)$/;"	f	namespace:ogdf
quotedValue	ogdf/fileformats/DinoXmlScanner.h	/^		quotedValue,		\/\/\/< all quoted content " ... " or ' ... '$/;"	e	enum:ogdf::XmlToken
qvsBeautifulAndFast	ogdf/energybased/FMMMLayout.h	/^		qvsBeautifulAndFast,      \/\/!< Medium quality and speed.$/;"	e	enum:ogdf::FMMMLayout::QualityVsSpeed
qvsGorgeousAndEfficient	ogdf/energybased/FMMMLayout.h	/^		qvsGorgeousAndEfficient,  \/\/!< Best quality.$/;"	e	enum:ogdf::FMMMLayout::QualityVsSpeed
qvsNiceAndIncredibleSpeed	ogdf/energybased/FMMMLayout.h	/^		qvsNiceAndIncredibleSpeed \/\/!< Best speed.$/;"	e	enum:ogdf::FMMMLayout::QualityVsSpeed
radius	ogdf/energybased/FMMMLayout.h	/^	NodeArray<double> radius; \/\/!< Holds the radius of the surrounding circle for each node.$/;"	m	class:ogdf::FMMMLayout
radius	ogdf/internal/energybased/MultilevelGraph.h	/^	double radius(node v) { return m_radius[v]; }$/;"	f	class:ogdf::MultilevelGraph
radius	ogdf/internal/energybased/MultilevelGraph.h	/^	void radius(node v, double r) { m_radius[v] = r; }$/;"	f	class:ogdf::MultilevelGraph
randSeed	ogdf/energybased/FMMMLayout.h	/^	int randSeed() const {return m_randSeed;}$/;"	f	class:ogdf::FMMMLayout
randSeed	ogdf/energybased/FMMMLayout.h	/^	void randSeed(int p) { m_randSeed = ((0<=p) ? p : 1);}$/;"	f	class:ogdf::FMMMLayout
randomColourNegativeLightness	program/settings.h	/^    IntSetting randomColourNegativeLightness;$/;"	m	class:Settings
randomColourNegativeOpacity	program/settings.h	/^    IntSetting randomColourNegativeOpacity;$/;"	m	class:Settings
randomColourNegativeSaturation	program/settings.h	/^    IntSetting randomColourNegativeSaturation;$/;"	m	class:Settings
randomColourPositiveLightness	program/settings.h	/^    IntSetting randomColourPositiveLightness;$/;"	m	class:Settings
randomColourPositiveOpacity	program/settings.h	/^    IntSetting randomColourPositiveOpacity;$/;"	m	class:Settings
randomColourPositiveSaturation	program/settings.h	/^    IntSetting randomColourPositiveSaturation;$/;"	m	class:Settings
randomDouble	ogdf/basic/basic.h	/^	inline double randomDouble(double low, double high) {$/;"	f	namespace:ogdf
randomDoubleNormal	ogdf/basic/basic.h	/^	inline double randomDoubleNormal(double m, double sd)$/;"	f	namespace:ogdf
randomNumber	ogdf/basic/basic.h	/^	inline int randomNumber(int low, int high) {$/;"	f	namespace:ogdf
randomTries	ogdf/energybased/FMMMLayout.h	/^	int randomTries() const { return m_randomTries; }$/;"	f	class:ogdf::FMMMLayout
randomTries	ogdf/energybased/FMMMLayout.h	/^	void randomTries(int n) {m_randomTries = ((n>=1)? n: 1);}$/;"	f	class:ogdf::FMMMLayout
rbegin	ogdf/basic/Array.h	/^	E *rbegin() { return m_pStop-1; }$/;"	f	class:ogdf::Array
rbegin	ogdf/basic/Array.h	/^	const E *rbegin() const { return m_pStop-1; }$/;"	f	class:ogdf::Array
rbegin	ogdf/basic/Graph_d.h	/^	T *rbegin() const { return (T *)m_tail; }$/;"	f	class:ogdf::GraphList
rbegin	ogdf/basic/List.h	/^	ListIterator<E> rbegin() { return ListPure<E>::rbegin(); }$/;"	f	class:ogdf::List
rbegin	ogdf/basic/List.h	/^	ListIterator<E> rbegin() { return m_tail; }$/;"	f	class:ogdf::ListPure
rbegin	ogdf/basic/List.h	/^	const ListConstIterator<E> rbegin() const { return ListPure<E>::rbegin(); }$/;"	f	class:ogdf::List
rbegin	ogdf/basic/List.h	/^	const ListConstIterator<E> rbegin() const { return m_tail; }$/;"	f	class:ogdf::ListPure
rbegin	ogdf/basic/SList.h	/^	SListConstIterator<E> rbegin() const { return m_tail; }$/;"	f	class:ogdf::SListPure
rbegin	ogdf/basic/SList.h	/^	SListIterator<E> rbegin() { return SListPure<E>::rbegin(); }$/;"	f	class:ogdf::SList
rbegin	ogdf/basic/SList.h	/^	SListIterator<E> rbegin() { return m_tail; }$/;"	f	class:ogdf::SListPure
rbegin	ogdf/basic/SList.h	/^	const SListConstIterator<E> rbegin() const { return SListPure<E>::rbegin(); }$/;"	f	class:ogdf::SList
reInit	ogdf/basic/Constraints.h	/^	virtual void reInit()             { }$/;"	f	class:ogdf::GraphConstraints
reInit	ogdf/cluster/ClusterGraph.h	/^	virtual void reInit()            { }$/;"	f	class:ogdf::ClusterGraph
reInit	ogdf/cluster/ClusterGraph.h	/^	void reInit(Graph& G)$/;"	f	class:ogdf::ClusterGraph
reInsertAll	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::reInsertAll(std::vector<MultilevelGraph *> components)$/;"	f	class:ogdf::MultilevelGraph
reInsertGraph	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::reInsertGraph(MultilevelGraph &MLG)$/;"	f	class:ogdf::MultilevelGraph
read	ogdf/fileformats/GmlParser.cpp	/^bool GmlParser::read(Graph &G)$/;"	f	class:ogdf::GmlParser
read	ogdf/fileformats/GmlParser.cpp	/^bool GmlParser::read(Graph &G, GraphAttributes &AG)$/;"	f	class:ogdf::GmlParser
read	ogdf/fileformats/OgmlParser.cpp	/^bool OgmlParser::read($/;"	f	class:ogdf::OgmlParser
read	ogdf/fileformats/XmlParser.cpp	/^bool XmlParser::read(Graph &G)$/;"	f	class:ogdf::XmlParser
read	ogdf/fileformats/XmlParser.cpp	/^bool XmlParser::read(Graph &G, GraphAttributes &AG)$/;"	f	class:ogdf::XmlParser
readAttributedCluster	ogdf/fileformats/GmlParser.cpp	/^bool GmlParser::readAttributedCluster($/;"	f	class:ogdf::GmlParser
readCluster	ogdf/fileformats/GmlParser.cpp	/^bool GmlParser::readCluster(Graph &\/*G*\/, ClusterGraph& CG)$/;"	f	class:ogdf::GmlParser
readClusterAttributes	ogdf/fileformats/GmlParser.cpp	/^bool GmlParser::readClusterAttributes($/;"	f	class:ogdf::GmlParser
readClusterGML	ogdf/cluster/ClusterGraph.cpp	/^bool ClusterGraph::readClusterGML(const char* fileName,$/;"	f	class:ogdf::ClusterGraph
readClusterGML	ogdf/cluster/ClusterGraph.cpp	/^bool ClusterGraph::readClusterGML(istream& is,$/;"	f	class:ogdf::ClusterGraph
readClusterGML	ogdf/cluster/ClusterGraphAttributes.cpp	/^bool ClusterGraphAttributes::readClusterGML($/;"	f	class:ogdf::ClusterGraphAttributes
readClusterGraphGML	ogdf/cluster/ClusterGraphAttributes.cpp	/^bool ClusterGraphAttributes::readClusterGraphGML($/;"	f	class:ogdf::ClusterGraphAttributes
readClusterGraphOGML	ogdf/cluster/ClusterGraphAttributes.cpp	/^bool ClusterGraphAttributes::readClusterGraphOGML($/;"	f	class:ogdf::ClusterGraphAttributes
readFastaFile	graph/assemblygraph.cpp	/^void AssemblyGraph::readFastaFile(QString filename, std::vector<QString> * names, std::vector<QByteArray> *sequences)$/;"	f	class:AssemblyGraph
readGML	ogdf/basic/Graph.cpp	/^bool Graph::readGML(const char *fileName)$/;"	f	class:ogdf::Graph
readGML	ogdf/basic/Graph.cpp	/^bool Graph::readGML(istream &is)$/;"	f	class:ogdf::Graph
readGML	ogdf/basic/GraphAttributes.cpp	/^bool GraphAttributes::readGML(Graph &G, const String &fileName)$/;"	f	class:ogdf::GraphAttributes
readGML	ogdf/basic/GraphAttributes.cpp	/^bool GraphAttributes::readGML(Graph &G, istream &is)$/;"	f	class:ogdf::GraphAttributes
readLEDAGraph	ogdf/basic/Graph.cpp	/^bool Graph::readLEDAGraph(const char *fileName)$/;"	f	class:ogdf::Graph
readLEDAGraph	ogdf/basic/Graph.cpp	/^bool Graph::readLEDAGraph(istream &is)$/;"	f	class:ogdf::Graph
readLineAttribute	ogdf/fileformats/GmlParser.cpp	/^void GmlParser::readLineAttribute(GmlObject *object, DPolyline &dpl)$/;"	f	class:ogdf::GmlParser
readLineAttribute	ogdf/fileformats/XmlParser.cpp	/^void XmlParser::readLineAttribute(XmlObject *object, DPolyline &dpl)$/;"	f	class:ogdf::XmlParser
readRudy	ogdf/basic/GraphAttributes.cpp	/^bool GraphAttributes::readRudy(Graph &G, const String &fileName)$/;"	f	class:ogdf::GraphAttributes
readRudy	ogdf/basic/GraphAttributes.cpp	/^bool GraphAttributes::readRudy(Graph &G, istream &is)$/;"	f	class:ogdf::GraphAttributes
readStringUntil	ogdf/fileformats/DinoXmlScanner.cpp	/^	bool DinoXmlScanner::readStringUntil(char searchCharacter,$/;"	f	class:ogdf::DinoXmlScanner
readToEndOfLine	ogdf/basic/Graph.cpp	/^bool Graph::readToEndOfLine(istream &is)$/;"	f	class:ogdf::Graph
readXML	ogdf/basic/GraphAttributes.cpp	/^bool GraphAttributes::readXML(Graph &G, const String &fileName)$/;"	f	class:ogdf::GraphAttributes
readXML	ogdf/basic/GraphAttributes.cpp	/^bool GraphAttributes::readXML(Graph &G, istream &is)$/;"	f	class:ogdf::GraphAttributes
reassignNode	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::reassignNode(node v, cluster c)$/;"	f	class:ogdf::ClusterGraph
recalculateAllDepthsRelativeToDrawnMean	graph/assemblygraph.cpp	/^void AssemblyGraph::recalculateAllDepthsRelativeToDrawnMean()$/;"	f	class:AssemblyGraph
recalculateAllNodeWidths	graph/assemblygraph.cpp	/^void AssemblyGraph::recalculateAllNodeWidths()$/;"	f	class:AssemblyGraph
rectangle	ogdf/basic/GraphAttributes.h	/^		oval = 0x8001, rectangle = 0x8002$/;"	e	enum:ogdf::GraphAttributes::__anon6
recursiveAttributedClusterRead	ogdf/fileformats/GmlParser.cpp	/^bool GmlParser::recursiveAttributedClusterRead(GmlObject* clusterObject,$/;"	f	class:ogdf::GmlParser
recursiveClusterRead	ogdf/fileformats/GmlParser.cpp	/^bool GmlParser::recursiveClusterRead(GmlObject* clusterObject,$/;"	f	class:ogdf::GmlParser
registerArray	ogdf/basic/CombinatorialEmbedding.cpp	/^	registerArray(FaceArrayBase *pFaceArray) const$/;"	f	class:ogdf::ConstCombinatorialEmbedding
registerArray	ogdf/basic/Graph.cpp	/^ListIterator<AdjEntryArrayBase*> Graph::registerArray($/;"	f	class:ogdf::Graph
registerArray	ogdf/basic/Graph.cpp	/^ListIterator<EdgeArrayBase*> Graph::registerArray($/;"	f	class:ogdf::Graph
registerArray	ogdf/basic/Graph.cpp	/^ListIterator<NodeArrayBase*> Graph::registerArray($/;"	f	class:ogdf::Graph
registerArray	ogdf/cluster/ClusterGraph.cpp	/^ListIterator<ClusterArrayBase*> ClusterGraph::registerArray($/;"	f	class:ogdf::ClusterGraph
registerObserver	ogdf/cluster/ClusterGraph.cpp	/^ListIterator<ClusterGraphObserver*> ClusterGraph::registerObserver(ClusterGraphObserver *pObserver) const$/;"	f	class:ogdf::ClusterGraph
registerStructure	ogdf/basic/Graph.cpp	/^ListIterator<GraphObserver*> Graph::registerStructure($/;"	f	class:ogdf::Graph
reheap_bottom_up	ogdf/energybased/PQueue.h	/^	void reheap_bottom_up(int i)$/;"	f	class:ogdf::PQueue
reheap_top_down	ogdf/energybased/PQueue.h	/^	void reheap_top_down(int i)$/;"	f	class:ogdf::PQueue
reinit	ogdf/basic/AdjEntryArray.h	/^	virtual void reinit(int initTableSize) {$/;"	f	class:ogdf::AdjEntryArray
reinit	ogdf/basic/EdgeArray.h	/^	virtual void reinit(int initTableSize) {$/;"	f	class:ogdf::EdgeArray
reinit	ogdf/basic/FaceArray.h	/^	virtual void reinit(int initTableSize) {$/;"	f	class:ogdf::FaceArray
reinit	ogdf/basic/NodeArray.h	/^	virtual void reinit(int initTableSize) {$/;"	f	class:ogdf::NodeArray
reinit	ogdf/cluster/ClusterArray.h	/^	virtual void reinit(int initTableSize) {$/;"	f	class:ogdf::ClusterArray
reinitArrays	ogdf/basic/CombinatorialEmbedding.cpp	/^void ConstCombinatorialEmbedding::reinitArrays()$/;"	f	class:ogdf::ConstCombinatorialEmbedding
reinitArrays	ogdf/basic/Graph.cpp	/^void Graph::reinitArrays()$/;"	f	class:ogdf::Graph
reinitArrays	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::reinitArrays()$/;"	f	class:ogdf::ClusterGraph
reinitGraph	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::reinitGraph(const Graph &G)$/;"	f	class:ogdf::ClusterGraph
reinitStructures	ogdf/basic/Graph.cpp	/^void Graph::reinitStructures()$/;"	f	class:ogdf::Graph
remakePath	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::remakePath()$/;"	f	class:GraphicsItemNode
rememberedPath	program/memory.h	/^    QString rememberedPath;$/;"	m	class:Memory
remove	ogdf/basic/FaceSet.h	/^	void remove(face f) {$/;"	f	class:ogdf::FaceSet
remove	ogdf/basic/FaceSet.h	/^	void remove(face f) {$/;"	f	class:ogdf::FaceSetPure
removeAllGraphicsEdgesFromNode	graph/assemblygraph.cpp	/^void AssemblyGraph::removeAllGraphicsEdgesFromNode(DeBruijnNode * node, bool reverseComplement,$/;"	f	class:AssemblyGraph
removeConstraint	ogdf/basic/Constraints.h	/^	void removeConstraint(Constraint *c) { m_List.del(c->listIt); }$/;"	f	class:ogdf::GraphConstraints
removeDeg1	ogdf/basic/CombinatorialEmbedding.cpp	/^void CombinatorialEmbedding::removeDeg1(node v)$/;"	f	class:ogdf::CombinatorialEmbedding
removeEdge	graph/debruijnnode.cpp	/^void DeBruijnNode::removeEdge(DeBruijnEdge * edge)$/;"	f	class:DeBruijnNode
removeEdgePath	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::removeEdgePath(edge eOrig)$/;"	f	class:ogdf::GraphCopy
removeEdgePathEmbedded	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::removeEdgePathEmbedded($/;"	f	class:ogdf::GraphCopy
removeGraphicsItemEdges	graph/assemblygraph.cpp	/^void AssemblyGraph::removeGraphicsItemEdges(const std::vector<DeBruijnEdge *> * edges,$/;"	f	class:AssemblyGraph
removeGraphicsItemNodes	graph/assemblygraph.cpp	/^void AssemblyGraph::removeGraphicsItemNodes(const std::vector<DeBruijnNode *> * nodes,$/;"	f	class:AssemblyGraph
removeNodeAssignment	ogdf/cluster/ClusterGraph.h	/^	void removeNodeAssignment(node v)$/;"	f	class:ogdf::ClusterGraph
removeNullStringsFromList	graph/assemblygraph.cpp	/^QStringList AssemblyGraph::removeNullStringsFromList(QStringList in)$/;"	f	class:AssemblyGraph
removeOneCC	ogdf/internal/energybased/MultilevelGraph.cpp	/^MultilevelGraph * MultilevelGraph::removeOneCC(std::vector<node> &componentSubArray)$/;"	f	class:ogdf::MultilevelGraph
removeSelection	ui/mainwindow.cpp	/^void MainWindow::removeSelection()$/;"	f	class:MainWindow
removeSubGraph	ogdf/basic/GraphAttributes.h	/^	void removeSubGraph(edge e, int n) {$/;"	f	class:ogdf::GraphAttributes
removeUnnecessaryBendsHV	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::removeUnnecessaryBendsHV()$/;"	f	class:ogdf::GraphAttributes
renameQuery	blast/blastqueries.cpp	/^QString BlastQueries::renameQuery(BlastQuery * newQuery, QString newName)$/;"	f	class:BlastQueries
rend	ogdf/basic/Array.h	/^	E *rend() { return m_pStart-1; }$/;"	f	class:ogdf::Array
rend	ogdf/basic/Array.h	/^	const E *rend() const { return m_pStart-1; }$/;"	f	class:ogdf::Array
rend	ogdf/basic/List.h	/^	ListConstIterator<E> rend() const { return ListConstIterator<E>(); }$/;"	f	class:ogdf::List
rend	ogdf/basic/List.h	/^	ListConstIterator<E> rend() const { return ListConstIterator<E>(); }$/;"	f	class:ogdf::ListPure
rend	ogdf/basic/List.h	/^	ListIterator<E> rend() { return ListIterator<E>(); }$/;"	f	class:ogdf::List
rend	ogdf/basic/List.h	/^	ListIterator<E> rend() { return ListIterator<E>(); }$/;"	f	class:ogdf::ListPure
repForcesStrength	ogdf/energybased/FMMMLayout.h	/^	double repForcesStrength() const { return m_repForcesStrength; }$/;"	f	class:ogdf::FMMMLayout
repForcesStrength	ogdf/energybased/FMMMLayout.h	/^	void repForcesStrength(double x) { m_repForcesStrength =((x > 0)? x : 1);}$/;"	f	class:ogdf::FMMMLayout
rep_forces	ogdf/internal/energybased/NMM.h	/^	List<DPoint> rep_forces;	\/\/stores the rep. forces of the last iteration$/;"	m	class:ogdf::NMM
replace_multipole_exp	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void replace_multipole_exp(Array<complex<double> > &multi,int precision)$/;"	f	class:ogdf::QuadTreeNodeNM
reportError	ogdf/fileformats/DinoTools.cpp	/^	void DinoTools::reportError($/;"	f	class:ogdf::DinoTools
representsCombEmbedding	ogdf/basic/Graph_d.h	/^	bool representsCombEmbedding() const {$/;"	f	class:ogdf::Graph
representsCombEmbedding	ogdf/cluster/ClusterGraph.cpp	/^bool ClusterGraph::representsCombEmbedding()$/;"	f	class:ogdf::ClusterGraph
repulsiveForcesCalculation	ogdf/energybased/FMMMLayout.h	/^	RepulsiveForcesMethod repulsiveForcesCalculation() const {$/;"	f	class:ogdf::FMMMLayout
repulsiveForcesCalculation	ogdf/energybased/FMMMLayout.h	/^	void repulsiveForcesCalculation(RepulsiveForcesMethod rfc) {$/;"	f	class:ogdf::FMMMLayout
reregister	ogdf/basic/AdjEntryArray.h	/^	void reregister(const Graph *pG) {$/;"	f	class:ogdf::AdjEntryArrayBase
reregister	ogdf/basic/EdgeArray.h	/^	void reregister(const Graph *pG) {$/;"	f	class:ogdf::EdgeArrayBase
reregister	ogdf/basic/FaceArray.h	/^	void reregister(const ConstCombinatorialEmbedding *pE) {$/;"	f	class:ogdf::FaceArrayBase
reregister	ogdf/basic/GraphObserver.h	/^	void reregister(const Graph *pG) {$/;"	f	class:ogdf::GraphObserver
reregister	ogdf/basic/NodeArray.h	/^	void reregister(const Graph *pG) {$/;"	f	class:ogdf::NodeArrayBase
reregister	ogdf/cluster/ClusterArray.h	/^	void reregister(const ClusterGraph *pC) {$/;"	f	class:ogdf::ClusterArrayBase
reregister	ogdf/cluster/ClusterGraphObserver.h	/^	void reregister(const ClusterGraph *pCG) {$/;"	f	class:ogdf::ClusterGraphObserver
reset	graph/debruijnedge.h	/^	void reset() {m_graphicsItemEdge = 0; m_drawn = false;}$/;"	f	class:DeBruijnEdge
resetAdjEntryIndex	ogdf/basic/Graph.cpp	/^void Graph::resetAdjEntryIndex(int newIndex, int oldIndex)$/;"	f	class:ogdf::Graph
resetAllNodeColours	graph/assemblygraph.cpp	/^void AssemblyGraph::resetAllNodeColours()$/;"	f	class:AssemblyGraph
resetContiguityStatus	graph/debruijnnode.h	/^    void resetContiguityStatus() {m_contiguityStatus = NOT_CONTIGUOUS;}$/;"	f	class:DeBruijnNode
resetEdgeIdCount	ogdf/basic/Graph.cpp	/^void Graph::resetEdgeIdCount(int maxId)$/;"	f	class:ogdf::Graph
resetEdges	graph/assemblygraph.cpp	/^void AssemblyGraph::resetEdges()$/;"	f	class:AssemblyGraph
resetIndex	ogdf/basic/AdjEntryArray.h	/^	virtual void resetIndex(int newIndex, int oldIndex) {$/;"	f	class:ogdf::AdjEntryArray
resetNode	graph/debruijnnode.cpp	/^void DeBruijnNode::resetNode()$/;"	f	class:DeBruijnNode
resetNodeContiguityStatus	graph/assemblygraph.cpp	/^void AssemblyGraph::resetNodeContiguityStatus()$/;"	f	class:AssemblyGraph
resetScene	ui/mainwindow.cpp	/^void MainWindow::resetScene()$/;"	f	class:MainWindow
resize	ogdf/basic/Hashing.cpp	/^void HashingBase::resize(int newTableSize)$/;"	f	class:ogdf::HashingBase
resizeColumns	ui/mytablewidget.cpp	/^void MyTableWidget::resizeColumns()$/;"	f	class:MyTableWidget
resizeDrawing	ogdf/energybased/FMMMLayout.h	/^	bool resizeDrawing() const { return m_resizeDrawing; }$/;"	f	class:ogdf::FMMMLayout
resizeDrawing	ogdf/energybased/FMMMLayout.h	/^	void resizeDrawing(bool b) { m_resizeDrawing = b; }$/;"	f	class:ogdf::FMMMLayout
resizingScalar	ogdf/energybased/FMMMLayout.h	/^	double resizingScalar() const { return m_resizingScalar; }$/;"	f	class:ogdf::FMMMLayout
resizingScalar	ogdf/energybased/FMMMLayout.h	/^	void resizingScalar(double s) { m_resizingScalar = ((s > 0) ? s : 1);}$/;"	f	class:ogdf::FMMMLayout
restoreAllEdges	ogdf/basic/Graph.cpp	/^void Graph::restoreAllEdges()$/;"	f	class:ogdf::Graph
restoreDefaults	ui/settingsdialog.cpp	/^void SettingsDialog::restoreDefaults()$/;"	f	class:SettingsDialog
restoreEdge	ogdf/basic/Graph.cpp	/^void Graph::restoreEdge(edge e)$/;"	f	class:ogdf::Graph
restrict_force_to_comp_box	ogdf/energybased/FMMMLayout.h	/^	void restrict_force_to_comp_box(DPoint& force) {$/;"	f	class:ogdf::FMMMLayout
reverse	ogdf/basic/Graph_d.h	/^	void reverse() {$/;"	f	class:ogdf::GraphList
reverse	ogdf/basic/Graph_d.h	/^	void reverse() {$/;"	f	class:ogdf::GraphListBase
reverse	ogdf/basic/List.h	/^	void reverse() { ListPure<E>::reverse(); }$/;"	f	class:ogdf::List
reverse	ogdf/basic/List.h	/^	void reverse() {$/;"	f	class:ogdf::ListPure
reverse	ogdf/basic/SList.h	/^	void reverse() {$/;"	f	class:ogdf::SList
reverse	ogdf/basic/SList.h	/^	void reverse() {$/;"	f	class:ogdf::SListPure
reverseAdjEdges	ogdf/basic/Graph.cpp	/^void Graph::reverseAdjEdges()$/;"	f	class:ogdf::Graph
reverseAdjEdges	ogdf/basic/Graph_d.h	/^	void reverseAdjEdges(node v) {$/;"	f	class:ogdf::Graph
reverseAllEdges	ogdf/basic/Graph.cpp	/^void Graph::reverseAllEdges()$/;"	f	class:ogdf::Graph
reverseComplementLocation	graph/graphlocation.cpp	/^GraphLocation GraphLocation::reverseComplementLocation() const$/;"	f	class:GraphLocation
reverseEdge	ogdf/basic/CombinatorialEmbedding.cpp	/^void CombinatorialEmbedding::reverseEdge(edge e)$/;"	f	class:ogdf::CombinatorialEmbedding
reverseEdge	ogdf/basic/Graph.cpp	/^void Graph::reverseEdge(edge e)$/;"	f	class:ogdf::Graph
rfcExact	ogdf/energybased/FMMMLayout.h	/^		rfcExact,             \/\/!< Exact calculation.$/;"	e	enum:ogdf::FMMMLayout::RepulsiveForcesMethod
rfcGridApproximation	ogdf/energybased/FMMMLayout.h	/^		rfcGridApproximation, \/\/!< Grid approximation.$/;"	e	enum:ogdf::FMMMLayout::RepulsiveForcesMethod
rfcNMM	ogdf/energybased/FMMMLayout.h	/^		rfcNMM                \/\/!< Calculation as for new multipole method.$/;"	e	enum:ogdf::FMMMLayout::RepulsiveForcesMethod
rightFace	ogdf/basic/CombinatorialEmbedding.h	/^	face rightFace(adjEntry adj) const { return m_rightFace[adj]; }$/;"	f	class:ogdf::ConstCombinatorialEmbedding
rightLine	ogdf/basic/geometry.h	/^	const DLine rightLine() const {$/;"	f	class:ogdf::DRect
rightToLeft	ogdf/basic/geometry.h	/^	rightToLeft  \/\/!< Edges are oriented from right to left.$/;"	e	enum:ogdf::Orientation
root	ogdf/fileformats/XmlParser.h	/^	XmlObject *root() { return m_objectTree; }$/;"	f	class:ogdf::XmlParser
rootCluster	ogdf/cluster/ClusterGraph.h	/^	cluster rootCluster() const { return m_rootCluster; }$/;"	f	class:ogdf::ClusterGraph
rootClusterPredefKey	ogdf/fileformats/GmlParser.h	/^		rootClusterPredefKey, vertexPredefKey, colorPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
root_ptr	ogdf/internal/energybased/QuadTreeNM.h	/^	QuadTreeNodeNM* root_ptr; \/\/points to the root node$/;"	m	class:ogdf::QuadTreeNM
rotate_components_and_calculate_bounding_rectangles	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::rotate_components_and_calculate_bounding_rectangles($/;"	f	class:ogdf::FMMMLayout
row_index	ogdf/energybased/PackingRowInfo.h	/^		int row_index;      \/\/the index of the row (first row in packing has index 0)$/;"	m	class:ogdf::PackingRowInfo
rstrip	command_line/commoncommandlinefunctions.cpp	/^QString rstrip(const QString& str)$/;"	f
rtcPathByPath	ogdf/energybased/FMMMLayout.h	/^		rtcPathByPath,      \/\/!< Path-by-path construction.$/;"	e	enum:ogdf::FMMMLayout::ReducedTreeConstruction
rtcSubtreeBySubtree	ogdf/energybased/FMMMLayout.h	/^		rtcSubtreeBySubtree \/\/!< Subtree-by-subtree construction.$/;"	e	enum:ogdf::FMMMLayout::ReducedTreeConstruction
runBlastSearch	blast/runblastsearchworker.cpp	/^void RunBlastSearchWorker::runBlastSearch()$/;"	f	class:RunBlastSearchWorker
runBlastSearchCancelled	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::runBlastSearchCancelled()$/;"	f	class:BlastSearchDialog
runBlastSearchFinished	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::runBlastSearchFinished(QString error)$/;"	f	class:BlastSearchDialog
runBlastSearches	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::runBlastSearches(bool separateThread)$/;"	f	class:BlastSearchDialog
runBlastSearchesInThread	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::runBlastSearchesInThread()$/;"	f	class:BlastSearchDialog
runOneBlastSearch	blast/runblastsearchworker.cpp	/^QString RunBlastSearchWorker::runOneBlastSearch(SequenceType sequenceType, bool * success)$/;"	f	class:RunBlastSearchWorker
s_HPCounterFrequency	ogdf/basic/System.cpp	/^LARGE_INTEGER System::s_HPCounterFrequency;$/;"	m	class:ogdf::System	file:
s_HPCounterFrequency	ogdf/basic/System.h	/^	static LARGE_INTEGER s_HPCounterFrequency; \/\/!< Frequency of high-performance counter.$/;"	m	class:ogdf::System
s_attValues	ogdf/fileformats/OgmlParser.cpp	/^Hashing < int, OgmlParser::OgmlAttributeValue > *OgmlParser::s_attValues = 0;$/;"	m	class:ogdf::OgmlParser	file:
s_attValues	ogdf/fileformats/OgmlParser.h	/^	static Hashing<int, OgmlAttributeValue> *s_attValues;  \/\/!< Hashtable for saving all values of ogml attributes.$/;"	m	class:ogdf::OgmlParser
s_attributeNames	ogdf/fileformats/Ogml.cpp	/^	const String Ogml::s_attributeNames[ATT_NUM] =$/;"	m	class:ogdf::Ogml	file:
s_attributeNames	ogdf/fileformats/Ogml.h	/^	static const String s_attributeNames[ATT_NUM];$/;"	m	class:ogdf::Ogml
s_attributeValueNames	ogdf/fileformats/Ogml.cpp	/^	const String Ogml::s_attributeValueNames[ATT_VAL_NUM] = {$/;"	m	class:ogdf::Ogml	file:
s_attributeValueNames	ogdf/fileformats/Ogml.h	/^	static const String s_attributeValueNames[ATT_VAL_NUM];$/;"	m	class:ogdf::Ogml
s_attributes	ogdf/fileformats/OgmlParser.cpp	/^Hashing < int, OgmlParser::OgmlAttribute >      *OgmlParser::s_attributes = 0;$/;"	m	class:ogdf::OgmlParser	file:
s_attributes	ogdf/fileformats/OgmlParser.h	/^	static Hashing<int, OgmlAttribute>      *s_attributes; \/\/!< Hashtable for saving all ogml attributes.$/;"	m	class:ogdf::OgmlParser
s_blocks	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^PoolMemoryAllocator::BlockChainPtr PoolMemoryAllocator::s_blocks;$/;"	m	class:ogdf::PoolMemoryAllocator	file:
s_blocks	ogdf/internal/basic/PoolMemoryAllocator.h	/^	static BlockChainPtr s_blocks;$/;"	m	class:ogdf::PoolMemoryAllocator
s_cacheLine	ogdf/basic/System.cpp	/^int          System::s_cacheLine;$/;"	m	class:ogdf::System	file:
s_cacheLine	ogdf/basic/System.h	/^	static int          s_cacheLine;   \/\/!< Bytes in a cache line.$/;"	m	class:ogdf::System
s_cacheSize	ogdf/basic/System.cpp	/^int          System::s_cacheSize;$/;"	m	class:ogdf::System	file:
s_cacheSize	ogdf/basic/System.h	/^	static int          s_cacheSize;   \/\/!< Cache size in KBytes.$/;"	m	class:ogdf::System
s_count	ogdf/basic/basic.cpp	/^int Initialization::s_count;$/;"	m	class:ogdf::Initialization	file:
s_count	ogdf/basic/basic.h	/^	static int s_count;$/;"	m	class:ogdf::Initialization
s_cpuFeatures	ogdf/basic/System.cpp	/^unsigned int System::s_cpuFeatures;$/;"	m	class:ogdf::System	file:
s_cpuFeatures	ogdf/basic/System.h	/^	static unsigned int s_cpuFeatures; \/\/!< Supported CPU features.$/;"	m	class:ogdf::System
s_criticalSection	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^CriticalSection *PoolMemoryAllocator::s_criticalSection;$/;"	m	class:ogdf::PoolMemoryAllocator	file:
s_criticalSection	ogdf/internal/basic/PoolMemoryAllocator.h	/^	static CriticalSection *s_criticalSection;$/;"	m	class:ogdf::PoolMemoryAllocator
s_freeVectors	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^PoolMemoryAllocator::MemElemPtr PoolMemoryAllocator::s_freeVectors;$/;"	m	class:ogdf::PoolMemoryAllocator	file:
s_freeVectors	ogdf/internal/basic/PoolMemoryAllocator.h	/^	static MemElemPtr s_freeVectors;$/;"	m	class:ogdf::PoolMemoryAllocator
s_graphTypeS	ogdf/fileformats/Ogml.cpp	/^	static const String s_graphTypeS[] =$/;"	m	namespace:ogdf	file:
s_graphTypeS	ogdf/fileformats/Ogml.h	/^	static const String s_graphTypeS[];$/;"	m	class:ogdf::Ogml
s_numberOfProcessors	ogdf/basic/System.cpp	/^int          System::s_numberOfProcessors;$/;"	m	class:ogdf::System	file:
s_numberOfProcessors	ogdf/basic/System.h	/^	static int          s_numberOfProcessors; \/\/!< Number of processors (cores) available.$/;"	m	class:ogdf::System
s_ogdfInitializer	ogdf/basic/basic.h	/^static Initialization s_ogdfInitializer;$/;"	m	namespace:ogdf
s_pBuffer	ogdf/basic/String.cpp	/^char String::s_pBuffer[OGDF_STRING_BUFFER_SIZE];$/;"	m	class:ogdf::String	file:
s_pBuffer	ogdf/basic/String.h	/^	static char s_pBuffer[OGDF_STRING_BUFFER_SIZE]; \/\/!< Temporary buffer used by sprintf().$/;"	m	class:ogdf::String
s_pageSize	ogdf/basic/System.cpp	/^int          System::s_pageSize;$/;"	m	class:ogdf::System	file:
s_pageSize	ogdf/basic/System.h	/^	static int          s_pageSize;    \/\/!< The page size of virtual memory.$/;"	m	class:ogdf::System
s_pool	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^PoolMemoryAllocator::PoolElement PoolMemoryAllocator::s_pool[eTableSize];$/;"	m	class:ogdf::PoolMemoryAllocator	file:
s_pool	ogdf/internal/basic/PoolMemoryAllocator.h	/^	static PoolElement s_pool[eTableSize];$/;"	m	class:ogdf::PoolMemoryAllocator
s_prec	ogdf/basic/geometry.cpp	/^const double DPolyline::s_prec = 10000.0;$/;"	m	class:ogdf::DPolyline	file:
s_prec	ogdf/basic/geometry.h	/^	static const double s_prec; \/\/!< The conversion-precision.$/;"	m	class:ogdf::DPolyline
s_tagNames	ogdf/fileformats/Ogml.cpp	/^	const String Ogml::s_tagNames[TAG_NUM] =$/;"	m	class:ogdf::Ogml	file:
s_tagNames	ogdf/fileformats/Ogml.h	/^	static const String s_tagNames[TAG_NUM];$/;"	m	class:ogdf::Ogml
s_tags	ogdf/fileformats/OgmlParser.cpp	/^Hashing < int, OgmlParser::OgmlTag >            *OgmlParser::s_tags = 0;$/;"	m	class:ogdf::OgmlParser	file:
s_tags	ogdf/fileformats/OgmlParser.h	/^	static Hashing<int, OgmlTag>            *s_tags;       \/\/!< Hashtable for saving all ogml tags.$/;"	m	class:ogdf::OgmlParser
s_tp	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^OGDF_DECL_THREAD PoolMemoryAllocator::MemElemPtr PoolMemoryAllocator::s_tp[eTableSize];$/;"	m	class:ogdf::PoolMemoryAllocator	file:
s_tp	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^PoolMemoryAllocator::MemElemPtr PoolMemoryAllocator::s_tp[eTableSize];$/;"	m	class:ogdf::PoolMemoryAllocator	file:
s_tp	ogdf/internal/basic/PoolMemoryAllocator.h	/^	static MemElemPtr s_tp[eTableSize];$/;"	m	class:ogdf::PoolMemoryAllocator
s_tp	ogdf/internal/basic/PoolMemoryAllocator.h	/^	static OGDF_DECL_THREAD MemElemPtr s_tp[eTableSize];$/;"	m	class:ogdf::PoolMemoryAllocator
s_tpKey	ogdf/internal/basic/PoolMemoryAllocator.cpp	/^pthread_key_t PoolMemoryAllocator::s_tpKey;$/;"	m	class:ogdf::PoolMemoryAllocator	file:
s_tpKey	ogdf/internal/basic/PoolMemoryAllocator.h	/^	static pthread_key_t s_tpKey;$/;"	m	class:ogdf::PoolMemoryAllocator
saveEntireGraphToFasta	graph/assemblygraph.cpp	/^void AssemblyGraph::saveEntireGraphToFasta(QString filename)$/;"	f	class:AssemblyGraph
saveEntireGraphToFasta	ui/mainwindow.cpp	/^void MainWindow::saveEntireGraphToFasta()$/;"	f	class:MainWindow
saveEntireGraphToFastaOnlyPositiveNodes	graph/assemblygraph.cpp	/^void AssemblyGraph::saveEntireGraphToFastaOnlyPositiveNodes(QString filename)$/;"	f	class:AssemblyGraph
saveEntireGraphToFastaOnlyPositiveNodes	ui/mainwindow.cpp	/^void MainWindow::saveEntireGraphToFastaOnlyPositiveNodes()$/;"	f	class:MainWindow
saveEntireGraphToGfa	graph/assemblygraph.cpp	/^bool AssemblyGraph::saveEntireGraphToGfa(QString filename)$/;"	f	class:AssemblyGraph
saveEntireGraphToGfa	ui/mainwindow.cpp	/^void MainWindow::saveEntireGraphToGfa()$/;"	f	class:MainWindow
saveImageCurrentView	ui/mainwindow.cpp	/^void MainWindow::saveImageCurrentView()$/;"	f	class:MainWindow
saveImageEntireScene	ui/mainwindow.cpp	/^void MainWindow::saveImageEntireScene()$/;"	f	class:MainWindow
savePathToFile	ui/pathspecifydialog.cpp	/^void PathSpecifyDialog::savePathToFile()$/;"	f	class:PathSpecifyDialog
saveSelectedPathToFile	ui/mainwindow.cpp	/^void MainWindow::saveSelectedPathToFile()$/;"	f	class:MainWindow
saveSelectedSequencesToFile	ui/mainwindow.cpp	/^void MainWindow::saveSelectedSequencesToFile()$/;"	f	class:MainWindow
saveSelectedSequencesToFileActionTriggered	ui/mainwindow.cpp	/^void MainWindow::saveSelectedSequencesToFileActionTriggered()$/;"	f	class:MainWindow
saveVisibleGraphToGfa	graph/assemblygraph.cpp	/^bool AssemblyGraph::saveVisibleGraphToGfa(QString filename)$/;"	f	class:AssemblyGraph
saveVisibleGraphToGfa	ui/mainwindow.cpp	/^void MainWindow::saveVisibleGraphToGfa()$/;"	f	class:MainWindow
scFixedIterations	ogdf/energybased/FMMMLayout.h	/^		scFixedIterations,           \/\/!< Stop if fixedIterations() is reached.$/;"	e	enum:ogdf::FMMMLayout::StopCriterion
scFixedIterationsOrThreshold	ogdf/energybased/FMMMLayout.h	/^		scFixedIterationsOrThreshold \/\/!< Stop if fixedIterations() or threshold() is reached.$/;"	e	enum:ogdf::FMMMLayout::StopCriterion
scThreshold	ogdf/energybased/FMMMLayout.h	/^		scThreshold,                 \/\/!< Stop if threshold() is reached.$/;"	e	enum:ogdf::FMMMLayout::StopCriterion
scaleHeight	ogdf/basic/geometry.h	/^	double scaleHeight(double height) { return height * m_to->height()\/m_from->height(); }$/;"	f	class:ogdf::DScaler
scaleToX	ogdf/basic/geometry.h	/^	double scaleToX(double x) { return x * m_factorX + m_offsetX; }$/;"	f	class:ogdf::DScaler
scaleToY	ogdf/basic/geometry.h	/^	double scaleToY(double y) { return y * m_factorY + m_offsetY; }$/;"	f	class:ogdf::DScaler
scaleWidth	ogdf/basic/geometry.h	/^	double scaleWidth(double width)   { return width  * m_to->width() \/m_from->width();  }$/;"	f	class:ogdf::DScaler
scanf	ogdf/basic/basic.h	/^#define scanf /;"	d
scfAluru	ogdf/energybased/FMMMLayout.h	/^		scfAluru        \/\/!< According to formula by Aluru et al. (in constant time).$/;"	e	enum:ogdf::FMMMLayout::SmallestCellFinding
scfIteratively	ogdf/energybased/FMMMLayout.h	/^		scfIteratively, \/\/!< Iteratively (in constant time).$/;"	e	enum:ogdf::FMMMLayout::SmallestCellFinding
sciNotComparisons	tests/bandagetests.cpp	/^void BandageTests::sciNotComparisons()$/;"	f	class:BandageTests
search	ogdf/basic/List.h	/^	int search (const E& e) const {$/;"	f	class:ogdf::List
search	ogdf/basic/List.h	/^	int search (const E& e) const {$/;"	f	class:ogdf::ListPure
search	ogdf/basic/List.h	/^	int search (const E& e, const COMPARER &comp) const {$/;"	f	class:ogdf::List
search	ogdf/basic/List.h	/^	int search (const E& e, const COMPARER &comp) const {$/;"	f	class:ogdf::ListPure
search	ogdf/basic/SList.h	/^	int search (const E& e) const {$/;"	f	class:ogdf::SList
search	ogdf/basic/SList.h	/^	int search (const E& e) const {$/;"	f	class:ogdf::SListPure
search	ogdf/basic/SList.h	/^	int search (const E& e, const COMPARER &comp) const {$/;"	f	class:ogdf::SList
search	ogdf/basic/SList.h	/^	int search (const E& e, const COMPARER &comp) const {$/;"	f	class:ogdf::SListPure
searchEdge	ogdf/basic/Graph.cpp	/^edge Graph::searchEdge(node v, node w) const$/;"	f	class:ogdf::Graph
searchOccurred	blast/blastqueries.cpp	/^void BlastQueries::searchOccurred()$/;"	f	class:BlastQueries
segment	ogdf/basic/geometry.cpp	/^DSegment DPolygon::segment(ListConstIterator<DPoint> it) const$/;"	f	class:ogdf::DPolygon
selectAll	ui/mainwindow.cpp	/^void MainWindow::selectAll()$/;"	f	class:MainWindow
selectBasedOnContiguity	ui/mainwindow.cpp	/^void MainWindow::selectBasedOnContiguity(ContiguityStatus targetContiguityStatus)$/;"	f	class:MainWindow
selectContiguous	ui/mainwindow.cpp	/^void MainWindow::selectContiguous()$/;"	f	class:MainWindow
selectMaybeContiguous	ui/mainwindow.cpp	/^void MainWindow::selectMaybeContiguous()$/;"	f	class:MainWindow
selectNodesWithBlastHits	ui/mainwindow.cpp	/^void MainWindow::selectNodesWithBlastHits()$/;"	f	class:MainWindow
selectNone	ui/mainwindow.cpp	/^void MainWindow::selectNone()$/;"	f	class:MainWindow
selectNotContiguous	ui/mainwindow.cpp	/^void MainWindow::selectNotContiguous()$/;"	f	class:MainWindow
selectUserSpecifiedNodes	ui/mainwindow.cpp	/^void MainWindow::selectUserSpecifiedNodes()$/;"	f	class:MainWindow
selectionChanged	ui/mainwindow.cpp	/^void MainWindow::selectionChanged()$/;"	f	class:MainWindow
selectionColour	program/settings.h	/^    QColor selectionColour;$/;"	m	class:Settings
selectionThickness	program/settings.h	/^    double selectionThickness;$/;"	m	class:Settings
semiClear	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::semiClear()$/;"	f	class:ogdf::ClusterGraph
sensePredefKey	ogdf/fileformats/XmlParser.h	/^		sourcePredefKey, targetPredefKey, sensePredefKey, arrowPredefKey, LinePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
sequenceChanged	ui/enteroneblastquerydialog.cpp	/^void EnterOneBlastQueryDialog::sequenceChanged()$/;"	f	class:EnterOneBlastQueryDialog
sequenceIsMissing	graph/debruijnnode.cpp	/^bool DeBruijnNode::sequenceIsMissing() const$/;"	f	class:DeBruijnNode
set	ogdf/fileformats/DinoLineBuffer.cpp	/^	void DinoLineBufferPosition::set(int lineNumber, int lineUpdateCount, int linePosition)$/;"	f	class:ogdf::DinoLineBufferPosition
setAllEdgesExactOverlap	graph/assemblygraph.cpp	/^void AssemblyGraph::setAllEdgesExactOverlap(int overlap)$/;"	f	class:AssemblyGraph
setAllHeight	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::setAllHeight(double h)$/;"	f	class:ogdf::GraphAttributes
setAllWidth	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::setAllWidth(double w)$/;"	f	class:ogdf::GraphAttributes
setAntialiasing	ui/mygraphicsview.cpp	/^void MyGraphicsView::setAntialiasing(bool antialiasingOn)$/;"	f	class:MyGraphicsView
setAsDrawn	graph/debruijnnode.h	/^    void setAsDrawn() {m_drawn = true;}$/;"	f	class:DeBruijnNode
setAsNotDrawn	graph/debruijnnode.h	/^    void setAsNotDrawn() {m_drawn = false;}$/;"	f	class:DeBruijnNode
setAsNotSpecial	graph/debruijnnode.h	/^    void setAsNotSpecial() {m_specialNode = false;}$/;"	f	class:DeBruijnNode
setAsSearchedFor	blast/blastquery.h	/^    void setAsSearchedFor() {m_searchedFor = true;}$/;"	f	class:BlastQuery
setAsSpecial	graph/debruijnnode.h	/^    void setAsSpecial() {m_specialNode = true;}$/;"	f	class:DeBruijnNode
setClusterFillPattern	ogdf/cluster/ClusterGraphAttributes.h	/^			void setClusterFillPattern(cluster c, int i) {$/;"	f	class:ogdf::ClusterGraphAttributes
setClusterLineStyle	ogdf/cluster/ClusterGraphAttributes.h	/^			void setClusterLineStyle(cluster c, int i) {$/;"	f	class:ogdf::ClusterGraphAttributes
setColour	blast/blastquery.h	/^    void setColour(QColor newColour) {m_colour = newColour;}$/;"	f	class:BlastQuery
setColour	ui/colourbutton.cpp	/^void ColourButton::setColour(QColor newColour)$/;"	f	class:ColourButton
setControlPointLocations	graph/graphicsitemedge.cpp	/^void GraphicsItemEdge::setControlPointLocations()$/;"	f	class:GraphicsItemEdge
setCsvData	graph/debruijnnode.h	/^    void setCsvData(QStringList csvData) {m_csvData = csvData;}$/;"	f	class:DeBruijnNode
setCurrentCharacter	ogdf/fileformats/DinoLineBuffer.h	/^		inline void setCurrentCharacter(char c) {$/;"	f	class:ogdf::DinoLineBuffer
setCurrentPosition	ogdf/fileformats/DinoLineBuffer.cpp	/^	bool DinoLineBuffer::setCurrentPosition(const DinoLineBufferPosition &newPosition){$/;"	f	class:ogdf::DinoLineBuffer
setCustomColour	graph/debruijnnode.h	/^    void setCustomColour(QColor newColour) {m_customColour = newColour;}$/;"	f	class:DeBruijnNode
setCustomLabel	graph/debruijnnode.cpp	/^void DeBruijnNode::setCustomLabel(QString newLabel)$/;"	f	class:DeBruijnNode
setDepth	graph/debruijnnode.h	/^    void setDepth(double newDepth) {m_depth = newDepth;}$/;"	f	class:DeBruijnNode
setDepth	ogdf/fileformats/DinoXmlParser.h	/^		void setDepth(int newDepth){$/;"	f	struct:ogdf::XmlTagObject
setDepthRangeWidgetVisibility	ui/mainwindow.cpp	/^void MainWindow::setDepthRangeWidgetVisibility(bool visible)$/;"	f	class:MainWindow
setDepthRelativeToMeanDrawnDepth	graph/debruijnnode.h	/^    void setDepthRelativeToMeanDrawnDepth(double newVal) {m_depthRelativeToMeanDrawnDepth = newVal;}$/;"	f	class:DeBruijnNode
setEdge	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::setEdge(edge eOrig, edge eCopy){$/;"	f	class:ogdf::GraphCopy
setEndingPoints	graph/graphicsitemedge.h	/^    void setEndingPoints(QPointF endingLocation, QPointF afterEndingLocation) {m_endingLocation = endingLocation; m_afterEndingLocation = afterEndingLocation;}$/;"	f	class:GraphicsItemEdge
setError	ogdf/fileformats/GmlParser.cpp	/^void GmlParser::setError(const char *errorString)$/;"	f	class:ogdf::GmlParser
setError	ogdf/fileformats/XmlParser.cpp	/^void XmlParser::setError(const char *errorString)$/;"	f	class:ogdf::XmlParser
setExactOverlap	graph/debruijnedge.h	/^    void setExactOverlap(int overlap) {m_overlap = overlap; m_overlapType = EXACT_OVERLAP;}$/;"	f	class:DeBruijnEdge
setExternalFace	ogdf/basic/CombinatorialEmbedding.h	/^	void setExternalFace(face f) {$/;"	f	class:ogdf::ConstCombinatorialEmbedding
setFilterText	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::setFilterText()$/;"	f	class:BlastSearchDialog
setGraphScopeComboBox	ui/mainwindow.cpp	/^void MainWindow::setGraphScopeComboBox(GraphScope graphScope)$/;"	f	class:MainWindow
setGraphicsItemEdge	graph/debruijnedge.h	/^    void setGraphicsItemEdge(GraphicsItemEdge * gie) {m_graphicsItemEdge = gie;}$/;"	f	class:DeBruijnEdge
setGraphicsItemNode	graph/debruijnnode.h	/^    void setGraphicsItemNode(GraphicsItemNode * gin) {m_graphicsItemNode = gin;}$/;"	f	class:DeBruijnNode
setId	ogdf/fileformats/OgmlParser.cpp	/^	void setId(int id) {$/;"	f	class:ogdf::OgmlParser::OgmlAttribute
setId	ogdf/fileformats/OgmlParser.cpp	/^	void setId(int id) {$/;"	f	class:ogdf::OgmlParser::OgmlAttributeValue
setId	ogdf/fileformats/OgmlParser.cpp	/^	void setId(int id){$/;"	f	class:ogdf::OgmlParser::OgmlTag
setIgnoreContent	ogdf/fileformats/OgmlParser.cpp	/^	void setIgnoreContent(bool ignore) { ignoreContent = ignore; }$/;"	f	class:ogdf::OgmlParser::OgmlTag
setInfoText	ui/infotextwidget.cpp	/^void InfoTextWidget::setInfoText(QString infoText)$/;"	f	class:InfoTextWidget
setInfoTexts	ui/blasthitfiltersdialog.cpp	/^void BlastHitFiltersDialog::setInfoTexts()$/;"	f	class:BlastHitFiltersDialog
setInfoTexts	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::setInfoTexts()$/;"	f	class:BlastSearchDialog
setInfoTexts	ui/graphinfodialog.cpp	/^void GraphInfoDialog::setInfoTexts()$/;"	f	class:GraphInfoDialog
setInfoTexts	ui/mainwindow.cpp	/^void MainWindow::setInfoTexts()$/;"	f	class:MainWindow
setInfoTexts	ui/settingsdialog.cpp	/^void SettingsDialog::setInfoTexts()$/;"	f	class:SettingsDialog
setInternalStatus	ogdf/basic/Constraints.h	/^	virtual void setInternalStatus(int s) { m_Status = s; }$/;"	f	class:ogdf::Constraint
setInvalid	ogdf/fileformats/DinoXmlParser.h	/^		void setInvalid() {$/;"	f	struct:ogdf::XmlAttributeObject
setInvalid	ogdf/fileformats/DinoXmlParser.h	/^		void setInvalid() {$/;"	f	struct:ogdf::XmlTagObject
setLabels	ui/graphinfodialog.cpp	/^void GraphInfoDialog::setLabels()$/;"	f	class:GraphInfoDialog
setLabelsRecursive	ogdf/fileformats/OgmlParser.cpp	/^bool OgmlParser::setLabelsRecursive(Graph &G, ClusterGraphAttributes &CGA, XmlTagObject *root)$/;"	f	class:ogdf::OgmlParser
setLine	ogdf/fileformats/DinoXmlParser.h	/^		void setLine(int line) {$/;"	f	struct:ogdf::XmlTagObject
setMaxOccurs	ogdf/fileformats/OgmlParser.cpp	/^	void setMaxOccurs(int occurs) { maxOccurs = occurs; }$/;"	f	class:ogdf::OgmlParser::OgmlTag
setMaxValue	ui/myprogressdialog.cpp	/^void MyProgressDialog::setMaxValue(int max)$/;"	f	class:MyProgressDialog
setMinOccurs	ogdf/fileformats/OgmlParser.cpp	/^	void setMinOccurs(int occurs) { minOccurs = occurs; }$/;"	f	class:ogdf::OgmlParser::OgmlTag
setModifiers	ui/graphicsviewzoom.cpp	/^void GraphicsViewZoom::setModifiers(Qt::KeyboardModifiers modifiers)$/;"	f	class:GraphicsViewZoom
setName	blast/blastquery.h	/^    void setName(QString newName) {m_name = newName;}$/;"	f	class:BlastQuery
setName	graph/debruijnnode.h	/^    void setName(QString newName) {m_name = newName;}$/;"	f	class:DeBruijnNode
setName	ogdf/basic/Constraints.h	/^	void setName(String text) { m_Name = text; }$/;"	f	class:ogdf::Constraint
setNodeColour	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::setNodeColour()$/;"	f	class:GraphicsItemNode
setNodeColourSchemeComboBox	ui/mainwindow.cpp	/^void MainWindow::setNodeColourSchemeComboBox(NodeColourScheme nodeColourScheme)$/;"	f	class:MainWindow
setNodeCustomColour	ui/mainwindow.cpp	/^void MainWindow::setNodeCustomColour()$/;"	f	class:MainWindow
setNodeCustomLabel	ui/mainwindow.cpp	/^void MainWindow::setNodeCustomLabel()$/;"	f	class:MainWindow
setNodeDistanceWidgetVisibility	ui/mainwindow.cpp	/^void MainWindow::setNodeDistanceWidgetVisibility(bool visible)$/;"	f	class:MainWindow
setOneSettingFromWidget	ui/settingsdialog.cpp	/^void setOneSettingFromWidget(FloatSetting * setting, QDoubleSpinBox * spinBox, bool percentage) {setting->val = spinBox->value() \/ (percentage ? 100.0 : 1.0);}$/;"	f
setOneSettingFromWidget	ui/settingsdialog.cpp	/^void setOneSettingFromWidget(IntSetting * setting, QSpinBox * spinBox) {setting->val = spinBox->value();}$/;"	f
setOneSettingFromWidget	ui/settingsdialog.cpp	/^void setOneSettingFromWidget(QColor * setting, ColourButton * button) {*setting = button->m_colour;}$/;"	f
setOneSettingFromWidget	ui/settingsdialog.cpp	/^void setOneSettingFromWidget(SciNotSetting * setting, QDoubleSpinBox * coefficientSpinBox, QSpinBox * exponentSpinBox) {setting->val = SciNot(coefficientSpinBox->value(), exponentSpinBox->value());}$/;"	f
setOneSettingFromWidget	ui/settingsdialog.cpp	/^void setOneSettingFromWidget(bool * setting, QCheckBox * checkBox) {*setting = checkBox->isChecked();}$/;"	f
setOneWidgetFromSetting	ui/settingsdialog.cpp	/^void setOneWidgetFromSetting(FloatSetting * setting, QDoubleSpinBox * spinBox, bool percentage)$/;"	f
setOneWidgetFromSetting	ui/settingsdialog.cpp	/^void setOneWidgetFromSetting(IntSetting * setting, QSpinBox * spinBox)$/;"	f
setOneWidgetFromSetting	ui/settingsdialog.cpp	/^void setOneWidgetFromSetting(QColor * setting, ColourButton * button) {button->setColour(*setting);}$/;"	f
setOneWidgetFromSetting	ui/settingsdialog.cpp	/^void setOneWidgetFromSetting(SciNotSetting * setting, QDoubleSpinBox * coefficientSpinBox, QSpinBox * exponentSpinBox)$/;"	f
setOneWidgetFromSetting	ui/settingsdialog.cpp	/^void setOneWidgetFromSetting(bool * setting, QCheckBox * checkBox) {checkBox->setChecked(*setting);}$/;"	f
setOriginalEmbedding	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::setOriginalEmbedding()$/;"	f	class:ogdf::GraphCopy
setOverlap	graph/debruijnedge.h	/^    void setOverlap(int ol) {m_overlap = ol;}$/;"	f	class:DeBruijnEdge
setOverlapType	graph/debruijnedge.h	/^    void setOverlapType(EdgeOverlapType olt) {m_overlapType = olt;}$/;"	f	class:DeBruijnEdge
setPath	graph/debruijnedge.h	/^	void setPath(QString p) {m_path = p;}$/;"	f	class:DeBruijnEdge
setPathValidityUiElements	ui/pathspecifydialog.cpp	/^void PathSpecifyDialog::setPathValidityUiElements(bool pathValid)$/;"	f	class:PathSpecifyDialog
setReverseComplement	graph/debruijnedge.h	/^    void setReverseComplement(DeBruijnEdge * rc) {m_reverseComplement = rc;}$/;"	f	class:DeBruijnEdge
setReverseComplement	graph/debruijnnode.h	/^    void setReverseComplement(DeBruijnNode * rc) {m_reverseComplement = rc;}$/;"	f	class:DeBruijnNode
setRotation	ui/mygraphicsview.cpp	/^void MyGraphicsView::setRotation(double newRotation)$/;"	f	class:MyGraphicsView
setSceneRectangle	ui/mygraphicsscene.cpp	/^void MyGraphicsScene::setSceneRectangle()$/;"	f	class:MyGraphicsScene
setSelectedEdgesWidgetsVisibility	ui/mainwindow.cpp	/^void MainWindow::setSelectedEdgesWidgetsVisibility(bool visible)$/;"	f	class:MainWindow
setSelectedNodesWidgetsVisibility	ui/mainwindow.cpp	/^void MainWindow::setSelectedNodesWidgetsVisibility(bool visible)$/;"	f	class:MainWindow
setSequence	graph/debruijnnode.h	/^    void setSequence(QByteArray newSeq) {m_sequence = newSeq; m_length = m_sequence.length();}$/;"	f	class:DeBruijnNode
setSettingsFromWidgets	ui/blasthitfiltersdialog.cpp	/^void BlastHitFiltersDialog::setSettingsFromWidgets()$/;"	f	class:BlastHitFiltersDialog
setSettingsFromWidgets	ui/settingsdialog.cpp	/^void SettingsDialog::setSettingsFromWidgets()$/;"	f	class:SettingsDialog
setShown	blast/blastquery.h	/^    void setShown(bool newShown) {m_shown = newShown;}$/;"	f	class:BlastQuery
setSingleLevel	ogdf/energybased/FMMMLayout.h	/^	void setSingleLevel(bool b) {m_singleLevel = b;}$/;"	f	class:ogdf::FMMMLayout
setSpinBoxValMinAndMax	ui/blasthitfiltersdialog.cpp	/^void setSpinBoxValMinAndMax(QDoubleSpinBox * spinBox, FloatSetting setting)$/;"	f
setSpinBoxValMinAndMax	ui/blasthitfiltersdialog.cpp	/^void setSpinBoxValMinAndMax(QSpinBox * spinBox, IntSetting setting)$/;"	f
setStartingNodesWidgetVisibility	ui/mainwindow.cpp	/^void MainWindow::setStartingNodesWidgetVisibility(bool visible)$/;"	f	class:MainWindow
setStartingPoints	graph/graphicsitemedge.h	/^    void setStartingPoints(QPointF startingLocation, QPointF beforeStartingLocation) {m_startingLocation = startingLocation; m_beforeStartingLocation = beforeStartingLocation;}$/;"	f	class:GraphicsItemEdge
setTextDisplaySettings	ui/mainwindow.cpp	/^void MainWindow::setTextDisplaySettings()$/;"	f	class:MainWindow
setUiState	ui/mainwindow.cpp	/^void MainWindow::setUiState(UiState uiState)$/;"	f	class:MainWindow
setUiStep	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::setUiStep(BlastUiState blastUiState)$/;"	f	class:BlastSearchDialog
setUpdateDepth	ogdf/cluster/ClusterGraph.h	/^	void setUpdateDepth(bool b) const$/;"	f	class:ogdf::ClusterGraph
setValid	ogdf/fileformats/DinoXmlParser.h	/^		void setValid() const {$/;"	f	struct:ogdf::XmlTagObject
setValid	ogdf/fileformats/DinoXmlParser.h	/^		void setValid() {$/;"	f	struct:ogdf::XmlAttributeObject
setValue	ui/myprogressdialog.cpp	/^void MyProgressDialog::setValue(int value)$/;"	f	class:MyProgressDialog
setWeight	graph/debruijnedge.h	/^    void setWeight(int w) {m_wgt = w;}$/;"	f	class:DeBruijnEdge
setWidgetsFromSettings	ui/blasthitfiltersdialog.cpp	/^void BlastHitFiltersDialog::setWidgetsFromSettings()$/;"	f	class:BlastHitFiltersDialog
setWidgetsFromSettings	ui/mainwindow.cpp	/^void MainWindow::setWidgetsFromSettings()$/;"	f	class:MainWindow
setWidgetsFromSettings	ui/settingsdialog.cpp	/^void SettingsDialog::setWidgetsFromSettings()$/;"	f	class:SettingsDialog
setWidth	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::setWidth()$/;"	f	class:GraphicsItemNode
setZoomFactorBase	ui/graphicsviewzoom.cpp	/^void GraphicsViewZoom::setZoomFactorBase(double value)$/;"	f	class:GraphicsViewZoom
setZoomSpinBoxStep	ui/mainwindow.cpp	/^void MainWindow::setZoomSpinBoxStep()$/;"	f	class:MainWindow
set_D1	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_D1(List<QuadTreeNodeNM*>& l)  {D1 = l;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_D2	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_D2(List<QuadTreeNodeNM*>& l)  {D2 = l;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_Edge	ogdf/energybased/Edge.h	/^	void set_Edge (edge f,Graph* g_ptr) {$/;"	f	class:ogdf::Edge
set_Edge	ogdf/energybased/Edge.h	/^	void set_Edge(edge f,double i,node c) {$/;"	f	class:ogdf::Edge
set_EdgeAttributes	ogdf/internal/energybased/EdgeAttributes.h	/^	void set_EdgeAttributes(double l, edge e_orig, edge e_sub)$/;"	f	class:ogdf::EdgeAttributes
set_I	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_I(List<QuadTreeNodeNM*>& l) {I = l;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_ListIterator	ogdf/energybased/PQueue.h	/^	void set_ListIterator(ListIterator<PackingRowInfo>& it) { iterator = it; }$/;"	f	class:ogdf::HelpRecord
set_M	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_M(List<QuadTreeNodeNM*>& l)  {M = l;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_Node	ogdf/energybased/Node.h	/^		void set_Node(node v,int a) { vertex = v; value = a; }$/;"	f	class:ogdf::Node
set_NodeAttributes	ogdf/internal/energybased/NodeAttributes.h	/^	void set_NodeAttributes(double w, double h, DPoint pos,node v_low,node$/;"	f	class:ogdf::NodeAttributes
set_Sm_boxlength	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_Sm_boxlength(double l) {Sm_boxlength = l;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_Sm_center	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_Sm_center(complex<double> c) {Sm_center = c;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_Sm_downleftcorner	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_Sm_downleftcorner(DPoint dlc) {Sm_downleftcorner = dlc;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_Sm_level	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_Sm_level(int l) { Sm_level = l;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_act_ptr	ogdf/internal/energybased/QuadTreeNM.h	/^	void set_act_ptr(QuadTreeNodeNM* a_ptr) { act_ptr = a_ptr; }$/;"	f	class:ogdf::QuadTreeNM
set_angle_1	ogdf/internal/energybased/NodeAttributes.h	/^	void set_angle_1(double a) {angle_1 = a;}$/;"	f	class:ogdf::NodeAttributes
set_angle_2	ogdf/internal/energybased/NodeAttributes.h	/^	void set_angle_2(double a) {angle_2 = a;}$/;"	f	class:ogdf::NodeAttributes
set_average_ideal_edgelength	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::set_average_ideal_edgelength($/;"	f	class:ogdf::FMMMLayout
set_center	ogdf/internal/energybased/NMM.cpp	/^void NMM::set_center(QuadTreeNodeNM* act_ptr)$/;"	f	class:ogdf::NMM
set_child_lb_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_child_lb_ptr(QuadTreeNodeNM* c) {child_lb_ptr = c;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_child_lt_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_child_lt_ptr(QuadTreeNodeNM* c) {child_lt_ptr = c;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_child_rb_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_child_rb_ptr(QuadTreeNodeNM* c) {child_rb_ptr = c;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_child_rt_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_child_rt_ptr(QuadTreeNodeNM* c) {child_rt_ptr = c;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_component_index	ogdf/energybased/Rectangle.h	/^		void set_component_index (int comp_index) {component_index = comp_index;}$/;"	f	class:ogdf::Rectangle
set_contained_nodes	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_contained_nodes(List<node>&  L) {contained_nodes = L;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_contained_nodes_for_leaves	ogdf/internal/energybased/NMM.cpp	/^void NMM::set_contained_nodes_for_leaves($/;"	f	class:ogdf::NMM
set_copy_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	void set_copy_edge (edge e) {e_subgraph = e;}$/;"	f	class:ogdf::EdgeAttributes
set_copy_item	ogdf/internal/energybased/ParticleInfo.h	/^	void set_copy_item (ListIterator<ParticleInfo> it) { copy_item = it; }$/;"	f	class:ogdf::ParticleInfo
set_copy_node	ogdf/internal/energybased/NodeAttributes.h	/^	void set_copy_node (node v) {v_higher_level = v;}$/;"	f	class:ogdf::NodeAttributes
set_cross_ref_item	ogdf/internal/energybased/ParticleInfo.h	/^	void set_cross_ref_item (ListIterator<ParticleInfo> it) { cross_ref_item = it; }$/;"	f	class:ogdf::ParticleInfo
set_dedicated_pm_node	ogdf/internal/energybased/NodeAttributes.h	/^	void set_dedicated_pm_node(node v) {dedicated_pm_node = v;}$/;"	f	class:ogdf::NodeAttributes
set_dedicated_sun_distance	ogdf/internal/energybased/NodeAttributes.h	/^	void set_dedicated_sun_distance(double d) {dedicated_sun_distance = d;}$/;"	f	class:ogdf::NodeAttributes
set_dedicated_sun_node	ogdf/internal/energybased/NodeAttributes.h	/^	void set_dedicated_sun_node(node v){dedicated_sun_node = v;}$/;"	f	class:ogdf::NodeAttributes
set_father_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_father_ptr (QuadTreeNodeNM* f) { father_ptr = f;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_height	ogdf/energybased/Rectangle.h	/^		void set_height(double h) {height = h;}$/;"	f	class:ogdf::Rectangle
set_height	ogdf/internal/energybased/NodeAttributes.h	/^	void set_height(double h) {height = h;}$/;"	f	class:ogdf::NodeAttributes
set_higher_level_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	void set_higher_level_edge (edge e) { e_subgraph = e; }$/;"	f	class:ogdf::EdgeAttributes
set_higher_level_node	ogdf/internal/energybased/NodeAttributes.h	/^	void set_higher_level_node (node v) {v_higher_level = v;}$/;"	f	class:ogdf::NodeAttributes
set_initial_positions_of_planet_and_moon_nodes	ogdf/energybased/Multilevel.cpp	/^void Multilevel::set_initial_positions_of_planet_and_moon_nodes($/;"	f	class:ogdf::Multilevel
set_initial_positions_of_pm_nodes	ogdf/energybased/Multilevel.cpp	/^void Multilevel::set_initial_positions_of_pm_nodes($/;"	f	class:ogdf::Multilevel
set_initial_positions_of_sun_nodes	ogdf/energybased/Multilevel.cpp	/^void Multilevel::set_initial_positions_of_sun_nodes($/;"	f	class:ogdf::Multilevel
set_length	ogdf/internal/energybased/EdgeAttributes.h	/^	void set_length(double l) { length = l; }$/;"	f	class:ogdf::EdgeAttributes
set_locale_exp	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_locale_exp(Array<complex<double> > &local,int precision)$/;"	f	class:ogdf::QuadTreeNodeNM
set_lower_level_node	ogdf/internal/energybased/NodeAttributes.h	/^	void set_lower_level_node (node v) {v_lower_level = v;}$/;"	f	class:ogdf::NodeAttributes
set_mass	ogdf/internal/energybased/NodeAttributes.h	/^	void set_mass(int m) {mass = m;}$/;"	f	class:ogdf::NodeAttributes
set_max_height	ogdf/energybased/PackingRowInfo.h	/^		void set_max_height(double h) { max_height = h; }$/;"	f	class:ogdf::PackingRowInfo
set_multipole_exp	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_multipole_exp(Array<complex<double> > &multi,int precision)$/;"	f	class:ogdf::QuadTreeNodeNM
set_new_dlc_position	ogdf/energybased/Rectangle.h	/^		void set_new_dlc_position(DPoint dlc_pos){new_down_left_corner_position = dlc_pos;}$/;"	f	class:ogdf::Rectangle
set_old_dlc_position	ogdf/energybased/Rectangle.h	/^		void set_old_dlc_position(DPoint dlc_pos){old_down_left_corner_position = dlc_pos;}$/;"	f	class:ogdf::Rectangle
set_original_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	void set_original_edge (edge e) { e_original = e; }$/;"	f	class:ogdf::EdgeAttributes
set_original_node	ogdf/internal/energybased/NodeAttributes.h	/^	void set_original_node (node v) {v_lower_level = v;}$/;"	f	class:ogdf::NodeAttributes
set_particlenumber_in_subtree	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_particlenumber_in_subtree(int p){ subtreeparticlenumber = p;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_particlenumber_in_subtree_entries	ogdf/internal/energybased/NMM.cpp	/^void NMM::set_particlenumber_in_subtree_entries(QuadTreeNM& T)$/;"	f	class:ogdf::NMM
set_position	ogdf/internal/energybased/NodeAttributes.h	/^	void set_position(DPoint pos) {position = pos;}$/;"	f	class:ogdf::NodeAttributes
set_radii	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::set_radii(const Graph& G, NodeArray<NodeAttributes>& A)$/;"	f	class:ogdf::FMMMLayout
set_rectangle	ogdf/energybased/Rectangle.h	/^		void set_rectangle (double w, double h, double old_dlc_x_pos,double$/;"	f	class:ogdf::Rectangle
set_root_node	ogdf/internal/energybased/QuadTreeNM.h	/^	void set_root_node(QuadTreeNodeNM& r) { *root_ptr = r; }$/;"	f	class:ogdf::QuadTreeNM
set_root_ptr	ogdf/internal/energybased/QuadTreeNM.h	/^	void set_root_ptr(QuadTreeNodeNM* r_ptr) { root_ptr = r_ptr; }$/;"	f	class:ogdf::QuadTreeNM
set_row_index	ogdf/energybased/PackingRowInfo.h	/^		void set_row_index(int i) { row_index = i; }$/;"	f	class:ogdf::PackingRowInfo
set_seed	ogdf/energybased/Set.cpp	/^void Set::set_seed(int rand_seed)$/;"	f	class:ogdf::Set
set_subList_ptr	ogdf/internal/energybased/ParticleInfo.h	/^	void set_subList_ptr(List<ParticleInfo>* ptr) { subList_ptr = ptr; }$/;"	f	class:ogdf::ParticleInfo
set_subgraph_edge	ogdf/internal/energybased/EdgeAttributes.h	/^	void set_subgraph_edge (edge e) { e_subgraph = e; }$/;"	f	class:ogdf::EdgeAttributes
set_subgraph_node	ogdf/internal/energybased/NodeAttributes.h	/^	void set_subgraph_node (node v) {v_higher_level = v;}$/;"	f	class:ogdf::NodeAttributes
set_tmp_cross_ref_item	ogdf/internal/energybased/ParticleInfo.h	/^	void set_tmp_cross_ref_item(ListIterator<ParticleInfo> it) { tmp_item = it; }$/;"	f	class:ogdf::ParticleInfo
set_total_width	ogdf/energybased/PackingRowInfo.h	/^		void set_total_width(double w) { total_width = w; }$/;"	f	class:ogdf::PackingRowInfo
set_type	ogdf/internal/energybased/NodeAttributes.h	/^	void set_type(int t) {type = t;}$/;"	f	class:ogdf::NodeAttributes
set_value	ogdf/energybased/PQueue.h	/^	void set_value (double v) { value = v; }$/;"	f	class:ogdf::HelpRecord
set_vertex	ogdf/internal/energybased/ParticleInfo.h	/^	void set_vertex(node v) { vertex = v; }$/;"	f	class:ogdf::ParticleInfo
set_width	ogdf/energybased/Rectangle.h	/^		void set_width(double w) {width = w;}$/;"	f	class:ogdf::Rectangle
set_width	ogdf/internal/energybased/NodeAttributes.h	/^	void set_width(double w) {width = w;}$/;"	f	class:ogdf::NodeAttributes
set_x	ogdf/internal/energybased/NodeAttributes.h	/^	void set_x(double x) {position.m_x = x;}$/;"	f	class:ogdf::NodeAttributes
set_x_List_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_x_List_ptr(List<ParticleInfo>* x_ptr) {L_x_ptr = x_ptr;}$/;"	f	class:ogdf::QuadTreeNodeNM
set_x_y_coord	ogdf/internal/energybased/ParticleInfo.h	/^	void set_x_y_coord(double c) { x_y_coord = c; }$/;"	f	class:ogdf::ParticleInfo
set_y	ogdf/internal/energybased/NodeAttributes.h	/^	void set_y(double y) {position.m_y = y;}$/;"	f	class:ogdf::NodeAttributes
set_y_List_ptr	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	void set_y_List_ptr(List<ParticleInfo>* y_ptr) {L_y_ptr = y_ptr;}$/;"	f	class:ogdf::QuadTreeNodeNM
setupBlastQueryComboBox	ui/mainwindow.cpp	/^void MainWindow::setupBlastQueryComboBox()$/;"	f	class:MainWindow
shallowCopy	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::shallowCopy(const ClusterGraph &C)$/;"	f	class:ogdf::ClusterGraph
shape	graph/graphicsitemedge.cpp	/^QPainterPath GraphicsItemEdge::shape() const$/;"	f	class:GraphicsItemEdge
shape	graph/graphicsitemnode.cpp	/^QPainterPath GraphicsItemNode::shape() const$/;"	f	class:GraphicsItemNode
shapeNode	ogdf/basic/GraphAttributes.h	/^	int &shapeNode(node v) {$/;"	f	class:ogdf::GraphAttributes
shapeNode	ogdf/basic/GraphAttributes.h	/^	int shapeNode(node v) const {$/;"	f	class:ogdf::GraphAttributes
shiftPointSideways	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::shiftPointSideways(bool left)$/;"	f	class:GraphicsItemNode
shiftPoints	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::shiftPoints(QPointF difference)$/;"	f	class:GraphicsItemNode
shiftPointsLeft	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::shiftPointsLeft()$/;"	f	class:GraphicsItemNode
shiftPointsRight	graph/graphicsitemnode.cpp	/^void GraphicsItemNode::shiftPointsRight()$/;"	f	class:GraphicsItemNode
showEvent	ui/mainwindow.cpp	/^void MainWindow::showEvent(QShowEvent *ev)$/;"	f	class:MainWindow
showEvent	ui/mytablewidget.cpp	/^void MyTableWidget::showEvent(QShowEvent * event)$/;"	f	class:MyTableWidget
showHidePanels	ui/mainwindow.cpp	/^void MainWindow::showHidePanels()$/;"	f	class:MainWindow
showPathsDialog	ui/blastsearchdialog.cpp	/^void BlastSearchDialog::showPathsDialog(BlastQuery * query)$/;"	f	class:BlastSearchDialog
sideOfLine	ui/mygraphicsview.cpp	/^bool MyGraphicsView::sideOfLine(QPointF p, QLineF line)$/;"	f	class:MyGraphicsView
simplifyCanuNodeName	graph/assemblygraph.cpp	/^QString AssemblyGraph::simplifyCanuNodeName(QString oldName) const$/;"	f	class:AssemblyGraph
size	ogdf/basic/Array.h	/^	INDEX size() const { return m_high - m_low + 1; }$/;"	f	class:ogdf::Array
size	ogdf/basic/Array2D.h	/^	int size() const { return size1() * size2(); }$/;"	f	class:ogdf::Array2D
size	ogdf/basic/BoundedStack.h	/^	INDEX size() const { return m_pTop - (m_pStart-1); }$/;"	f	class:ogdf::BoundedStack
size	ogdf/basic/CombinatorialEmbedding.h	/^	int size() const { return m_size; }$/;"	f	class:ogdf::FaceElement
size	ogdf/basic/FaceSet.h	/^	int size() const {$/;"	f	class:ogdf::FaceSet
size	ogdf/basic/HashArray.h	/^	int size() const { return Hashing<I,E,H>::size(); }$/;"	f	class:ogdf::HashArray
size	ogdf/basic/Hashing.h	/^	int size() const { return HashingBase::size(); }$/;"	f	class:ogdf::Hashing
size	ogdf/basic/Hashing.h	/^	int size() const { return m_count; }$/;"	f	class:ogdf::HashingBase
size	ogdf/basic/List.h	/^	int size() const { return m_count; }$/;"	f	class:ogdf::List
size	ogdf/basic/List.h	/^	int size() const {$/;"	f	class:ogdf::ListPure
size	ogdf/basic/SList.h	/^	int size() const { return m_count; }$/;"	f	class:ogdf::SList
size	ogdf/basic/SList.h	/^	int size() const {$/;"	f	class:ogdf::SListPure
size	ogdf/basic/Stack.h	/^	int size() const { return m_count; }$/;"	f	class:ogdf::Stack
size1	ogdf/basic/Array2D.h	/^	int size1() const { return m_b - m_a + 1; }$/;"	f	class:ogdf::Array2D
size2	ogdf/basic/Array2D.h	/^	int size2() const { return m_lenDim2; }$/;"	f	class:ogdf::Array2D
sizeHint	ui/verticallabel.cpp	/^QSize VerticalLabel::sizeHint() const$/;"	f	class:VerticalLabel
sizePredefKey	ogdf/fileformats/XmlParser.h	/^		typePredefKey, widthPredefKey, heightPredefKey, sizePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
skipUntil	ogdf/fileformats/DinoXmlScanner.cpp	/^	bool DinoXmlScanner::skipUntil(char searchCharacter, bool skipOverSearchCharacter){$/;"	f	class:ogdf::DinoXmlScanner
skipUntilMatchingClosingBracket	ogdf/fileformats/DinoXmlScanner.cpp	/^	bool DinoXmlScanner::skipUntilMatchingClosingBracket(){$/;"	f	class:ogdf::DinoXmlScanner
skipWhitespace	ogdf/fileformats/DinoLineBuffer.cpp	/^	void DinoLineBuffer::skipWhitespace()$/;"	f	class:ogdf::DinoLineBuffer
slash	ogdf/fileformats/DinoXmlScanner.h	/^		slash,				\/\/\/< \/$/;"	e	enum:ogdf::XmlToken
slicesPerBlock	ogdf/internal/basic/PoolMemoryAllocator.h	/^	static int slicesPerBlock(__uint16 nBytes) {$/;"	f	class:ogdf::PoolMemoryAllocator
slicesPerBlock	ogdf/internal/basic/PoolMemoryAllocator.h	/^	static int slicesPerBlock(__uint16 nBytes, int &nWords) {$/;"	f	class:ogdf::PoolMemoryAllocator
slope	ogdf/basic/geometry.h	/^	double slope() const { return (dx() == 0) ? DBL_MAX : dy()\/dx(); }$/;"	f	class:ogdf::DLine
sort	ogdf/basic/Graph_d.h	/^	void sort(const LIST &newOrder) {$/;"	f	class:ogdf::GraphListBase
sort	ogdf/basic/Graph_d.h	/^	void sort(const T_LIST &newOrder) {$/;"	f	class:ogdf::GraphList
sort	ogdf/basic/Graph_d.h	/^	void sort(node v, const ADJ_ENTRY_LIST &newOrder) {$/;"	f	class:ogdf::Graph
source	ogdf/basic/Graph_d.h	/^	node source() const { return m_src; }$/;"	f	class:ogdf::EdgeElement
sourcePredefKey	ogdf/fileformats/GmlParser.h	/^		sourcePredefKey, targetPredefKey, arrowPredefKey, LinePredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
sourcePredefKey	ogdf/fileformats/XmlParser.h	/^		sourcePredefKey, targetPredefKey, sensePredefKey, arrowPredefKey, LinePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
spadesToGfa	tests/bandagetests.cpp	/^void BandageTests::spadesToGfa()$/;"	f	class:BandageTests
split	ogdf/basic/CombinatorialEmbedding.cpp	/^edge CombinatorialEmbedding::split(edge e)$/;"	f	class:ogdf::CombinatorialEmbedding
split	ogdf/basic/Graph.cpp	/^edge Graph::split(edge e)$/;"	f	class:ogdf::Graph
split	ogdf/basic/GraphCopy.cpp	/^edge GraphCopy::split(edge e)$/;"	f	class:ogdf::GraphCopy
split	ogdf/basic/List.h	/^	void split(ListIterator<E> it,List<E> &L1,List<E> &L2,Direction dir = before) {$/;"	f	class:ogdf::List
split	ogdf/basic/List.h	/^	void split(ListIterator<E> it,ListPure<E> &L1,ListPure<E> &L2,Direction dir = before) {$/;"	f	class:ogdf::ListPure
splitAfter	ogdf/basic/List.h	/^	void splitAfter(ListIterator<E> it, ListPure<E> &L2) {$/;"	f	class:ogdf::ListPure
splitBefore	ogdf/basic/List.h	/^	void splitBefore(ListIterator<E> it, ListPure<E> &L2) {$/;"	f	class:ogdf::ListPure
splitCsv	graph/assemblygraph.cpp	/^QStringList AssemblyGraph::splitCsv(QString line, QString sep)$/;"	f	class:AssemblyGraph
splitFace	ogdf/basic/CombinatorialEmbedding.cpp	/^edge CombinatorialEmbedding::splitFace(adjEntry adjSrc, adjEntry adjTgt)$/;"	f	class:ogdf::CombinatorialEmbedding
splitFace	ogdf/basic/CombinatorialEmbedding.cpp	/^edge CombinatorialEmbedding::splitFace(adjEntry adjSrc, node v)$/;"	f	class:ogdf::CombinatorialEmbedding
splitFace	ogdf/basic/CombinatorialEmbedding.cpp	/^edge CombinatorialEmbedding::splitFace(node v, adjEntry adjTgt)$/;"	f	class:ogdf::CombinatorialEmbedding
splitIntoComponents	ogdf/internal/energybased/MultilevelGraph.cpp	/^std::vector<MultilevelGraph *> MultilevelGraph::splitIntoComponents()$/;"	f	class:ogdf::MultilevelGraph
splitNode	ogdf/basic/CombinatorialEmbedding.cpp	/^node CombinatorialEmbedding::splitNode(adjEntry adjStartLeft, adjEntry adjStartRight)$/;"	f	class:ogdf::CombinatorialEmbedding
splitNode	ogdf/basic/Graph.cpp	/^node Graph::splitNode(adjEntry adjStartLeft, adjEntry adjStartRight)$/;"	f	class:ogdf::Graph
split_in_x_direction	ogdf/internal/energybased/NMM.cpp	/^void NMM::split_in_x_direction($/;"	f	class:ogdf::NMM
split_in_y_direction	ogdf/internal/energybased/NMM.cpp	/^void NMM::split_in_y_direction($/;"	f	class:ogdf::NMM
springStrength	ogdf/energybased/FMMMLayout.h	/^	double springStrength() const { return m_springStrength; }$/;"	f	class:ogdf::FMMMLayout
springStrength	ogdf/energybased/FMMMLayout.h	/^	void springStrength(double x) { m_springStrength  = ((x > 0)? x : 1);}$/;"	f	class:ogdf::FMMMLayout
sprintf	ogdf/basic/String.cpp	/^void String::sprintf(const char *format, ...)$/;"	f	class:ogdf::String
sprintf	ogdf/basic/basic.h	/^inline int sprintf(char *buffer, size_t sizeOfBuffer, const char *format, ...)$/;"	f	namespace:ogdf
sprintf	ogdf/basic/basic.h	/^inline int sprintf(char *buffer, size_t, const char *format, ...)$/;"	f	namespace:ogdf
sscanf	ogdf/basic/basic.h	/^#define sscanf /;"	d
start	ogdf/basic/geometry.h	/^	const DPoint &start() const { return m_start; }$/;"	f	class:ogdf::DLine
startOfNode	graph/graphlocation.cpp	/^GraphLocation GraphLocation::startOfNode(DeBruijnNode * node)$/;"	f	class:GraphLocation
start_at_root	ogdf/internal/energybased/QuadTreeNM.h	/^	void start_at_root()$/;"	f	class:ogdf::QuadTreeNM
startingNodes	program/settings.h	/^    QString startingNodes;$/;"	m	class:Settings
startingNodesExactMatch	program/settings.h	/^    bool startingNodesExactMatch;$/;"	m	class:Settings
startingNodesExactMatchChanged	ui/mainwindow.cpp	/^void MainWindow::startingNodesExactMatchChanged()$/;"	f	class:MainWindow
stepsForRotatingComponents	ogdf/energybased/FMMMLayout.h	/^	int stepsForRotatingComponents() const { return m_stepsForRotatingComponents; }$/;"	f	class:ogdf::FMMMLayout
stepsForRotatingComponents	ogdf/energybased/FMMMLayout.h	/^	void stepsForRotatingComponents(int n) {$/;"	f	class:ogdf::FMMMLayout
stipplePredefKey	ogdf/fileformats/GmlParser.h	/^		heightPredefKey, stipplePredefKey, patternPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
stopCriterion	ogdf/energybased/FMMMLayout.h	/^	StopCriterion stopCriterion() const { return m_stopCriterion; }$/;"	f	class:ogdf::FMMMLayout
stopCriterion	ogdf/energybased/FMMMLayout.h	/^	void stopCriterion(StopCriterion rsc) { m_stopCriterion = rsc; }$/;"	f	class:ogdf::FMMMLayout
storeToOgml	ogdf/basic/Constraint.cpp	/^bool Constraint::storeToOgml(int \/*id*\/, ostream & \/*os*\/, int \/*indentStep*\/)$/;"	f	class:ogdf::Constraint
strcat	ogdf/basic/basic.h	/^inline int strcat(char *strDest, size_t sizeOfDest, const char *strSource)$/;"	f	namespace:ogdf
strcat	ogdf/basic/basic.h	/^inline int strcat(char *strDest, size_t, const char *strSource)$/;"	f	namespace:ogdf
strcpy	ogdf/basic/basic.h	/^inline int strcpy(char *strDest, size_t sizeOfDest, const char *strSource)$/;"	f	namespace:ogdf
strcpy	ogdf/basic/basic.h	/^inline int strcpy(char *strDest, size_t, const char *strSource)$/;"	f	namespace:ogdf
stringToDoubleArray	ogdf/fileformats/DinoTools.cpp	/^	void DinoTools::stringToDoubleArray(const String &str, Array<double> &doubleArray)$/;"	f	class:ogdf::DinoTools
strncpy	ogdf/basic/basic.h	/^inline int strncpy(char *strDest, size_t sizeOfDest, const char *strSource, size_t count)$/;"	f	namespace:ogdf
strncpy	ogdf/basic/basic.h	/^inline int strncpy(char *strDest, size_t, const char *strSource, size_t count)$/;"	f	namespace:ogdf
strongComponents	ogdf/basic/simple_graph_alg.cpp	/^int strongComponents(const Graph& G, NodeArray<int>& component)$/;"	f	namespace:ogdf
strtok	ogdf/basic/basic.h	/^inline char *strtok(char *strToken, const char *strDelimit)$/;"	f	namespace:ogdf
styleEdge	ogdf/basic/GraphAttributes.h	/^	EdgeStyle &styleEdge(edge e) {$/;"	f	class:ogdf::GraphAttributes
styleEdge	ogdf/basic/GraphAttributes.h	/^	const EdgeStyle &styleEdge(edge e) const {$/;"	f	class:ogdf::GraphAttributes
styleNode	ogdf/basic/GraphAttributes.h	/^	EdgeStyle &styleNode(node v) {$/;"	f	class:ogdf::GraphAttributes
styleNode	ogdf/basic/GraphAttributes.h	/^	const EdgeStyle &styleNode(node v) const {$/;"	f	class:ogdf::GraphAttributes
subGraphBits	ogdf/basic/GraphAttributes.h	/^	const unsigned int &subGraphBits(edge e) const {$/;"	f	class:ogdf::GraphAttributes
subGraphBits	ogdf/basic/GraphAttributes.h	/^	unsigned int &subGraphBits(edge e) {$/;"	f	class:ogdf::GraphAttributes
subGraphPredefKey	ogdf/fileformats/GmlParser.h	/^		pointPredefKey, generalizationPredefKey, subGraphPredefKey, fillPredefKey, clusterPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
subList_ptr	ogdf/internal/energybased/ParticleInfo.h	/^	List<ParticleInfo>*  subList_ptr;	\/\/points to the subList of L_x(L_y) where the$/;"	m	class:ogdf::ParticleInfo
subtreeparticlenumber	ogdf/internal/energybased/QuadTreeNodeNM.h	/^	int subtreeparticlenumber;         \/\/the number of particles in the subtree rooted$/;"	m	class:ogdf::QuadTreeNodeNM
succ	ogdf/basic/CombinatorialEmbedding.h	/^	face succ() const { return (face)m_next; }$/;"	f	class:ogdf::FaceElement
succ	ogdf/basic/Graph_d.h	/^	adjEntry succ() const { return (adjEntry)m_next; }$/;"	f	class:ogdf::AdjElement
succ	ogdf/basic/Graph_d.h	/^	edge succ() const { return (edge)m_next; }$/;"	f	class:ogdf::EdgeElement
succ	ogdf/basic/Graph_d.h	/^	node succ() const { return (node)m_next; }$/;"	f	class:ogdf::NodeElement
succ	ogdf/basic/List.h	/^	ListConstIterator<E> succ() const { return m_pX->m_next; }$/;"	f	class:ogdf::ListConstIterator
succ	ogdf/basic/List.h	/^	ListIterator<E> succ() const { return m_pX->m_next; }$/;"	f	class:ogdf::ListIterator
succ	ogdf/basic/SList.h	/^	SListConstIterator<E> succ() const { return m_pX->m_next; }$/;"	f	class:ogdf::SListConstIterator
succ	ogdf/basic/SList.h	/^	SListIterator<E> succ() const { return m_pX->m_next; }$/;"	f	class:ogdf::SListIterator
succ	ogdf/cluster/ClusterGraph.h	/^	ClusterElement* succ() const { return (ClusterElement*)m_next; }$/;"	f	class:ogdf::ClusterElement
swap	ogdf/basic/Array.h	/^	void swap(INDEX i, INDEX j) {$/;"	f	class:ogdf::Array
swap	ogdf/basic/Graph_d.h	/^	void swap(GraphElement *pX, GraphElement *pY) {$/;"	f	class:ogdf::GraphListBase
swap	ogdf/basic/Graph_d.h	/^	void swap(T *pX, T *pY) {$/;"	f	class:ogdf::GraphList
swapAdjEdges	ogdf/basic/Graph_d.h	/^	void swapAdjEdges(adjEntry adj1, adjEntry adj2) {$/;"	f	class:ogdf::Graph
switchColourScheme	ui/mainwindow.cpp	/^void MainWindow::switchColourScheme()$/;"	f	class:MainWindow
t_bool	ogdf/fileformats/Ogml.h	/^		t_bool,$/;"	e	enum:ogdf::Ogml::TagId
t_composed	ogdf/fileformats/Ogml.h	/^		t_composed,$/;"	e	enum:ogdf::Ogml::TagId
t_constraint	ogdf/fileformats/Ogml.h	/^		t_constraint,$/;"	e	enum:ogdf::Ogml::TagId
t_constraints	ogdf/fileformats/Ogml.h	/^		t_constraints,$/;"	e	enum:ogdf::Ogml::TagId
t_content	ogdf/fileformats/Ogml.h	/^		t_content,$/;"	e	enum:ogdf::Ogml::TagId
t_data	ogdf/fileformats/Ogml.h	/^		t_data,$/;"	e	enum:ogdf::Ogml::TagId
t_default	ogdf/fileformats/Ogml.h	/^		t_default,$/;"	e	enum:ogdf::Ogml::TagId
t_edge	ogdf/fileformats/Ogml.h	/^		t_edge,$/;"	e	enum:ogdf::Ogml::TagId
t_edgeRef	ogdf/fileformats/Ogml.h	/^		t_edgeRef,$/;"	e	enum:ogdf::Ogml::TagId
t_edgeStyle	ogdf/fileformats/Ogml.h	/^		t_edgeStyle,$/;"	e	enum:ogdf::Ogml::TagId
t_edgeStyleTemplate	ogdf/fileformats/Ogml.h	/^		t_edgeStyleTemplate,$/;"	e	enum:ogdf::Ogml::TagId
t_edgeStyleTemplateRef	ogdf/fileformats/Ogml.h	/^		t_edgeStyleTemplateRef,		\/\/!< tag template within tag edgeStyle\/-Template$/;"	e	enum:ogdf::Ogml::TagId
t_endpoint	ogdf/fileformats/Ogml.h	/^		t_endpoint,$/;"	e	enum:ogdf::Ogml::TagId
t_fill	ogdf/fileformats/Ogml.h	/^		t_fill,$/;"	e	enum:ogdf::Ogml::TagId
t_font	ogdf/fileformats/Ogml.h	/^		t_font,$/;"	e	enum:ogdf::Ogml::TagId
t_graph	ogdf/fileformats/Ogml.h	/^		t_graph,$/;"	e	enum:ogdf::Ogml::TagId
t_graphStyle	ogdf/fileformats/Ogml.h	/^		t_graphStyle,$/;"	e	enum:ogdf::Ogml::TagId
t_image	ogdf/fileformats/Ogml.h	/^		t_image,$/;"	e	enum:ogdf::Ogml::TagId
t_int	ogdf/fileformats/Ogml.h	/^		t_int,$/;"	e	enum:ogdf::Ogml::TagId
t_label	ogdf/fileformats/Ogml.h	/^		t_label,$/;"	e	enum:ogdf::Ogml::TagId
t_labelRef	ogdf/fileformats/Ogml.h	/^		t_labelRef,$/;"	e	enum:ogdf::Ogml::TagId
t_labelStyle	ogdf/fileformats/Ogml.h	/^		t_labelStyle,$/;"	e	enum:ogdf::Ogml::TagId
t_labelStyleTemplate	ogdf/fileformats/Ogml.h	/^		t_labelStyleTemplate,$/;"	e	enum:ogdf::Ogml::TagId
t_labelStyleTemplateRef	ogdf/fileformats/Ogml.h	/^		t_labelStyleTemplateRef,	\/\/!< tag template within tag labelStyle\/-Template$/;"	e	enum:ogdf::Ogml::TagId
t_layout	ogdf/fileformats/Ogml.h	/^		t_layout,$/;"	e	enum:ogdf::Ogml::TagId
t_line	ogdf/fileformats/Ogml.h	/^		t_line,$/;"	e	enum:ogdf::Ogml::TagId
t_location	ogdf/fileformats/Ogml.h	/^		t_location,$/;"	e	enum:ogdf::Ogml::TagId
t_node	ogdf/fileformats/Ogml.h	/^		t_node,$/;"	e	enum:ogdf::Ogml::TagId
t_nodeRef	ogdf/fileformats/Ogml.h	/^		t_nodeRef,$/;"	e	enum:ogdf::Ogml::TagId
t_nodeStyle	ogdf/fileformats/Ogml.h	/^		t_nodeStyle,$/;"	e	enum:ogdf::Ogml::TagId
t_nodeStyleTemplate	ogdf/fileformats/Ogml.h	/^		t_nodeStyleTemplate,$/;"	e	enum:ogdf::Ogml::TagId
t_nodeStyleTemplateRef	ogdf/fileformats/Ogml.h	/^		t_nodeStyleTemplateRef,		\/\/!< tag template within tag nodeStyle\/-Template$/;"	e	enum:ogdf::Ogml::TagId
t_none	ogdf/fileformats/Ogml.h	/^		t_none = -1,$/;"	e	enum:ogdf::Ogml::TagId
t_num	ogdf/fileformats/Ogml.h	/^		t_num,$/;"	e	enum:ogdf::Ogml::TagId
t_ogml	ogdf/fileformats/Ogml.h	/^		t_ogml,$/;"	e	enum:ogdf::Ogml::TagId
t_point	ogdf/fileformats/Ogml.h	/^		t_point,$/;"	e	enum:ogdf::Ogml::TagId
t_port	ogdf/fileformats/Ogml.h	/^		t_port,$/;"	e	enum:ogdf::Ogml::TagId
t_segment	ogdf/fileformats/Ogml.h	/^		t_segment,$/;"	e	enum:ogdf::Ogml::TagId
t_shape	ogdf/fileformats/Ogml.h	/^		t_shape,$/;"	e	enum:ogdf::Ogml::TagId
t_source	ogdf/fileformats/Ogml.h	/^		t_source,$/;"	e	enum:ogdf::Ogml::TagId
t_sourceStyle	ogdf/fileformats/Ogml.h	/^		t_sourceStyle,$/;"	e	enum:ogdf::Ogml::TagId
t_string	ogdf/fileformats/Ogml.h	/^		t_string,$/;"	e	enum:ogdf::Ogml::TagId
t_structure	ogdf/fileformats/Ogml.h	/^		t_structure,$/;"	e	enum:ogdf::Ogml::TagId
t_styleTemplates	ogdf/fileformats/Ogml.h	/^		t_styleTemplates,$/;"	e	enum:ogdf::Ogml::TagId
t_styles	ogdf/fileformats/Ogml.h	/^		t_styles,$/;"	e	enum:ogdf::Ogml::TagId
t_target	ogdf/fileformats/Ogml.h	/^		t_target,$/;"	e	enum:ogdf::Ogml::TagId
t_targetStyle	ogdf/fileformats/Ogml.h	/^		t_targetStyle,$/;"	e	enum:ogdf::Ogml::TagId
t_text	ogdf/fileformats/Ogml.h	/^		t_text,$/;"	e	enum:ogdf::Ogml::TagId
tableSelectionChanged	ui/querypathsdialog.cpp	/^void QueryPathsDialog::tableSelectionChanged()$/;"	f	class:QueryPathsDialog
target	ogdf/basic/Graph_d.h	/^	node target() const { return m_tgt; }$/;"	f	class:ogdf::EdgeElement
targetPredefKey	ogdf/fileformats/GmlParser.h	/^		sourcePredefKey, targetPredefKey, arrowPredefKey, LinePredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
targetPredefKey	ogdf/fileformats/XmlParser.h	/^		sourcePredefKey, targetPredefKey, sensePredefKey, arrowPredefKey, LinePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
targetScenePos	ui/graphicsviewzoom.h	/^    QPointF targetScenePos, targetViewportPos;$/;"	m	class:GraphicsViewZoom
targetViewportPos	ui/graphicsviewzoom.h	/^    QPointF targetScenePos, targetViewportPos;$/;"	m	class:GraphicsViewZoom
tempNuclFileExists	blast/blastqueries.cpp	/^bool BlastQueries::tempNuclFileExists()$/;"	f	class:BlastQueries
tempProtFileExists	blast/blastqueries.cpp	/^bool BlastQueries::tempProtFileExists()$/;"	f	class:BlastQueries
templateCluster	ogdf/cluster/ClusterGraphAttributes.h	/^			String &templateCluster(cluster c) { return m_clusterTemplate[c]; }$/;"	f	class:ogdf::ClusterGraphAttributes
templateCluster	ogdf/cluster/ClusterGraphAttributes.h	/^			const String &templateCluster(cluster c) const { return m_clusterTemplate[c]; }$/;"	f	class:ogdf::ClusterGraphAttributes
templateNode	ogdf/basic/GraphAttributes.h	/^	String &templateNode(node v) {$/;"	f	class:ogdf::GraphAttributes
templateNode	ogdf/basic/GraphAttributes.h	/^	const String &templateNode(node v) const {$/;"	f	class:ogdf::GraphAttributes
templatePredefKey	ogdf/fileformats/GmlParser.h	/^		linePredefKey, lineWidthPredefKey, templatePredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
terminalWidth	program/memory.h	/^    int terminalWidth;$/;"	m	class:Memory
test	ogdf/fileformats/DinoXmlScanner.cpp	/^	void DinoXmlScanner::test(){$/;"	f	class:ogdf::DinoXmlScanner
testExactOverlap	graph/debruijnedge.cpp	/^bool DeBruijnEdge::testExactOverlap(int overlap) const$/;"	f	class:DeBruijnEdge
testNextNextToken	ogdf/fileformats/DinoXmlScanner.cpp	/^	XmlToken DinoXmlScanner::testNextNextToken(){$/;"	f	class:ogdf::DinoXmlScanner
testNextToken	ogdf/fileformats/DinoXmlScanner.cpp	/^	XmlToken DinoXmlScanner::testNextToken(){$/;"	f	class:ogdf::DinoXmlScanner
test_all	tests/bandage_command_line_tests.sh	/^function test_all {$/;"	f
test_exit_code	tests/bandage_command_line_tests.sh	/^function test_exit_code {$/;"	f
test_forall_adj_edges	ogdf/basic/Graph_d.h	/^inline bool test_forall_adj_edges(adjEntry &adj, edge &e)$/;"	f	namespace:ogdf
test_forall_adj_edges_of_cluster	ogdf/cluster/ClusterGraph.h	/^inline bool test_forall_adj_edges_of_cluster(ListIterator<adjEntry> &it, edge &e)$/;"	f	namespace:ogdf
test_forall_adj_edges_of_cluster	ogdf/cluster/ClusterGraph.h	/^inline bool test_forall_adj_edges_of_cluster(adjEntry &adj, edge &e)$/;"	f	namespace:ogdf
test_forall_adj_entries_of_cluster	ogdf/cluster/ClusterGraph.h	/^inline bool test_forall_adj_entries_of_cluster(ListIterator<adjEntry> &it, adjEntry &adj)$/;"	f	namespace:ogdf
test_image_height	tests/bandage_command_line_tests.sh	/^function test_image_height {$/;"	f
test_image_width	tests/bandage_command_line_tests.sh	/^function test_image_width {$/;"	f
test_image_width_and_height	tests/bandage_command_line_tests.sh	/^function test_image_width_and_height {$/;"	f
textColour	program/settings.h	/^    QColor textColour;$/;"	m	class:Settings
textOutline	program/settings.h	/^    bool textOutline;$/;"	m	class:Settings
textOutlineColour	program/settings.h	/^    QColor textOutlineColour;$/;"	m	class:Settings
textOutlineThickness	program/settings.h	/^    FloatSetting textOutlineThickness;$/;"	m	class:Settings
textZoomScaleFactor	program/settings.h	/^    double textZoomScaleFactor; \/\/ 1.0 = text size constant, regardless of zoom.  0.0 = text size changes exactly with zoom.$/;"	m	class:Settings
theEdge	ogdf/basic/Graph_d.h	/^	edge theEdge() const { return m_edge; }$/;"	f	class:ogdf::AdjElement
theNode	ogdf/basic/Graph_d.h	/^	node theNode() const { return m_node; }$/;"	f	class:ogdf::AdjElement
thisNodeHasBlastHits	graph/debruijnnode.h	/^    bool thisNodeHasBlastHits() const {return m_blastHits.size() > 0;}$/;"	f	class:DeBruijnNode
thisNodeOrReverseComplementHasBlastHits	graph/debruijnnode.h	/^    bool thisNodeOrReverseComplementHasBlastHits() const {return m_blastHits.size() > 0 || getReverseComplement()->m_blastHits.size() > 0;}$/;"	f	class:DeBruijnNode
thisNodeOrReverseComplementIsDrawn	graph/debruijnnode.h	/^    bool thisNodeOrReverseComplementIsDrawn() const {return isDrawn() || getReverseComplement()->isDrawn();}$/;"	f	class:DeBruijnNode
thisOrReverseComplementHasGraphicsItemNode	graph/debruijnnode.h	/^    bool thisOrReverseComplementHasGraphicsItemNode() const {return (m_graphicsItemNode != 0 || getReverseComplement()->m_graphicsItemNode != 0);}$/;"	f	class:DeBruijnNode
thisOrReverseComplementInOgdf	graph/debruijnnode.h	/^    bool thisOrReverseComplementInOgdf() const {return (inOgdf() || getReverseComplement()->inOgdf());}$/;"	f	class:DeBruijnNode
thisOrReverseComplementNotInOgdf	graph/debruijnnode.h	/^    bool thisOrReverseComplementNotInOgdf() const {return !thisOrReverseComplementInOgdf();}$/;"	f	class:DeBruijnNode
threshold	ogdf/energybased/FMMMLayout.h	/^	double threshold() const { return m_threshold; }$/;"	f	class:ogdf::FMMMLayout
threshold	ogdf/energybased/FMMMLayout.h	/^	void threshold(double x) {m_threshold = ((x > 0) ? x : 0.1);}$/;"	f	class:ogdf::FMMMLayout
time_total	ogdf/energybased/FMMMLayout.h	/^	double time_total; \/\/!< The runtime (=CPU-time) of the algorithm in seconds.$/;"	m	class:ogdf::FMMMLayout
timesNodeInPath	graph/debruijnedge.cpp	/^int DeBruijnEdge::timesNodeInPath(DeBruijnNode * node, std::vector<DeBruijnNode *> * path) const$/;"	f	class:DeBruijnEdge
tipOverCCs	ogdf/energybased/FMMMLayout.h	/^	TipOver tipOverCCs() const { return m_tipOverCCs; }$/;"	f	class:ogdf::FMMMLayout
tipOverCCs	ogdf/energybased/FMMMLayout.h	/^	void tipOverCCs(TipOver to) { m_tipOverCCs = to; }$/;"	f	class:ogdf::FMMMLayout
tipp_over	ogdf/energybased/MAARPacking.cpp	/^inline Rectangle MAARPacking::tipp_over(ListIterator<Rectangle> rect_item)$/;"	f	class:ogdf::MAARPacking
tipp_over	ogdf/energybased/Rectangle.h	/^		void tipp_over()$/;"	f	class:ogdf::Rectangle
tipped_over	ogdf/energybased/Rectangle.h	/^		bool tipped_over;     \/\/indicates if this rectangle has been tipped over in the$/;"	m	class:ogdf::Rectangle
tmp_item	ogdf/internal/energybased/ParticleInfo.h	/^	ListIterator<ParticleInfo> tmp_item;	\/\/a temporily item that is used to construct$/;"	m	class:ogdf::ParticleInfo
to	ogdf/basic/geometry.h	/^	const DRect &to()   const { return *m_to;   }$/;"	f	class:ogdf::DScaler
toAlways	ogdf/energybased/FMMMLayout.h	/^		toAlways$/;"	e	enum:ogdf::FMMMLayout::TipOver
toDouble	program/scinot.cpp	/^double SciNot::toDouble() const$/;"	f	class:SciNot
toNoGrowingRow	ogdf/energybased/FMMMLayout.h	/^		toNoGrowingRow,$/;"	e	enum:ogdf::FMMMLayout::TipOver
toNone	ogdf/energybased/FMMMLayout.h	/^		toNone,$/;"	e	enum:ogdf::FMMMLayout::TipOver
top	ogdf/basic/BoundedStack.h	/^	E &top() {$/;"	f	class:ogdf::BoundedStack
top	ogdf/basic/BoundedStack.h	/^	const E &top() const {$/;"	f	class:ogdf::BoundedStack
top	ogdf/basic/Stack.h	/^	E &top() {$/;"	f	class:ogdf::Stack
top	ogdf/basic/Stack.h	/^	E &top() {$/;"	f	class:ogdf::StackPure
top	ogdf/basic/Stack.h	/^	const E &top() const {$/;"	f	class:ogdf::Stack
top	ogdf/basic/Stack.h	/^	const E &top() const {$/;"	f	class:ogdf::StackPure
topLine	ogdf/basic/geometry.h	/^	const DLine topLine() const {$/;"	f	class:ogdf::DRect
topToBottom	ogdf/basic/geometry.h	/^	topToBottom, \/\/!< Edges are oriented from top to bottom.$/;"	e	enum:ogdf::Orientation
topologicalNumbering	ogdf/basic/simple_graph_alg.cpp	/^void topologicalNumbering(const Graph &G, NodeArray<int> &num)$/;"	f	namespace:ogdf
total_width	ogdf/energybased/PackingRowInfo.h	/^		double total_width; \/\/the sum of the width of all rectsngles in this row$/;"	m	class:ogdf::PackingRowInfo
tracePaths	graph/debruijnedge.cpp	/^void DeBruijnEdge::tracePaths(bool forward,$/;"	f	class:DeBruijnEdge
transform_local_exp_to_forces	ogdf/internal/energybased/NMM.cpp	/^void NMM::transform_local_exp_to_forces($/;"	f	class:ogdf::NMM
transform_multipole_exp_to_forces	ogdf/internal/energybased/NMM.cpp	/^void NMM::transform_multipole_exp_to_forces($/;"	f	class:ogdf::NMM
traversePath	ogdf/fileformats/DinoXmlParser.cpp	/^	bool DinoXmlParser::traversePath($/;"	f	class:ogdf::DinoXmlParser
treeDepth	ogdf/cluster/ClusterGraph.h	/^	int treeDepth() const$/;"	f	class:ogdf::ClusterGraph
tree_construction_way	ogdf/internal/energybased/NMM.h	/^	int tree_construction_way() const { return _tree_construction_way; }$/;"	f	class:ogdf::NMM
tree_construction_way	ogdf/internal/energybased/NMM.h	/^	void tree_construction_way(int a) {$/;"	f	class:ogdf::NMM
triangulate	ogdf/basic/simple_graph_alg.cpp	/^void triangulate(Graph &G)$/;"	f	namespace:ogdf
tryEnter	ogdf/basic/CriticalSection.h	/^	bool tryEnter() {$/;"	f	class:ogdf::CriticalSection
twin	ogdf/basic/Graph_d.h	/^	adjEntry twin() const { return m_twin; }$/;"	f	class:ogdf::AdjElement
twinNode	ogdf/basic/Graph_d.h	/^	node twinNode() const { return m_twin->m_node; }$/;"	f	class:ogdf::AdjElement
two_pi	ogdf/basic/Math.cpp	/^	const double Math::two_pi = 2*3.14159265358979323846;$/;"	m	class:ogdf::Math	file:
two_pi	ogdf/basic/Math.h	/^	static const double two_pi;$/;"	m	class:ogdf::Math
type	ogdf/basic/GraphAttributes.h	/^	Graph::EdgeType &type(edge e) {$/;"	f	class:ogdf::GraphAttributes
type	ogdf/basic/GraphAttributes.h	/^	Graph::EdgeType type(edge e) const {$/;"	f	class:ogdf::GraphAttributes
type	ogdf/basic/GraphAttributes.h	/^	Graph::NodeType &type(node v) {$/;"	f	class:ogdf::GraphAttributes
type	ogdf/basic/GraphAttributes.h	/^	Graph::NodeType type(node v) const {$/;"	f	class:ogdf::GraphAttributes
type	ogdf/internal/energybased/NodeAttributes.h	/^	int type; \/\/1 = sun node (s_node); 2 = planet node (p_node) without a dedicate moon$/;"	m	class:ogdf::NodeAttributes
typePredefKey	ogdf/fileformats/GmlParser.h	/^		yPredefKey, wPredefKey, hPredefKey, typePredefKey, widthPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
typePredefKey	ogdf/fileformats/XmlParser.h	/^		typePredefKey, widthPredefKey, heightPredefKey, sizePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
ui	ui/aboutdialog.h	/^    Ui::AboutDialog *ui;$/;"	m	class:AboutDialog
ui	ui/blasthitfiltersdialog.h	/^    Ui::BlastHitFiltersDialog *ui;$/;"	m	class:BlastHitFiltersDialog
ui	ui/blastsearchdialog.h	/^    Ui::BlastSearchDialog *ui;$/;"	m	class:BlastSearchDialog
ui	ui/changenodedepthdialog.h	/^    Ui::ChangeNodeDepthDialog *ui;$/;"	m	class:ChangeNodeDepthDialog
ui	ui/changenodenamedialog.h	/^    Ui::ChangeNodeNameDialog *ui;$/;"	m	class:ChangeNodeNameDialog
ui	ui/enteroneblastquerydialog.h	/^    Ui::EnterOneBlastQueryDialog *ui;$/;"	m	class:EnterOneBlastQueryDialog
ui	ui/graphinfodialog.h	/^    Ui::GraphInfoDialog *ui;$/;"	m	class:GraphInfoDialog
ui	ui/mainwindow.h	/^    Ui::MainWindow *ui;$/;"	m	class:MainWindow
ui	ui/myprogressdialog.h	/^    Ui::MyProgressDialog *ui;$/;"	m	class:MyProgressDialog
ui	ui/pathspecifydialog.h	/^    Ui::PathSpecifyDialog *ui;$/;"	m	class:PathSpecifyDialog
ui	ui/querypathsdialog.h	/^    Ui::QueryPathsDialog *ui;$/;"	m	class:QueryPathsDialog
ui	ui/settingsdialog.h	/^    Ui::SettingsDialog *ui;$/;"	m	class:SettingsDialog
unassignNode	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::unassignNode(node v)$/;"	f	class:ogdf::ClusterGraph
undefine	ogdf/basic/HashArray.h	/^	void undefine(const I &i) {$/;"	f	class:ogdf::HashArray
undefined	ogdf/basic/GraphAttributes.h	/^		undefined$/;"	e	enum:ogdf::GraphAttributes::EdgeArrow
undoLastMerge	ogdf/internal/energybased/MultilevelGraph.cpp	/^node MultilevelGraph::undoLastMerge()$/;"	f	class:ogdf::MultilevelGraph
undoRotation	ui/mygraphicsview.cpp	/^void MyGraphicsView::undoRotation()$/;"	f	class:MyGraphicsView
uniformNegativeNodeColour	program/settings.h	/^    QColor uniformNegativeNodeColour;$/;"	m	class:Settings
uniformNodeSpecialColour	program/settings.h	/^    QColor uniformNodeSpecialColour;$/;"	m	class:Settings
uniformPositiveNodeColour	program/settings.h	/^    QColor uniformPositiveNodeColour;$/;"	m	class:Settings
unify	ogdf/basic/geometry.cpp	/^void DPolygon::unify()$/;"	f	class:ogdf::DPolygon
unify	ogdf/basic/geometry.cpp	/^void DPolyline::unify()$/;"	f	class:ogdf::DPolyline
unitEdgeLength	ogdf/energybased/FMMMLayout.h	/^	double unitEdgeLength() const { return m_unitEdgeLength; }$/;"	f	class:ogdf::FMMMLayout
unitEdgeLength	ogdf/energybased/FMMMLayout.h	/^	void unitEdgeLength(double x) {m_unitEdgeLength = (( x > 0.0) ? x : 1);}$/;"	f	class:ogdf::FMMMLayout
unmark	ogdf/internal/energybased/ParticleInfo.h	/^	void unmark() { marked = false; }$/;"	f	class:ogdf::ParticleInfo
unnamedQueryDefaultName	program/settings.h	/^    QString unnamedQueryDefaultName;$/;"	m	class:Settings
unregisterArray	ogdf/basic/CombinatorialEmbedding.cpp	/^void ConstCombinatorialEmbedding::unregisterArray($/;"	f	class:ogdf::ConstCombinatorialEmbedding
unregisterArray	ogdf/basic/Graph.cpp	/^void Graph::unregisterArray(ListIterator<AdjEntryArrayBase*> it) const$/;"	f	class:ogdf::Graph
unregisterArray	ogdf/basic/Graph.cpp	/^void Graph::unregisterArray(ListIterator<EdgeArrayBase*> it) const$/;"	f	class:ogdf::Graph
unregisterArray	ogdf/basic/Graph.cpp	/^void Graph::unregisterArray(ListIterator<NodeArrayBase*> it) const$/;"	f	class:ogdf::Graph
unregisterArray	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::unregisterArray(ListIterator<ClusterArrayBase*> it) const$/;"	f	class:ogdf::ClusterGraph
unregisterObserver	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::unregisterObserver(ListIterator<ClusterGraphObserver*> it) const$/;"	f	class:ogdf::ClusterGraph
unregisterStructure	ogdf/basic/Graph.cpp	/^void Graph::unregisterStructure(ListIterator<GraphObserver*> it) const$/;"	f	class:ogdf::Graph
unsplit	ogdf/basic/CombinatorialEmbedding.cpp	/^void CombinatorialEmbedding::unsplit(edge eIn, edge eOut)$/;"	f	class:ogdf::CombinatorialEmbedding
unsplit	ogdf/basic/Graph.cpp	/^void Graph::unsplit(edge eIn, edge eOut)$/;"	f	class:ogdf::Graph
unsplit	ogdf/basic/Graph.cpp	/^void Graph::unsplit(node u)$/;"	f	class:ogdf::Graph
unsplit	ogdf/basic/GraphCopy.cpp	/^void GraphCopy::unsplit(edge eIn, edge eOut)$/;"	f	class:ogdf::GraphCopy
updateClusterPositions	ogdf/cluster/ClusterGraphAttributes.cpp	/^void ClusterGraphAttributes::updateClusterPositions(double boundaryDist)$/;"	f	class:ogdf::ClusterGraphAttributes
updateMergeWeights	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::updateMergeWeights()$/;"	f	class:ogdf::MultilevelGraph
updateMerger	ogdf/basic/CombinatorialEmbedding.cpp	/^void CombinatorialEmbedding::updateMerger(edge e, face fRight, face fLeft)$/;"	f	class:ogdf::CombinatorialEmbedding
updateNodeWidthVisualAid	ui/settingsdialog.cpp	/^void SettingsDialog::updateNodeWidthVisualAid()$/;"	f	class:SettingsDialog
updateReverseIndizes	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::updateReverseIndizes()$/;"	f	class:ogdf::MultilevelGraph
updateTempFiles	blast/blastqueries.cpp	/^void BlastQueries::updateTempFiles()$/;"	f	class:BlastQueries
update_boxlength_and_cornercoordinate	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::update_boxlength_and_cornercoordinate($/;"	f	class:ogdf::FMMMLayout
update_boxlength_and_cornercoordinate	ogdf/internal/energybased/FruchtermanReingold.h	/^	void update_boxlength_and_cornercoordinate(double b_l, DPoint d_l_c) {$/;"	f	class:ogdf::FruchtermanReingold
update_boxlength_and_cornercoordinate	ogdf/internal/energybased/NMM.cpp	/^void NMM::update_boxlength_and_cornercoordinate(double b_l, DPoint d_l_c)$/;"	f	class:ogdf::NMM
update_edgelength	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::update_edgelength($/;"	f	class:ogdf::FMMMLayout
update_low_level_options_due_to_high_level_options_settings	ogdf/energybased/FMMMLayout.cpp	/^void FMMMLayout::update_low_level_options_due_to_high_level_options_settings()$/;"	f	class:ogdf::FMMMLayout
upgradeContiguityStatus	graph/debruijnnode.cpp	/^void DeBruijnNode::upgradeContiguityStatus(ContiguityStatus newStatus)$/;"	f	class:DeBruijnNode
useHighLevelOptions	ogdf/energybased/FMMMLayout.h	/^	bool useHighLevelOptions() const { return m_useHighLevelOptions; }$/;"	f	class:ogdf::FMMMLayout
useHighLevelOptions	ogdf/energybased/FMMMLayout.h	/^	void useHighLevelOptions(bool uho) { m_useHighLevelOptions = uho; }$/;"	f	class:ogdf::FMMMLayout
useLinearLayout	graph/assemblygraph.cpp	/^bool AssemblyGraph::useLinearLayout() const {$/;"	f	class:AssemblyGraph
usePositiveNodeColour	graph/graphicsitemnode.cpp	/^bool GraphicsItemNode::usePositiveNodeColour()$/;"	f	class:GraphicsItemNode
usedRealTime	ogdf/basic/System.cpp	/^__int64 System::usedRealTime(__int64 &t)$/;"	f	class:ogdf::System
usedTime	ogdf/basic/basic.cpp	/^double usedTime(double& T)$/;"	f	namespace:ogdf
userDisable	ogdf/basic/Constraints.h	/^	void userDisable() { m_UserDisabled = true; }$/;"	f	class:ogdf::Constraint
userEnable	ogdf/basic/Constraints.h	/^	void userEnable() { m_UserDisabled = false; }$/;"	f	class:ogdf::Constraint
userSpecifiedPath	program/memory.h	/^    Path userSpecifiedPath;$/;"	m	class:Memory
userSpecifiedPathCircular	program/memory.h	/^    bool userSpecifiedPathCircular;$/;"	m	class:Memory
userSpecifiedPathString	program/memory.h	/^    QString userSpecifiedPathString;$/;"	m	class:Memory
using_NMM	ogdf/internal/energybased/NMM.h	/^	bool using_NMM; \/\/Indicates whether the exact method or NMM is used for force$/;"	m	class:ogdf::NMM
using_S_node	ogdf/energybased/Set.h	/^		bool using_S_node; \/\/indicates weather S_item, or S_node is used$/;"	m	class:ogdf::Set
v_higher_level	ogdf/internal/energybased/NodeAttributes.h	/^	node v_higher_level;\/\/the corresponding node in the higher level graph$/;"	m	class:ogdf::NodeAttributes
v_lower_level	ogdf/internal/energybased/NodeAttributes.h	/^	node v_lower_level; \/\/the corresponding node in the lower level graph$/;"	m	class:ogdf::NodeAttributes
val	program/settings.h	/^    SciNot val, min, max;$/;"	m	class:SciNotSetting
val	program/settings.h	/^    double val, min, max;$/;"	m	class:FloatSetting
val	program/settings.h	/^    int val, min, max;$/;"	m	class:IntSetting
valid	ogdf/basic/AdjEntryArray.h	/^	bool valid() const { return (Array<T>::low() <= Array<T>::high()); }$/;"	f	class:ogdf::AdjEntryArray
valid	ogdf/basic/BoundedStack.h	/^	bool valid() const { return m_pStart != 0; }$/;"	f	class:ogdf::BoundedStack
valid	ogdf/basic/EdgeArray.h	/^	bool valid() const { return (Array<T>::low() <= Array<T>::high()); }$/;"	f	class:ogdf::EdgeArray
valid	ogdf/basic/FaceArray.h	/^	bool valid() const { return (Array<T>::low() <= Array<T>::high()); }$/;"	f	class:ogdf::FaceArray
valid	ogdf/basic/Hashing.h	/^	bool valid() const { return (m_pElement != 0); }$/;"	f	class:ogdf::HashConstIterator
valid	ogdf/basic/List.h	/^	bool valid() const { return m_pX != 0; }$/;"	f	class:ogdf::ListConstIterator
valid	ogdf/basic/List.h	/^	bool valid() const { return m_pX != 0; }$/;"	f	class:ogdf::ListIterator
valid	ogdf/basic/NodeArray.h	/^	bool valid() const { return (Array<T>::low() <= Array<T>::high()); }$/;"	f	class:ogdf::NodeArray
valid	ogdf/basic/SList.h	/^	bool valid() const { return m_pX != 0; }$/;"	f	class:ogdf::SListConstIterator
valid	ogdf/basic/SList.h	/^	bool valid() const { return m_pX != 0; }$/;"	f	class:ogdf::SListIterator
valid	ogdf/cluster/ClusterArray.h	/^	bool valid() const { return (Array<T>::low() <= Array<T>::high()); }$/;"	f	class:ogdf::ClusterArray
valid	ogdf/fileformats/DinoXmlParser.h	/^		const bool& valid() const {$/;"	f	struct:ogdf::XmlAttributeObject
valid	ogdf/fileformats/DinoXmlParser.h	/^		const bool& valid() const {$/;"	f	struct:ogdf::XmlTagObject
validAttribute	ogdf/fileformats/OgmlParser.cpp	/^	int validAttribute(const XmlAttributeObject &xmlAttribute,$/;"	f	class:ogdf::OgmlParser::OgmlAttribute
validTag	ogdf/fileformats/OgmlParser.cpp	/^	int validTag(const XmlTagObject &o,$/;"	f	class:ogdf::OgmlParser::OgmlTag
validValue	ogdf/fileformats/OgmlParser.cpp	/^	int validValue($/;"	f	class:ogdf::OgmlParser::OgmlAttributeValue
validate	ogdf/fileformats/OgmlParser.cpp	/^int OgmlParser::validate(const XmlTagObject * xmlTag, int ogmlTagId)$/;"	f	class:ogdf::OgmlParser
validate	ogdf/fileformats/OgmlParser.cpp	/^void OgmlParser::validate(const char *fileName)$/;"	f	class:ogdf::OgmlParser
value	ogdf/energybased/Node.h	/^		friend int value(const Node& A) { return A.value; }$/;"	f	class:ogdf::Node
value	ogdf/energybased/Node.h	/^		int value ;$/;"	m	class:ogdf::Node
value	ogdf/energybased/PQueue.h	/^	double value;$/;"	m	class:ogdf::HelpRecord
value_type	ogdf/basic/List.h	/^	typedef E value_type;$/;"	t	class:ogdf::List
value_type	ogdf/basic/List.h	/^	typedef E value_type;$/;"	t	class:ogdf::ListPure
value_type	ogdf/basic/SList.h	/^	typedef E value_type;$/;"	t	class:ogdf::SList
value_type	ogdf/basic/SList.h	/^	typedef E value_type;$/;"	t	class:ogdf::SListPure
values	ogdf/fileformats/OgmlParser.cpp	/^	List<OgmlAttributeValue*> values; \/\/!< Represents the value set of this attribute.$/;"	m	class:ogdf::OgmlParser::OgmlAttribute	file:
velvetToGfa	tests/bandagetests.cpp	/^void BandageTests::velvetToGfa()$/;"	f	class:BandageTests
verIntersection	ogdf/basic/geometry.cpp	/^int DLine::verIntersection(const double verAxis, double &crossing) const$/;"	f	class:ogdf::DLine
versionPredefKey	ogdf/fileformats/GmlParser.h	/^		namePredefKey, graphPredefKey, versionPredefKey, directedPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
versionPredefKey	ogdf/fileformats/XmlParser.h	/^		namePredefKey, graphPredefKey, versionPredefKey, directedPredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
vertex	ogdf/basic/Graph_d.h	/^		vertex,$/;"	e	enum:ogdf::Graph::NodeType
vertex	ogdf/energybased/Node.h	/^		node vertex;$/;"	m	class:ogdf::Node
vertex	ogdf/internal/energybased/ParticleInfo.h	/^	node vertex;      \/\/the vertex of G that is associated with this attributes$/;"	m	class:ogdf::ParticleInfo
vertexPredefKey	ogdf/fileformats/GmlParser.h	/^		rootClusterPredefKey, vertexPredefKey, colorPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
vs_attValueErr	ogdf/fileformats/Ogml.h	/^		vs_attValueErr = -3,	\/\/!< attribute-value error$/;"	e	enum:ogdf::Ogml::ValidityState
vs_cardErr	ogdf/fileformats/Ogml.h	/^		vs_cardErr = -2,		\/\/!< tag\/attribute cardinality error$/;"	e	enum:ogdf::Ogml::ValidityState
vs_expAttNotFound	ogdf/fileformats/Ogml.h	/^		vs_expAttNotFound = -4,	\/\/!< expected attribute not found$/;"	e	enum:ogdf::Ogml::ValidityState
vs_expTagNotFound	ogdf/fileformats/Ogml.h	/^		vs_expTagNotFound = -5,	\/\/!< expected tag not found$/;"	e	enum:ogdf::Ogml::ValidityState
vs_idNotUnique	ogdf/fileformats/Ogml.h	/^		vs_idNotUnique = -9,	\/\/!< id already exhausted$/;"	e	enum:ogdf::Ogml::ValidityState
vs_idRefErr	ogdf/fileformats/Ogml.h	/^		vs_idRefErr = -8,		\/\/!< referenced id wasn't found or wrong type of referenced tag$/;"	e	enum:ogdf::Ogml::ValidityState
vs_invalid	ogdf/fileformats/Ogml.h	/^		vs_invalid = -1,		\/\/!< tag\/attribute is invalid (no detailled information)$/;"	e	enum:ogdf::Ogml::ValidityState
vs_tagEmptIncl	ogdf/fileformats/Ogml.h	/^		vs_tagEmptIncl = -10,	\/\/!< empty tag inclusion$/;"	e	enum:ogdf::Ogml::ValidityState
vs_unexpAtt	ogdf/fileformats/Ogml.h	/^		vs_unexpAtt = -6,		\/\/!< attribute unexpected$/;"	e	enum:ogdf::Ogml::ValidityState
vs_unexpTag	ogdf/fileformats/Ogml.h	/^		vs_unexpTag = -7,		\/\/!< tag unexpected$/;"	e	enum:ogdf::Ogml::ValidityState
vs_valid	ogdf/fileformats/Ogml.h	/^		vs_valid = 1			\/\/!< tag\/attribute is valid$/;"	e	enum:ogdf::Ogml::ValidityState
vsprintf	ogdf/basic/basic.h	/^inline int vsprintf(char *buffer, size_t sizeInBytes, const char *format, va_list argptr)$/;"	f	namespace:ogdf
vsprintf	ogdf/basic/basic.h	/^inline int vsprintf(char *buffer, size_t, const char *format, va_list argptr)$/;"	f	namespace:ogdf
wPredefKey	ogdf/fileformats/GmlParser.h	/^		yPredefKey, wPredefKey, hPredefKey, typePredefKey, widthPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
wPredefKey	ogdf/fileformats/XmlParser.h	/^		yPredefKey, wPredefKey, hPredefKey, nodetypePredefKey, edgetypePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
wasCancelled	ui/myprogressdialog.h	/^    bool wasCancelled() const {return m_cancelled;}$/;"	f	class:MyProgressDialog
wasSearchedFor	blast/blastquery.h	/^    bool wasSearchedFor() const {return m_searchedFor;}$/;"	f	class:BlastQuery
webBlastSelectedNodes	ui/mainwindow.cpp	/^void MainWindow::webBlastSelectedNodes()$/;"	f	class:MainWindow
weight	ogdf/basic/GraphAttributes.h	/^	const int &weight(node v) const {$/;"	f	class:ogdf::GraphAttributes
weight	ogdf/basic/GraphAttributes.h	/^	int &weight(node v) {$/;"	f	class:ogdf::GraphAttributes
weight	ogdf/internal/energybased/MultilevelGraph.h	/^	double weight(edge e) { return m_weight[e]; }$/;"	f	class:ogdf::MultilevelGraph
weight	ogdf/internal/energybased/MultilevelGraph.h	/^	void weight(edge e, double weight) { m_weight[e] = weight; }$/;"	f	class:ogdf::MultilevelGraph
well_separated	ogdf/internal/energybased/NMM.cpp	/^bool NMM::well_separated(QuadTreeNodeNM* node_1_ptr, QuadTreeNodeNM* node_2_ptr)$/;"	f	class:ogdf::NMM
width	ogdf/basic/GraphAttributes.h	/^	NodeArray<double> &width() {$/;"	f	class:ogdf::GraphAttributes
width	ogdf/basic/GraphAttributes.h	/^	const NodeArray<double> &width() const {$/;"	f	class:ogdf::GraphAttributes
width	ogdf/basic/GraphAttributes.h	/^	const double &width(node v) const {$/;"	f	class:ogdf::GraphAttributes
width	ogdf/basic/GraphAttributes.h	/^	double &width(node v) {$/;"	f	class:ogdf::GraphAttributes
width	ogdf/basic/geometry.h	/^	double width() const {$/;"	f	class:ogdf::DRect
width	ogdf/energybased/Rectangle.h	/^		double width;                     \/\/width of the surround. rect.$/;"	m	class:ogdf::Rectangle
width	ogdf/internal/energybased/NodeAttributes.h	/^	double width;$/;"	m	class:ogdf::NodeAttributes
widthPredefKey	ogdf/fileformats/GmlParser.h	/^		yPredefKey, wPredefKey, hPredefKey, typePredefKey, widthPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
widthPredefKey	ogdf/fileformats/XmlParser.h	/^		typePredefKey, widthPredefKey, heightPredefKey, sizePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
wrapText	command_line/commoncommandlinefunctions.cpp	/^QStringList wrapText(QString text, int width, int firstLineIndent, int laterLineIndent)$/;"	f
writeCluster	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::writeCluster(ostream &os,$/;"	f	class:ogdf::ClusterGraph
writeCluster	ogdf/cluster/ClusterGraphAttributes.cpp	/^void ClusterGraphAttributes::writeCluster($/;"	f	class:ogdf::ClusterGraphAttributes
writeClusterOGML	ogdf/cluster/ClusterGraphAttributes.cpp	/^void ClusterGraphAttributes::writeClusterOGML($/;"	f	class:ogdf::ClusterGraphAttributes
writeGML	ogdf/basic/Graph.cpp	/^void Graph::writeGML(const char *fileName) const$/;"	f	class:ogdf::Graph
writeGML	ogdf/basic/Graph.cpp	/^void Graph::writeGML(ostream &os) const$/;"	f	class:ogdf::Graph
writeGML	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::writeGML(const String &fileName) const$/;"	f	class:ogdf::GraphAttributes
writeGML	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::writeGML(ostream &os) const$/;"	f	class:ogdf::GraphAttributes
writeGML	ogdf/basic/geometry.cpp	/^void DPolygon::writeGML(const char *filename) const$/;"	f	class:ogdf::DPolygon
writeGML	ogdf/basic/geometry.cpp	/^void DPolygon::writeGML(ostream &stream) const$/;"	f	class:ogdf::DPolygon
writeGML	ogdf/basic/geometry.cpp	/^void DPolyline::writeGML(const char *filename) const$/;"	f	class:ogdf::DPolyline
writeGML	ogdf/basic/geometry.cpp	/^void DPolyline::writeGML(ostream &stream) const$/;"	f	class:ogdf::DPolyline
writeGML	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::writeGML(const char *fileName)$/;"	f	class:ogdf::ClusterGraph
writeGML	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::writeGML(ostream &os)$/;"	f	class:ogdf::ClusterGraph
writeGML	ogdf/cluster/ClusterGraphAttributes.cpp	/^void ClusterGraphAttributes::writeGML(const char *fileName)$/;"	f	class:ogdf::ClusterGraphAttributes
writeGML	ogdf/cluster/ClusterGraphAttributes.cpp	/^void ClusterGraphAttributes::writeGML(ostream &os)$/;"	f	class:ogdf::ClusterGraphAttributes
writeGML	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::writeGML(const String &fileName)$/;"	f	class:ogdf::MultilevelGraph
writeGML	ogdf/internal/energybased/MultilevelGraph.cpp	/^void MultilevelGraph::writeGML(ostream &os)$/;"	f	class:ogdf::MultilevelGraph
writeGraphWinCluster	ogdf/cluster/ClusterGraph.cpp	/^void ClusterGraph::writeGraphWinCluster(ostream &os,$/;"	f	class:ogdf::ClusterGraph
writeGraphWinCluster	ogdf/cluster/ClusterGraphAttributes.cpp	/^void ClusterGraphAttributes::writeGraphWinCluster($/;"	f	class:ogdf::ClusterGraphAttributes
writeLongString	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::writeLongString(ostream &os, const String &str) const$/;"	f	class:ogdf::GraphAttributes
writeOGML	ogdf/cluster/ClusterGraphAttributes.cpp	/^void ClusterGraphAttributes::writeOGML(const char *fileName)\/\/, GraphConstraints &GC)$/;"	f	class:ogdf::ClusterGraphAttributes
writeOGML	ogdf/cluster/ClusterGraphAttributes.cpp	/^void ClusterGraphAttributes::writeOGML(ostream & os) \/\/, GraphConstraints & GC)$/;"	f	class:ogdf::ClusterGraphAttributes
writeRudy	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::writeRudy(const String &fileName) const$/;"	f	class:ogdf::GraphAttributes
writeRudy	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::writeRudy(ostream &os) const$/;"	f	class:ogdf::GraphAttributes
writeSVG	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::writeSVG(const String &fileName, int fontSize, const String &fontColor) const$/;"	f	class:ogdf::GraphAttributes
writeSVG	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::writeSVG(ostream &os, int fontSize, const String &fontColor) const$/;"	f	class:ogdf::GraphAttributes
writeTempFile	blast/blastqueries.cpp	/^void BlastQueries::writeTempFile(QSharedPointer<QFile> file, SequenceType sequenceType)$/;"	f	class:BlastQueries
writeXML	ogdf/basic/GraphAttributes.cpp	/^void GraphAttributes::writeXML($/;"	f	class:ogdf::GraphAttributes
x	ogdf/basic/GraphAttributes.h	/^	const double &x(node v) const {$/;"	f	class:ogdf::GraphAttributes
x	ogdf/basic/GraphAttributes.h	/^	double &x(node v) {$/;"	f	class:ogdf::GraphAttributes
x	ogdf/internal/energybased/MultilevelGraph.h	/^	double x(node v) { return m_GA->x(v); }$/;"	f	class:ogdf::MultilevelGraph
x	ogdf/internal/energybased/MultilevelGraph.h	/^	void x(node v, double x) { m_GA->x(v) = x;}$/;"	f	class:ogdf::MultilevelGraph
x1	ogdf/basic/tuples.h	/^	E1 &x1() { return m_x1; }$/;"	f	class:ogdf::Tuple2
x1	ogdf/basic/tuples.h	/^	E1 &x1() { return m_x1; }$/;"	f	class:ogdf::Tuple3
x1	ogdf/basic/tuples.h	/^	E1 &x1() { return m_x1; }$/;"	f	class:ogdf::Tuple4
x1	ogdf/basic/tuples.h	/^	const E1 &x1() const { return m_x1; }$/;"	f	class:ogdf::Tuple2
x1	ogdf/basic/tuples.h	/^	const E1 &x1() const { return m_x1; }$/;"	f	class:ogdf::Tuple3
x1	ogdf/basic/tuples.h	/^	const E1 &x1() const { return m_x1; }$/;"	f	class:ogdf::Tuple4
x2	ogdf/basic/tuples.h	/^	E2 &x2() { return m_x2; }$/;"	f	class:ogdf::Tuple2
x2	ogdf/basic/tuples.h	/^	E2 &x2() { return m_x2; }$/;"	f	class:ogdf::Tuple3
x2	ogdf/basic/tuples.h	/^	E2 &x2() { return m_x2; }$/;"	f	class:ogdf::Tuple4
x2	ogdf/basic/tuples.h	/^	const E2 &x2() const { return m_x2; }$/;"	f	class:ogdf::Tuple2
x2	ogdf/basic/tuples.h	/^	const E2 &x2() const { return m_x2; }$/;"	f	class:ogdf::Tuple3
x2	ogdf/basic/tuples.h	/^	const E2 &x2() const { return m_x2; }$/;"	f	class:ogdf::Tuple4
x3	ogdf/basic/tuples.h	/^	E3 &x3() { return m_x3; }$/;"	f	class:ogdf::Tuple3
x3	ogdf/basic/tuples.h	/^	E3 &x3() { return m_x3; }$/;"	f	class:ogdf::Tuple4
x3	ogdf/basic/tuples.h	/^	const E3 &x3() const { return m_x3; }$/;"	f	class:ogdf::Tuple3
x3	ogdf/basic/tuples.h	/^	const E3 &x3() const { return m_x3; }$/;"	f	class:ogdf::Tuple4
x4	ogdf/basic/tuples.h	/^	E4 &x4() { return m_x4; }$/;"	f	class:ogdf::Tuple4
x4	ogdf/basic/tuples.h	/^	const E4 &x4() const { return m_x4; }$/;"	f	class:ogdf::Tuple4
xInvert	ogdf/basic/geometry.h	/^	void xInvert() { swap(m_p1.m_x, m_p2.m_x); }$/;"	f	class:ogdf::DRect
xPredefKey	ogdf/fileformats/GmlParser.h	/^		nodePredefKey, edgePredefKey, graphicsPredefKey, xPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
xPredefKey	ogdf/fileformats/XmlParser.h	/^		nodePredefKey, edgePredefKey, graphicsPredefKey, xPredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
x_delete_left_subLists	ogdf/internal/energybased/NMM.cpp	/^void NMM::x_delete_left_subLists($/;"	f	class:ogdf::NMM
x_delete_right_subLists	ogdf/internal/energybased/NMM.cpp	/^void NMM::x_delete_right_subLists($/;"	f	class:ogdf::NMM
x_y_coord	ogdf/internal/energybased/ParticleInfo.h	/^	double x_y_coord; \/\/the x (resp. y) coordinate of the actual position of the vertex$/;"	m	class:ogdf::ParticleInfo
xmlDoubleValue	ogdf/fileformats/XmlObject.h	/^enum XmlObjectType { xmlIntValue, xmlDoubleValue, xmlStringValue, xmlListBegin,$/;"	e	enum:ogdf::XmlObjectType
xmlEOF	ogdf/fileformats/XmlObject.h	/^	xmlListEnd, xmlKey, xmlEOF, xmlError };$/;"	e	enum:ogdf::XmlObjectType
xmlError	ogdf/fileformats/XmlObject.h	/^	xmlListEnd, xmlKey, xmlEOF, xmlError };$/;"	e	enum:ogdf::XmlObjectType
xmlIntValue	ogdf/fileformats/XmlObject.h	/^enum XmlObjectType { xmlIntValue, xmlDoubleValue, xmlStringValue, xmlListBegin,$/;"	e	enum:ogdf::XmlObjectType
xmlKey	ogdf/fileformats/XmlObject.h	/^	xmlListEnd, xmlKey, xmlEOF, xmlError };$/;"	e	enum:ogdf::XmlObjectType
xmlListBegin	ogdf/fileformats/XmlObject.h	/^enum XmlObjectType { xmlIntValue, xmlDoubleValue, xmlStringValue, xmlListBegin,$/;"	e	enum:ogdf::XmlObjectType
xmlListEnd	ogdf/fileformats/XmlObject.h	/^	xmlListEnd, xmlKey, xmlEOF, xmlError };$/;"	e	enum:ogdf::XmlObjectType
xmlStringValue	ogdf/fileformats/XmlObject.h	/^enum XmlObjectType { xmlIntValue, xmlDoubleValue, xmlStringValue, xmlListBegin,$/;"	e	enum:ogdf::XmlObjectType
y	ogdf/basic/GraphAttributes.h	/^	const double &y(node v) const {$/;"	f	class:ogdf::GraphAttributes
y	ogdf/basic/GraphAttributes.h	/^	double &y(node v) {$/;"	f	class:ogdf::GraphAttributes
y	ogdf/internal/energybased/MultilevelGraph.h	/^	double y(node v) { return m_GA->y(v); }$/;"	f	class:ogdf::MultilevelGraph
y	ogdf/internal/energybased/MultilevelGraph.h	/^	void y(node v, double y) { m_GA->y(v) = y;}$/;"	f	class:ogdf::MultilevelGraph
yAbs	ogdf/basic/geometry.h	/^	double yAbs() const { return (dx() == 0) ? DBL_MAX : m_start.m_y - (slope() * m_start.m_x); }$/;"	f	class:ogdf::DLine
yInvert	ogdf/basic/geometry.h	/^	void yInvert() { swap(m_p1.m_y, m_p2.m_y); }$/;"	f	class:ogdf::DRect
yPredefKey	ogdf/fileformats/GmlParser.h	/^		yPredefKey, wPredefKey, hPredefKey, typePredefKey, widthPredefKey,$/;"	e	enum:ogdf::GmlParser::PredefinedKey
yPredefKey	ogdf/fileformats/XmlParser.h	/^		yPredefKey, wPredefKey, hPredefKey, nodetypePredefKey, edgetypePredefKey,$/;"	e	enum:ogdf::XmlParser::PredefinedKey
y_delete_left_subLists	ogdf/internal/energybased/NMM.cpp	/^void NMM::y_delete_left_subLists($/;"	f	class:ogdf::NMM
y_delete_right_subLists	ogdf/internal/energybased/NMM.cpp	/^void NMM::y_delete_right_subLists($/;"	f	class:ogdf::NMM
y_move_left_subLists	ogdf/internal/energybased/NMM.cpp	/^void NMM::y_move_left_subLists($/;"	f	class:ogdf::NMM
y_move_right_subLists	ogdf/internal/energybased/NMM.cpp	/^void NMM::y_move_right_subLists($/;"	f	class:ogdf::NMM
zoomFactor	program/settings.h	/^    double zoomFactor;$/;"	m	class:Settings
zoomSpinBoxChanged	ui/mainwindow.cpp	/^void MainWindow::zoomSpinBoxChanged()$/;"	f	class:MainWindow
zoomToFitRect	ui/mainwindow.cpp	/^void MainWindow::zoomToFitRect(QRectF rect)$/;"	f	class:MainWindow
zoomToFitScene	ui/mainwindow.cpp	/^void MainWindow::zoomToFitScene()$/;"	f	class:MainWindow
zoomToSelection	ui/mainwindow.cpp	/^void MainWindow::zoomToSelection()$/;"	f	class:MainWindow
zoomedWithMouseWheel	ui/mainwindow.cpp	/^void MainWindow::zoomedWithMouseWheel()$/;"	f	class:MainWindow
~AboutDialog	ui/aboutdialog.cpp	/^AboutDialog::~AboutDialog()$/;"	f	class:AboutDialog
~AdjEntryArrayBase	ogdf/basic/AdjEntryArray.h	/^	virtual ~AdjEntryArrayBase() {$/;"	f	class:ogdf::AdjEntryArrayBase
~Array	ogdf/basic/Array.h	/^	~Array() {$/;"	f	class:ogdf::Array
~Array2D	ogdf/basic/Array2D.h	/^	 ~Array2D() {$/;"	f	class:ogdf::Array2D
~AssemblyGraph	graph/assemblygraph.cpp	/^AssemblyGraph::~AssemblyGraph()$/;"	f	class:AssemblyGraph
~BlastHitFiltersDialog	ui/blasthitfiltersdialog.cpp	/^BlastHitFiltersDialog::~BlastHitFiltersDialog()$/;"	f	class:BlastHitFiltersDialog
~BlastQueries	blast/blastqueries.cpp	/^BlastQueries::~BlastQueries()$/;"	f	class:BlastQueries
~BlastSearch	blast/blastsearch.cpp	/^BlastSearch::~BlastSearch()$/;"	f	class:BlastSearch
~BlastSearchDialog	ui/blastsearchdialog.cpp	/^BlastSearchDialog::~BlastSearchDialog()$/;"	f	class:BlastSearchDialog
~BoundedStack	ogdf/basic/BoundedStack.h	/^	~BoundedStack() {$/;"	f	class:ogdf::BoundedStack
~BucketFunc	ogdf/basic/basic.h	/^	virtual ~BucketFunc() { }$/;"	f	class:ogdf::BucketFunc
~ChangeNodeDepthDialog	ui/changenodedepthdialog.cpp	/^ChangeNodeDepthDialog::~ChangeNodeDepthDialog()$/;"	f	class:ChangeNodeDepthDialog
~ChangeNodeNameDialog	ui/changenodenamedialog.cpp	/^ChangeNodeNameDialog::~ChangeNodeNameDialog()$/;"	f	class:ChangeNodeNameDialog
~ClusterArrayBase	ogdf/cluster/ClusterArray.h	/^	virtual ~ClusterArrayBase() {$/;"	f	class:ogdf::ClusterArrayBase
~ClusterGraph	ogdf/cluster/ClusterGraph.cpp	/^ClusterGraph::~ClusterGraph()$/;"	f	class:ogdf::ClusterGraph
~ClusterGraphAttributes	ogdf/cluster/ClusterGraphAttributes.h	/^			virtual ~ClusterGraphAttributes() { }$/;"	f	class:ogdf::ClusterGraphAttributes
~ClusterGraphObserver	ogdf/cluster/ClusterGraphObserver.h	/^	virtual ~ClusterGraphObserver()$/;"	f	class:ogdf::ClusterGraphObserver
~Constraint	ogdf/basic/Constraints.h	/^	virtual ~Constraint() {}$/;"	f	class:ogdf::Constraint
~CriticalSection	ogdf/basic/CriticalSection.h	/^	~CriticalSection() {$/;"	f	class:ogdf::CriticalSection
~DScaler	ogdf/basic/geometry.h	/^	~DScaler() {}$/;"	f	class:ogdf::DScaler
~DeBruijnNode	graph/debruijnnode.cpp	/^DeBruijnNode::~DeBruijnNode()$/;"	f	class:DeBruijnNode
~DinoLineBuffer	ogdf/fileformats/DinoLineBuffer.cpp	/^	DinoLineBuffer::~DinoLineBuffer()$/;"	f	class:ogdf::DinoLineBuffer
~DinoXmlParser	ogdf/fileformats/DinoXmlParser.cpp	/^	DinoXmlParser::~DinoXmlParser()$/;"	f	class:ogdf::DinoXmlParser
~DinoXmlScanner	ogdf/fileformats/DinoXmlScanner.cpp	/^	DinoXmlScanner::~DinoXmlScanner()$/;"	f	class:ogdf::DinoXmlScanner
~Edge	ogdf/energybased/Edge.h	/^	~Edge() { } \/\/destructor$/;"	f	class:ogdf::Edge
~EdgeArrayBase	ogdf/basic/EdgeArray.h	/^	virtual ~EdgeArrayBase() {$/;"	f	class:ogdf::EdgeArrayBase
~EdgeAttributes	ogdf/internal/energybased/EdgeAttributes.h	/^	~EdgeAttributes() { }   \/\/destructor$/;"	f	class:ogdf::EdgeAttributes
~EnterOneBlastQueryDialog	ui/enteroneblastquerydialog.cpp	/^EnterOneBlastQueryDialog::~EnterOneBlastQueryDialog()$/;"	f	class:EnterOneBlastQueryDialog
~FMMMLayout	ogdf/energybased/FMMMLayout.h	/^	virtual ~FMMMLayout() { }$/;"	f	class:ogdf::FMMMLayout
~FaceArrayBase	ogdf/basic/FaceArray.h	/^	virtual ~FaceArrayBase() {$/;"	f	class:ogdf::FaceArrayBase
~FaceSet	ogdf/basic/FaceSet.h	/^	~FaceSet() { }$/;"	f	class:ogdf::FaceSet
~FaceSetPure	ogdf/basic/FaceSet.h	/^	~FaceSetPure() { }$/;"	f	class:ogdf::FaceSetPure
~FaceSetSimple	ogdf/basic/FaceSet.h	/^	~FaceSetSimple() { }$/;"	f	class:ogdf::FaceSetSimple
~FruchtermanReingold	ogdf/internal/energybased/FruchtermanReingold.h	/^	~FruchtermanReingold() { }      \/\/destructor$/;"	f	class:ogdf::FruchtermanReingold
~GmlParser	ogdf/fileformats/GmlParser.cpp	/^GmlParser::~GmlParser()$/;"	f	class:ogdf::GmlParser
~Graph	ogdf/basic/Graph.cpp	/^Graph::~Graph()$/;"	f	class:ogdf::Graph
~GraphAttributes	ogdf/basic/GraphAttributes.h	/^	virtual ~GraphAttributes() {$/;"	f	class:ogdf::GraphAttributes
~GraphConstraints	ogdf/basic/Constraints.h	/^	virtual ~GraphConstraints() {$/;"	f	class:ogdf::GraphConstraints
~GraphCopy	ogdf/basic/GraphCopy.h	/^	virtual ~GraphCopy() { }$/;"	f	class:ogdf::GraphCopy
~GraphCopySimple	ogdf/basic/GraphCopy.h	/^	virtual ~GraphCopySimple() { }$/;"	f	class:ogdf::GraphCopySimple
~GraphInfoDialog	ui/graphinfodialog.cpp	/^GraphInfoDialog::~GraphInfoDialog()$/;"	f	class:GraphInfoDialog
~GraphList	ogdf/basic/Graph_d.h	/^	~GraphList() {$/;"	f	class:ogdf::GraphList
~GraphListBase	ogdf/basic/Graph_d.h	/^	~GraphListBase() { }$/;"	f	class:ogdf::GraphListBase
~GraphObserver	ogdf/basic/GraphObserver.h	/^	virtual ~GraphObserver()$/;"	f	class:ogdf::GraphObserver
~Hashing	ogdf/basic/Hashing.h	/^	~Hashing() { HashingBase::destroyAll(); }$/;"	f	class:ogdf::Hashing
~HashingBase	ogdf/basic/Hashing.cpp	/^HashingBase::~HashingBase()$/;"	f	class:ogdf::HashingBase
~HelpRecord	ogdf/energybased/PQueue.h	/^	~HelpRecord(){ } \/\/destructor$/;"	f	class:ogdf::HelpRecord
~Initialization	ogdf/basic/basic.cpp	/^Initialization::~Initialization()$/;"	f	class:ogdf::Initialization
~LayoutModule	ogdf/module/LayoutModule.h	/^	virtual ~LayoutModule() { }$/;"	f	class:ogdf::LayoutModule
~List	ogdf/basic/List.h	/^	~List() { }$/;"	f	class:ogdf::List
~ListPure	ogdf/basic/List.h	/^	~ListPure() { clear(); }$/;"	f	class:ogdf::ListPure
~MAARPacking	ogdf/energybased/MAARPacking.cpp	/^MAARPacking::~MAARPacking() { }$/;"	f	class:ogdf::MAARPacking
~MainWindow	ui/mainwindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
~MallocMemoryAllocator	ogdf/internal/basic/MallocMemoryAllocator.h	/^	~MallocMemoryAllocator() { }$/;"	f	class:ogdf::MallocMemoryAllocator
~Multilevel	ogdf/energybased/Multilevel.h	/^	~Multilevel() { }    \/\/destructor$/;"	f	class:ogdf::Multilevel
~MultilevelGraph	ogdf/internal/energybased/MultilevelGraph.cpp	/^MultilevelGraph::~MultilevelGraph()$/;"	f	class:ogdf::MultilevelGraph
~MyProgressDialog	ui/myprogressdialog.cpp	/^MyProgressDialog::~MyProgressDialog()$/;"	f	class:MyProgressDialog
~NMM	ogdf/internal/energybased/NMM.h	/^	~NMM() { }      \/\/destructor$/;"	f	class:ogdf::NMM
~Node	ogdf/energybased/Node.h	/^		~Node() { }    \/\/destructor$/;"	f	class:ogdf::Node
~NodeArrayBase	ogdf/basic/NodeArray.h	/^	virtual ~NodeArrayBase() {$/;"	f	class:ogdf::NodeArrayBase
~NodeAttributes	ogdf/internal/energybased/NodeAttributes.h	/^	~NodeAttributes() { }   \/\/destructor$/;"	f	class:ogdf::NodeAttributes
~NodeMerge	ogdf/internal/energybased/MultilevelGraph.h	/^	~NodeMerge() { }$/;"	f	struct:ogdf::NodeMerge
~NodeWidthVisualAid	ui/nodewidthvisualaid.cpp	/^NodeWidthVisualAid::~NodeWidthVisualAid()$/;"	f	class:NodeWidthVisualAid
~OgmlAttribute	ogdf/fileformats/OgmlParser.cpp	/^	~OgmlAttribute() { }$/;"	f	class:ogdf::OgmlParser::OgmlAttribute
~OgmlAttributeValue	ogdf/fileformats/OgmlParser.cpp	/^	~OgmlAttributeValue() { }$/;"	f	class:ogdf::OgmlParser::OgmlAttributeValue
~OgmlParser	ogdf/fileformats/OgmlParser.h	/^	~OgmlParser() { }$/;"	f	class:ogdf::OgmlParser
~OgmlTag	ogdf/fileformats/OgmlParser.cpp	/^	~OgmlTag() {}$/;"	f	class:ogdf::OgmlParser::OgmlTag
~PQueue	ogdf/energybased/PQueue.h	/^	~PQueue(){ }            \/\/destructor$/;"	f	class:ogdf::PQueue
~PackingRowInfo	ogdf/energybased/PackingRowInfo.h	/^		~PackingRowInfo() { } \/\/destructor$/;"	f	class:ogdf::PackingRowInfo
~ParticleInfo	ogdf/internal/energybased/ParticleInfo.h	/^	~ParticleInfo() { }   \/\/destructor$/;"	f	class:ogdf::ParticleInfo
~PathSpecifyDialog	ui/pathspecifydialog.cpp	/^PathSpecifyDialog::~PathSpecifyDialog()$/;"	f	class:PathSpecifyDialog
~PoolMemoryAllocator	ogdf/internal/basic/PoolMemoryAllocator.h	/^	~PoolMemoryAllocator() { }$/;"	f	class:ogdf::PoolMemoryAllocator
~QuadTreeNM	ogdf/internal/energybased/QuadTreeNM.h	/^	~QuadTreeNM() { }  \/\/destructor$/;"	f	class:ogdf::QuadTreeNM
~QuadTreeNodeNM	ogdf/internal/energybased/QuadTreeNodeNM.cpp	/^QuadTreeNodeNM::~QuadTreeNodeNM()$/;"	f	class:ogdf::QuadTreeNodeNM
~QueryPathsDialog	ui/querypathsdialog.cpp	/^QueryPathsDialog::~QueryPathsDialog()$/;"	f	class:QueryPathsDialog
~Rectangle	ogdf/energybased/Rectangle.h	/^		~Rectangle() { }    \/\/destructor$/;"	f	class:ogdf::Rectangle
~RectangleComparerArea	ogdf/energybased/Rectangle.h	/^        ~RectangleComparerArea() { }$/;"	f	class:ogdf::RectangleComparerArea
~RectangleComparerHeight	ogdf/energybased/Rectangle.h	/^		~RectangleComparerHeight() { }$/;"	f	class:ogdf::RectangleComparerHeight
~RectangleComparerWidth	ogdf/energybased/Rectangle.h	/^		~RectangleComparerWidth() { }$/;"	f	class:ogdf::RectangleComparerWidth
~SList	ogdf/basic/SList.h	/^	~SList() { }$/;"	f	class:ogdf::SList
~SListPure	ogdf/basic/SList.h	/^	~SListPure() { clear(); }$/;"	f	class:ogdf::SListPure
~Set	ogdf/energybased/Set.cpp	/^Set::~Set()$/;"	f	class:ogdf::Set
~SettingsDialog	ui/settingsdialog.cpp	/^SettingsDialog::~SettingsDialog()$/;"	f	class:SettingsDialog
~Stack	ogdf/basic/Stack.h	/^	~Stack() { }$/;"	f	class:ogdf::Stack
~StackPure	ogdf/basic/Stack.h	/^	~StackPure() {$/;"	f	class:ogdf::StackPure
~String	ogdf/basic/String.cpp	/^String::~String()$/;"	f	class:ogdf::String
~VComparer	ogdf/basic/comparer.h	/^	virtual ~VComparer() { }$/;"	f	class:ogdf::VComparer
~XmlAttributeObject	ogdf/fileformats/DinoXmlParser.h	/^		~XmlAttributeObject(){};$/;"	f	struct:ogdf::XmlAttributeObject
~XmlParser	ogdf/fileformats/XmlParser.cpp	/^XmlParser::~XmlParser()$/;"	f	class:ogdf::XmlParser
~XmlTagObject	ogdf/fileformats/DinoXmlParser.h	/^		~XmlTagObject(){};$/;"	f	struct:ogdf::XmlTagObject
